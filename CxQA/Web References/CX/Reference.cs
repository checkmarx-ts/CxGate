//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CxQA.CX {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CxPortalWebServiceSoap", Namespace="http://Checkmarx.com")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSReportRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WebClientUser))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxPivotRow[]))]
    public partial class CxPortalWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsValidCompanyNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceProviderTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceProviderCompaniesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompanyPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserAsCompanyManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserAsServiceProviderManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidServiceProviderNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCompanyPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetSystemSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerLanguageListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifySupportedVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstallationSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPresetListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryCollectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryCollectionWithInactiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPresetDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewPresetOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePresetOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePresetOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidPresetNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueriesCategoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDetailsForQueryVersionCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueriesForScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsForQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsForQueryQroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsForScanByLanguageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsForScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPathCommentsHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileNamesForPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultPathsForQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultGraphForQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsBySeverityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveCustomFieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCustomFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomFieldValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePredefinedCommandsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPredefinedCommandsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExecutableListOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectAssignUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectAssignUsersListOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAllowAutoSignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveSubsetResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPivotDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPivotLayoutsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SavePivotLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePivotLayoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryShortDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterSaasPendingUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateSaasUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSaasPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamSaaSPackageOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaasLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailForSalesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEngineServersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEngineServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateEngineServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEngineServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportPresetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetImportQueriesStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExistingQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExistingPresetQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportPresetOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateScanReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScanReportStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScanReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelScanReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveUserPreferencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPreferencesOperationCompleted;
        
        private System.Threading.SendOrPostCallback IssueTrackingSystemsAPIOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVersionNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamFullPathsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectScannedDisplayDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFailedScansDisplayDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTabWidgetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWidgetFiltersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWidgetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLdapServersConfigurationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetLdapServersConfigurationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestLdapServerConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfiguredLdapServerNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLdapServerGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTeamLdapGroupsMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTeamLdapGroupsMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteDataRetentionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataRetentionStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestFinishedDataRetentionRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopDataRetentionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLicenseExpirationDateForAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLicenseExpirationNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelLicenseExpirationNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback WarmupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectsWithScansOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadProjectWithDefaultSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceCodeForScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryCollectionForLanguageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryCollectionForLanguageByTeamIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadQueriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddScanResultsToProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCacheOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SamlLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback SsoLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback SsoLoginV2OperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginBySIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsFirstLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback FirstLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssociatedGroupsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationSetListOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidProjectNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSharedFileSystemLayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRepositoryFileSystemLayerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceControlActionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPostScanActionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateAndRunProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunScanAndAddToProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountLinesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScansStatusesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStatusOfSingleScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback PostponeScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProjectUserCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectsWithUserCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectsCredentialUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectsDisplayDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunProjectImmediatelyOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunProjectIncrementallyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProjectConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateProjectIncrementalConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectChartsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFalsePositiveFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateResultCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateResultStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSetOfResultStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSetOfResultStateInfluenceCheckOperationCompleted;
        
        private System.Threading.SendOrPostCallback BranchProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProjectBranchingStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunScanWithExistingProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScansDisplayDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScanPropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateScanCommentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScansDisplayDataForAllProjectsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScanSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScanCompareSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompareScanResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScanLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteScansOperationCompleted;
        
        private System.Threading.SendOrPostCallback LockScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnlockScanOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryDescriptionByQueryIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetQueryDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCWEDescriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourceByScanIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSourcesByScanIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetResultStateListOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsSMTPHostConfiguredOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPasswordComplexityEnabledOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsPrivateCloudOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAdminAllowedToChangeUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForgotPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckChangePasswordTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordWithTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordAdminToUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompaniesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterPendingUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPendingUsersListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePendingUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApprovePendingUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserProfileDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserProfileDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUsersInGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHierarchyGroupTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChildNodesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAncestryGroupTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserActivationStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerLicenseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersLicenseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompaniesLicenseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSPLicenseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCompaniesListOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailbleDomainNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailbleUserDirectoriesNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailbleUserDirectoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUsersFromDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUsersFromUserDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUserDirecTeamsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateNewServiceProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllCompaniesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSPsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSPOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CxPortalWebService() {
            this.Url = global::CxQA.Properties.Settings.Default.CxQA_CX_CxPortalWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event IsValidCompanyNameCompletedEventHandler IsValidCompanyNameCompleted;
        
        /// <remarks/>
        public event GetCompanyTeamsCompletedEventHandler GetCompanyTeamsCompleted;
        
        /// <remarks/>
        public event GetServiceProviderTeamsCompletedEventHandler GetServiceProviderTeamsCompleted;
        
        /// <remarks/>
        public event GetServiceProviderCompaniesCompletedEventHandler GetServiceProviderCompaniesCompleted;
        
        /// <remarks/>
        public event GetCompanyPropertiesCompletedEventHandler GetCompanyPropertiesCompleted;
        
        /// <remarks/>
        public event SetUserAsCompanyManagerCompletedEventHandler SetUserAsCompanyManagerCompleted;
        
        /// <remarks/>
        public event SetUserAsServiceProviderManagerCompletedEventHandler SetUserAsServiceProviderManagerCompleted;
        
        /// <remarks/>
        public event IsValidServiceProviderNameCompletedEventHandler IsValidServiceProviderNameCompleted;
        
        /// <remarks/>
        public event UpdateCompanyPropertiesCompletedEventHandler UpdateCompanyPropertiesCompleted;
        
        /// <remarks/>
        public event SetSystemSettingsCompletedEventHandler SetSystemSettingsCompleted;
        
        /// <remarks/>
        public event GetServerLanguageListCompletedEventHandler GetServerLanguageListCompleted;
        
        /// <remarks/>
        public event GetSystemSettingsCompletedEventHandler GetSystemSettingsCompleted;
        
        /// <remarks/>
        public event VerifySupportedVersionCompletedEventHandler VerifySupportedVersionCompleted;
        
        /// <remarks/>
        public event GetInstallationSettingsCompletedEventHandler GetInstallationSettingsCompleted;
        
        /// <remarks/>
        public event GetPresetListCompletedEventHandler GetPresetListCompleted;
        
        /// <remarks/>
        public event GetQueryCollectionCompletedEventHandler GetQueryCollectionCompleted;
        
        /// <remarks/>
        public event GetQueryCollectionWithInactiveCompletedEventHandler GetQueryCollectionWithInactiveCompleted;
        
        /// <remarks/>
        public event GetPresetDetailsCompletedEventHandler GetPresetDetailsCompleted;
        
        /// <remarks/>
        public event CreateNewPresetCompletedEventHandler CreateNewPresetCompleted;
        
        /// <remarks/>
        public event UpdatePresetCompletedEventHandler UpdatePresetCompleted;
        
        /// <remarks/>
        public event DeletePresetCompletedEventHandler DeletePresetCompleted;
        
        /// <remarks/>
        public event IsValidPresetNameCompletedEventHandler IsValidPresetNameCompleted;
        
        /// <remarks/>
        public event GetQueriesCategoriesCompletedEventHandler GetQueriesCategoriesCompleted;
        
        /// <remarks/>
        public event GetDetailsForQueryVersionCodeCompletedEventHandler GetDetailsForQueryVersionCodeCompleted;
        
        /// <remarks/>
        public event GetQueriesForScanCompletedEventHandler GetQueriesForScanCompleted;
        
        /// <remarks/>
        public event GetResultsForQueryCompletedEventHandler GetResultsForQueryCompleted;
        
        /// <remarks/>
        public event GetResultsForQueryQroupCompletedEventHandler GetResultsForQueryQroupCompleted;
        
        /// <remarks/>
        public event GetResultsForScanByLanguageCompletedEventHandler GetResultsForScanByLanguageCompleted;
        
        /// <remarks/>
        public event GetResultsForScanCompletedEventHandler GetResultsForScanCompleted;
        
        /// <remarks/>
        public event GetResultPathCompletedEventHandler GetResultPathCompleted;
        
        /// <remarks/>
        public event GetPathCommentsHistoryCompletedEventHandler GetPathCommentsHistoryCompleted;
        
        /// <remarks/>
        public event GetFileNamesForPathCompletedEventHandler GetFileNamesForPathCompleted;
        
        /// <remarks/>
        public event GetResultPathsForQueryCompletedEventHandler GetResultPathsForQueryCompleted;
        
        /// <remarks/>
        public event GetResultGraphForQueryCompletedEventHandler GetResultGraphForQueryCompleted;
        
        /// <remarks/>
        public event GetResultsBySeverityCompletedEventHandler GetResultsBySeverityCompleted;
        
        /// <remarks/>
        public event GetCustomFieldsCompletedEventHandler GetCustomFieldsCompleted;
        
        /// <remarks/>
        public event SaveCustomFieldsCompletedEventHandler SaveCustomFieldsCompleted;
        
        /// <remarks/>
        public event DeleteCustomFieldCompletedEventHandler DeleteCustomFieldCompleted;
        
        /// <remarks/>
        public event GetCustomFieldValuesCompletedEventHandler GetCustomFieldValuesCompleted;
        
        /// <remarks/>
        public event SavePredefinedCommandsCompletedEventHandler SavePredefinedCommandsCompleted;
        
        /// <remarks/>
        public event GetPredefinedCommandsCompletedEventHandler GetPredefinedCommandsCompleted;
        
        /// <remarks/>
        public event GetExecutableListCompletedEventHandler GetExecutableListCompleted;
        
        /// <remarks/>
        public event UpdatePermissionCompletedEventHandler UpdatePermissionCompleted;
        
        /// <remarks/>
        public event GetProjectAssignUsersCompletedEventHandler GetProjectAssignUsersCompleted;
        
        /// <remarks/>
        public event GetProjectAssignUsersListCompletedEventHandler GetProjectAssignUsersListCompleted;
        
        /// <remarks/>
        public event IsAllowAutoSignInCompletedEventHandler IsAllowAutoSignInCompleted;
        
        /// <remarks/>
        public event SaveSubsetResultsCompletedEventHandler SaveSubsetResultsCompleted;
        
        /// <remarks/>
        public event GetPivotDataCompletedEventHandler GetPivotDataCompleted;
        
        /// <remarks/>
        public event GetPivotLayoutsCompletedEventHandler GetPivotLayoutsCompleted;
        
        /// <remarks/>
        public event SavePivotLayoutCompletedEventHandler SavePivotLayoutCompleted;
        
        /// <remarks/>
        public event DeletePivotLayoutCompletedEventHandler DeletePivotLayoutCompleted;
        
        /// <remarks/>
        public event GetQueryShortDescriptionCompletedEventHandler GetQueryShortDescriptionCompleted;
        
        /// <remarks/>
        public event RegisterSaasPendingUserCompletedEventHandler RegisterSaasPendingUserCompleted;
        
        /// <remarks/>
        public event ActivateSaasUserCompletedEventHandler ActivateSaasUserCompleted;
        
        /// <remarks/>
        public event GetSaasPackagesCompletedEventHandler GetSaasPackagesCompleted;
        
        /// <remarks/>
        public event GetTeamSaaSPackageCompletedEventHandler GetTeamSaaSPackageCompleted;
        
        /// <remarks/>
        public event SaasLoginCompletedEventHandler SaasLoginCompleted;
        
        /// <remarks/>
        public event SendEmailForSalesCompletedEventHandler SendEmailForSalesCompleted;
        
        /// <remarks/>
        public event GetEngineServersCompletedEventHandler GetEngineServersCompleted;
        
        /// <remarks/>
        public event UpdateEngineServerCompletedEventHandler UpdateEngineServerCompleted;
        
        /// <remarks/>
        public event CreateEngineServerCompletedEventHandler CreateEngineServerCompleted;
        
        /// <remarks/>
        public event DeleteEngineServerCompletedEventHandler DeleteEngineServerCompleted;
        
        /// <remarks/>
        public event ScanCompletedEventHandler ScanCompleted;
        
        /// <remarks/>
        public event ExportQueriesCompletedEventHandler ExportQueriesCompleted;
        
        /// <remarks/>
        public event ExportPresetCompletedEventHandler ExportPresetCompleted;
        
        /// <remarks/>
        public event ImportQueriesCompletedEventHandler ImportQueriesCompleted;
        
        /// <remarks/>
        public event GetImportQueriesStatusCompletedEventHandler GetImportQueriesStatusCompleted;
        
        /// <remarks/>
        public event GetExistingQueriesCompletedEventHandler GetExistingQueriesCompleted;
        
        /// <remarks/>
        public event GetExistingPresetQueriesCompletedEventHandler GetExistingPresetQueriesCompleted;
        
        /// <remarks/>
        public event ImportPresetCompletedEventHandler ImportPresetCompleted;
        
        /// <remarks/>
        public event CreateScanReportCompletedEventHandler CreateScanReportCompleted;
        
        /// <remarks/>
        public event GetScanReportStatusCompletedEventHandler GetScanReportStatusCompleted;
        
        /// <remarks/>
        public event GetScanReportCompletedEventHandler GetScanReportCompleted;
        
        /// <remarks/>
        public event CancelScanReportCompletedEventHandler CancelScanReportCompleted;
        
        /// <remarks/>
        public event SaveUserPreferencesCompletedEventHandler SaveUserPreferencesCompleted;
        
        /// <remarks/>
        public event GetUserPreferencesCompletedEventHandler GetUserPreferencesCompleted;
        
        /// <remarks/>
        public event IssueTrackingSystemsAPICompletedEventHandler IssueTrackingSystemsAPICompleted;
        
        /// <remarks/>
        public event GetVersionNumberCompletedEventHandler GetVersionNumberCompleted;
        
        /// <remarks/>
        public event MoveTeamCompletedEventHandler MoveTeamCompleted;
        
        /// <remarks/>
        public event GetTeamFullPathsCompletedEventHandler GetTeamFullPathsCompleted;
        
        /// <remarks/>
        public event GetProjectScannedDisplayDataCompletedEventHandler GetProjectScannedDisplayDataCompleted;
        
        /// <remarks/>
        public event GetFailedScansDisplayDataCompletedEventHandler GetFailedScansDisplayDataCompleted;
        
        /// <remarks/>
        public event GetTabWidgetsCompletedEventHandler GetTabWidgetsCompleted;
        
        /// <remarks/>
        public event GetWidgetFiltersCompletedEventHandler GetWidgetFiltersCompleted;
        
        /// <remarks/>
        public event GetWidgetDataCompletedEventHandler GetWidgetDataCompleted;
        
        /// <remarks/>
        public event GetLdapServersConfigurationsCompletedEventHandler GetLdapServersConfigurationsCompleted;
        
        /// <remarks/>
        public event SetLdapServersConfigurationsCompletedEventHandler SetLdapServersConfigurationsCompleted;
        
        /// <remarks/>
        public event TestLdapServerConnectionCompletedEventHandler TestLdapServerConnectionCompleted;
        
        /// <remarks/>
        public event GetConfiguredLdapServerNamesCompletedEventHandler GetConfiguredLdapServerNamesCompleted;
        
        /// <remarks/>
        public event GetLdapServerGroupsCompletedEventHandler GetLdapServerGroupsCompleted;
        
        /// <remarks/>
        public event GetTeamLdapGroupsMappingCompletedEventHandler GetTeamLdapGroupsMappingCompleted;
        
        /// <remarks/>
        public event SetTeamLdapGroupsMappingCompletedEventHandler SetTeamLdapGroupsMappingCompleted;
        
        /// <remarks/>
        public event ExecuteDataRetentionCompletedEventHandler ExecuteDataRetentionCompleted;
        
        /// <remarks/>
        public event GetDataRetentionStatusCompletedEventHandler GetDataRetentionStatusCompleted;
        
        /// <remarks/>
        public event GetLatestFinishedDataRetentionRequestCompletedEventHandler GetLatestFinishedDataRetentionRequestCompleted;
        
        /// <remarks/>
        public event StopDataRetentionCompletedEventHandler StopDataRetentionCompleted;
        
        /// <remarks/>
        public event GetLicenseExpirationDateForAdminCompletedEventHandler GetLicenseExpirationDateForAdminCompleted;
        
        /// <remarks/>
        public event AddLicenseExpirationNotificationCompletedEventHandler AddLicenseExpirationNotificationCompleted;
        
        /// <remarks/>
        public event CancelLicenseExpirationNotificationCompletedEventHandler CancelLicenseExpirationNotificationCompleted;
        
        /// <remarks/>
        public event WarmupCompletedEventHandler WarmupCompleted;
        
        /// <remarks/>
        public event GetProjectsWithScansCompletedEventHandler GetProjectsWithScansCompleted;
        
        /// <remarks/>
        public event UploadProjectWithDefaultSettingsCompletedEventHandler UploadProjectWithDefaultSettingsCompleted;
        
        /// <remarks/>
        public event GetSourceCodeForScanCompletedEventHandler GetSourceCodeForScanCompleted;
        
        /// <remarks/>
        public event GetQueryCollectionForLanguageCompletedEventHandler GetQueryCollectionForLanguageCompleted;
        
        /// <remarks/>
        public event GetQueryCollectionForLanguageByTeamIdCompletedEventHandler GetQueryCollectionForLanguageByTeamIdCompleted;
        
        /// <remarks/>
        public event UploadQueriesCompletedEventHandler UploadQueriesCompleted;
        
        /// <remarks/>
        public event AddScanResultsToProjectCompletedEventHandler AddScanResultsToProjectCompleted;
        
        /// <remarks/>
        public event GetResultsCompletedEventHandler GetResultsCompleted;
        
        /// <remarks/>
        public event GetResultSummaryCompletedEventHandler GetResultSummaryCompleted;
        
        /// <remarks/>
        public event GetCacheCompletedEventHandler GetCacheCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event SamlLoginCompletedEventHandler SamlLoginCompleted;
        
        /// <remarks/>
        public event LoginV2CompletedEventHandler LoginV2Completed;
        
        /// <remarks/>
        public event SsoLoginCompletedEventHandler SsoLoginCompleted;
        
        /// <remarks/>
        public event SsoLoginV2CompletedEventHandler SsoLoginV2Completed;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event LoginBySIDCompletedEventHandler LoginBySIDCompleted;
        
        /// <remarks/>
        public event IsFirstLoginCompletedEventHandler IsFirstLoginCompleted;
        
        /// <remarks/>
        public event FirstLoginCompletedEventHandler FirstLoginCompleted;
        
        /// <remarks/>
        public event GetAssociatedGroupsListCompletedEventHandler GetAssociatedGroupsListCompleted;
        
        /// <remarks/>
        public event GetConfigurationSetListCompletedEventHandler GetConfigurationSetListCompleted;
        
        /// <remarks/>
        public event IsValidProjectNameCompletedEventHandler IsValidProjectNameCompleted;
        
        /// <remarks/>
        public event GetSharedFileSystemLayerCompletedEventHandler GetSharedFileSystemLayerCompleted;
        
        /// <remarks/>
        public event GetRepositoryFileSystemLayerCompletedEventHandler GetRepositoryFileSystemLayerCompleted;
        
        /// <remarks/>
        public event GetSourceControlActionListCompletedEventHandler GetSourceControlActionListCompleted;
        
        /// <remarks/>
        public event GetPostScanActionListCompletedEventHandler GetPostScanActionListCompleted;
        
        /// <remarks/>
        public event CreateNewProjectCompletedEventHandler CreateNewProjectCompleted;
        
        /// <remarks/>
        public event CreateAndRunProjectCompletedEventHandler CreateAndRunProjectCompleted;
        
        /// <remarks/>
        public event RunScanAndAddToProjectCompletedEventHandler RunScanAndAddToProjectCompleted;
        
        /// <remarks/>
        public event CountLinesCompletedEventHandler CountLinesCompleted;
        
        /// <remarks/>
        public event GetScansStatusesCompletedEventHandler GetScansStatusesCompleted;
        
        /// <remarks/>
        public event GetStatusOfSingleScanCompletedEventHandler GetStatusOfSingleScanCompleted;
        
        /// <remarks/>
        public event PostponeScanCompletedEventHandler PostponeScanCompleted;
        
        /// <remarks/>
        public event CancelScanCompletedEventHandler CancelScanCompleted;
        
        /// <remarks/>
        public event UpdateProjectUserCredentialsCompletedEventHandler UpdateProjectUserCredentialsCompleted;
        
        /// <remarks/>
        public event GetProjectsWithUserCredentialsCompletedEventHandler GetProjectsWithUserCredentialsCompleted;
        
        /// <remarks/>
        public event GetProjectsCredentialUsersCompletedEventHandler GetProjectsCredentialUsersCompleted;
        
        /// <remarks/>
        public event GetProjectsDisplayDataCompletedEventHandler GetProjectsDisplayDataCompleted;
        
        /// <remarks/>
        public event RunProjectImmediatelyCompletedEventHandler RunProjectImmediatelyCompleted;
        
        /// <remarks/>
        public event RunProjectIncrementallyCompletedEventHandler RunProjectIncrementallyCompleted;
        
        /// <remarks/>
        public event DeleteProjectCompletedEventHandler DeleteProjectCompleted;
        
        /// <remarks/>
        public event GetProjectConfigurationCompletedEventHandler GetProjectConfigurationCompleted;
        
        /// <remarks/>
        public event GetProjectPropertiesCompletedEventHandler GetProjectPropertiesCompleted;
        
        /// <remarks/>
        public event UpdateProjectConfigurationCompletedEventHandler UpdateProjectConfigurationCompleted;
        
        /// <remarks/>
        public event UpdateProjectIncrementalConfigurationCompletedEventHandler UpdateProjectIncrementalConfigurationCompleted;
        
        /// <remarks/>
        public event GetProjectChartsCompletedEventHandler GetProjectChartsCompleted;
        
        /// <remarks/>
        public event SetFalsePositiveFlagCompletedEventHandler SetFalsePositiveFlagCompleted;
        
        /// <remarks/>
        public event UpdateResultCommentCompletedEventHandler UpdateResultCommentCompleted;
        
        /// <remarks/>
        public event UpdateResultStateCompletedEventHandler UpdateResultStateCompleted;
        
        /// <remarks/>
        public event UpdateSetOfResultStateCompletedEventHandler UpdateSetOfResultStateCompleted;
        
        /// <remarks/>
        public event UpdateSetOfResultStateInfluenceCheckCompletedEventHandler UpdateSetOfResultStateInfluenceCheckCompleted;
        
        /// <remarks/>
        public event BranchProjectCompletedEventHandler BranchProjectCompleted;
        
        /// <remarks/>
        public event GetProjectBranchingStatusCompletedEventHandler GetProjectBranchingStatusCompleted;
        
        /// <remarks/>
        public event DeleteProjectsCompletedEventHandler DeleteProjectsCompleted;
        
        /// <remarks/>
        public event RunScanWithExistingProjectCompletedEventHandler RunScanWithExistingProjectCompleted;
        
        /// <remarks/>
        public event GetScansDisplayDataCompletedEventHandler GetScansDisplayDataCompleted;
        
        /// <remarks/>
        public event DeleteScanCompletedEventHandler DeleteScanCompleted;
        
        /// <remarks/>
        public event GetScanPropertiesCompletedEventHandler GetScanPropertiesCompleted;
        
        /// <remarks/>
        public event UpdateScanCommentCompletedEventHandler UpdateScanCommentCompleted;
        
        /// <remarks/>
        public event GetScansDisplayDataForAllProjectsCompletedEventHandler GetScansDisplayDataForAllProjectsCompleted;
        
        /// <remarks/>
        public event GetScanSummaryCompletedEventHandler GetScanSummaryCompleted;
        
        /// <remarks/>
        public event GetScanCompareSummaryCompletedEventHandler GetScanCompareSummaryCompleted;
        
        /// <remarks/>
        public event GetCompareScanResultsCompletedEventHandler GetCompareScanResultsCompleted;
        
        /// <remarks/>
        public event GetScanLogsCompletedEventHandler GetScanLogsCompleted;
        
        /// <remarks/>
        public event DeleteScansCompletedEventHandler DeleteScansCompleted;
        
        /// <remarks/>
        public event LockScanCompletedEventHandler LockScanCompleted;
        
        /// <remarks/>
        public event UnlockScanCompletedEventHandler UnlockScanCompleted;
        
        /// <remarks/>
        public event GetQueryDescriptionByQueryIdCompletedEventHandler GetQueryDescriptionByQueryIdCompleted;
        
        /// <remarks/>
        public event GetQueryDescriptionCompletedEventHandler GetQueryDescriptionCompleted;
        
        /// <remarks/>
        public event GetResultDescriptionCompletedEventHandler GetResultDescriptionCompleted;
        
        /// <remarks/>
        public event GetCWEDescriptionCompletedEventHandler GetCWEDescriptionCompleted;
        
        /// <remarks/>
        public event GetSourceByScanIDCompletedEventHandler GetSourceByScanIDCompleted;
        
        /// <remarks/>
        public event GetSourcesByScanIDCompletedEventHandler GetSourcesByScanIDCompleted;
        
        /// <remarks/>
        public event GetResultStateListCompletedEventHandler GetResultStateListCompleted;
        
        /// <remarks/>
        public event IsSMTPHostConfiguredCompletedEventHandler IsSMTPHostConfiguredCompleted;
        
        /// <remarks/>
        public event IsPasswordComplexityEnabledCompletedEventHandler IsPasswordComplexityEnabledCompleted;
        
        /// <remarks/>
        public event IsPrivateCloudCompletedEventHandler IsPrivateCloudCompleted;
        
        /// <remarks/>
        public event IsAdminAllowedToChangeUserPasswordCompletedEventHandler IsAdminAllowedToChangeUserPasswordCompleted;
        
        /// <remarks/>
        public event ForgotPasswordCompletedEventHandler ForgotPasswordCompleted;
        
        /// <remarks/>
        public event ResetPasswordCompletedEventHandler ResetPasswordCompleted;
        
        /// <remarks/>
        public event CheckChangePasswordTokenCompletedEventHandler CheckChangePasswordTokenCompleted;
        
        /// <remarks/>
        public event ChangePasswordWithTokenCompletedEventHandler ChangePasswordWithTokenCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event ChangePasswordAdminToUserCompletedEventHandler ChangePasswordAdminToUserCompleted;
        
        /// <remarks/>
        public event GetCompaniesCompletedEventHandler GetCompaniesCompleted;
        
        /// <remarks/>
        public event RegisterPendingUserCompletedEventHandler RegisterPendingUserCompleted;
        
        /// <remarks/>
        public event GetPendingUsersListCompletedEventHandler GetPendingUsersListCompleted;
        
        /// <remarks/>
        public event DeletePendingUsersCompletedEventHandler DeletePendingUsersCompleted;
        
        /// <remarks/>
        public event ApprovePendingUsersCompletedEventHandler ApprovePendingUsersCompleted;
        
        /// <remarks/>
        public event GetUserProfileDataCompletedEventHandler GetUserProfileDataCompleted;
        
        /// <remarks/>
        public event UpdateUserProfileDataCompletedEventHandler UpdateUserProfileDataCompleted;
        
        /// <remarks/>
        public event GetUserByIdCompletedEventHandler GetUserByIdCompleted;
        
        /// <remarks/>
        public event GetAllUsersCompletedEventHandler GetAllUsersCompleted;
        
        /// <remarks/>
        public event GetAllUsersInGroupCompletedEventHandler GetAllUsersInGroupCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event GetHierarchyGroupTreeCompletedEventHandler GetHierarchyGroupTreeCompleted;
        
        /// <remarks/>
        public event GetChildNodesCompletedEventHandler GetChildNodesCompleted;
        
        /// <remarks/>
        public event GetAncestryGroupTreeCompletedEventHandler GetAncestryGroupTreeCompleted;
        
        /// <remarks/>
        public event SetUserActivationStateCompletedEventHandler SetUserActivationStateCompleted;
        
        /// <remarks/>
        public event AddNewUserCompletedEventHandler AddNewUserCompleted;
        
        /// <remarks/>
        public event UpdateUserDataCompletedEventHandler UpdateUserDataCompleted;
        
        /// <remarks/>
        public event GetServerLicenseDataCompletedEventHandler GetServerLicenseDataCompleted;
        
        /// <remarks/>
        public event GetUsersLicenseDataCompletedEventHandler GetUsersLicenseDataCompleted;
        
        /// <remarks/>
        public event GetCompaniesLicenseDataCompletedEventHandler GetCompaniesLicenseDataCompleted;
        
        /// <remarks/>
        public event GetSPLicenseDataCompletedEventHandler GetSPLicenseDataCompleted;
        
        /// <remarks/>
        public event UpdateUserGroupsCompletedEventHandler UpdateUserGroupsCompleted;
        
        /// <remarks/>
        public event GetCompaniesListCompletedEventHandler GetCompaniesListCompleted;
        
        /// <remarks/>
        public event IsValidUserNameCompletedEventHandler IsValidUserNameCompleted;
        
        /// <remarks/>
        public event IsValidEmailCompletedEventHandler IsValidEmailCompleted;
        
        /// <remarks/>
        public event GetAvailbleDomainNamesCompletedEventHandler GetAvailbleDomainNamesCompleted;
        
        /// <remarks/>
        public event GetAvailbleUserDirectoriesNamesCompletedEventHandler GetAvailbleUserDirectoriesNamesCompleted;
        
        /// <remarks/>
        public event GetAvailbleUserDirectoriesCompletedEventHandler GetAvailbleUserDirectoriesCompleted;
        
        /// <remarks/>
        public event GetAllUsersFromDomainCompletedEventHandler GetAllUsersFromDomainCompleted;
        
        /// <remarks/>
        public event GetAllUsersFromUserDirectoryCompletedEventHandler GetAllUsersFromUserDirectoryCompleted;
        
        /// <remarks/>
        public event CreateNewTeamCompletedEventHandler CreateNewTeamCompleted;
        
        /// <remarks/>
        public event RenameTeamCompletedEventHandler RenameTeamCompleted;
        
        /// <remarks/>
        public event UpdateTeamCompletedEventHandler UpdateTeamCompleted;
        
        /// <remarks/>
        public event GetAllTeamsCompletedEventHandler GetAllTeamsCompleted;
        
        /// <remarks/>
        public event GetAllUserDirecTeamsCompletedEventHandler GetAllUserDirecTeamsCompleted;
        
        /// <remarks/>
        public event DeleteTeamCompletedEventHandler DeleteTeamCompleted;
        
        /// <remarks/>
        public event CreateNewCompanyCompletedEventHandler CreateNewCompanyCompleted;
        
        /// <remarks/>
        public event CreateNewServiceProviderCompletedEventHandler CreateNewServiceProviderCompleted;
        
        /// <remarks/>
        public event RenameCompanyCompletedEventHandler RenameCompanyCompleted;
        
        /// <remarks/>
        public event GetAllCompaniesCompletedEventHandler GetAllCompaniesCompleted;
        
        /// <remarks/>
        public event GetAllSPsCompletedEventHandler GetAllSPsCompleted;
        
        /// <remarks/>
        public event DeleteCompanyCompletedEventHandler DeleteCompanyCompleted;
        
        /// <remarks/>
        public event DeleteSPCompletedEventHandler DeleteSPCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidCompanyName", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse IsValidCompanyName(string sessionID, string companyName, string serviceProviderID) {
            object[] results = this.Invoke("IsValidCompanyName", new object[] {
                        sessionID,
                        companyName,
                        serviceProviderID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidCompanyNameAsync(string sessionID, string companyName, string serviceProviderID) {
            this.IsValidCompanyNameAsync(sessionID, companyName, serviceProviderID, null);
        }
        
        /// <remarks/>
        public void IsValidCompanyNameAsync(string sessionID, string companyName, string serviceProviderID, object userState) {
            if ((this.IsValidCompanyNameOperationCompleted == null)) {
                this.IsValidCompanyNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidCompanyNameOperationCompleted);
            }
            this.InvokeAsync("IsValidCompanyName", new object[] {
                        sessionID,
                        companyName,
                        serviceProviderID}, this.IsValidCompanyNameOperationCompleted, userState);
        }
        
        private void OnIsValidCompanyNameOperationCompleted(object arg) {
            if ((this.IsValidCompanyNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidCompanyNameCompleted(this, new IsValidCompanyNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompanyTeams", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTeamData GetCompanyTeams(string sessionID, string companyID) {
            object[] results = this.Invoke("GetCompanyTeams", new object[] {
                        sessionID,
                        companyID});
            return ((CxWSResponseTeamData)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyTeamsAsync(string sessionID, string companyID) {
            this.GetCompanyTeamsAsync(sessionID, companyID, null);
        }
        
        /// <remarks/>
        public void GetCompanyTeamsAsync(string sessionID, string companyID, object userState) {
            if ((this.GetCompanyTeamsOperationCompleted == null)) {
                this.GetCompanyTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyTeamsOperationCompleted);
            }
            this.InvokeAsync("GetCompanyTeams", new object[] {
                        sessionID,
                        companyID}, this.GetCompanyTeamsOperationCompleted, userState);
        }
        
        private void OnGetCompanyTeamsOperationCompleted(object arg) {
            if ((this.GetCompanyTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyTeamsCompleted(this, new GetCompanyTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetServiceProviderTeams", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTeamData GetServiceProviderTeams(string sessionID, string spID) {
            object[] results = this.Invoke("GetServiceProviderTeams", new object[] {
                        sessionID,
                        spID});
            return ((CxWSResponseTeamData)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceProviderTeamsAsync(string sessionID, string spID) {
            this.GetServiceProviderTeamsAsync(sessionID, spID, null);
        }
        
        /// <remarks/>
        public void GetServiceProviderTeamsAsync(string sessionID, string spID, object userState) {
            if ((this.GetServiceProviderTeamsOperationCompleted == null)) {
                this.GetServiceProviderTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceProviderTeamsOperationCompleted);
            }
            this.InvokeAsync("GetServiceProviderTeams", new object[] {
                        sessionID,
                        spID}, this.GetServiceProviderTeamsOperationCompleted, userState);
        }
        
        private void OnGetServiceProviderTeamsOperationCompleted(object arg) {
            if ((this.GetServiceProviderTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceProviderTeamsCompleted(this, new GetServiceProviderTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetServiceProviderCompanies", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTeamData GetServiceProviderCompanies(string sessionID, string spID) {
            object[] results = this.Invoke("GetServiceProviderCompanies", new object[] {
                        sessionID,
                        spID});
            return ((CxWSResponseTeamData)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceProviderCompaniesAsync(string sessionID, string spID) {
            this.GetServiceProviderCompaniesAsync(sessionID, spID, null);
        }
        
        /// <remarks/>
        public void GetServiceProviderCompaniesAsync(string sessionID, string spID, object userState) {
            if ((this.GetServiceProviderCompaniesOperationCompleted == null)) {
                this.GetServiceProviderCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceProviderCompaniesOperationCompleted);
            }
            this.InvokeAsync("GetServiceProviderCompanies", new object[] {
                        sessionID,
                        spID}, this.GetServiceProviderCompaniesOperationCompleted, userState);
        }
        
        private void OnGetServiceProviderCompaniesOperationCompleted(object arg) {
            if ((this.GetServiceProviderCompaniesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceProviderCompaniesCompleted(this, new GetServiceProviderCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompanyProperties", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWsResponseCompanyProperties GetCompanyProperties(string sessionID, string companyID) {
            object[] results = this.Invoke("GetCompanyProperties", new object[] {
                        sessionID,
                        companyID});
            return ((CxWsResponseCompanyProperties)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompanyPropertiesAsync(string sessionID, string companyID) {
            this.GetCompanyPropertiesAsync(sessionID, companyID, null);
        }
        
        /// <remarks/>
        public void GetCompanyPropertiesAsync(string sessionID, string companyID, object userState) {
            if ((this.GetCompanyPropertiesOperationCompleted == null)) {
                this.GetCompanyPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompanyPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetCompanyProperties", new object[] {
                        sessionID,
                        companyID}, this.GetCompanyPropertiesOperationCompleted, userState);
        }
        
        private void OnGetCompanyPropertiesOperationCompleted(object arg) {
            if ((this.GetCompanyPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompanyPropertiesCompleted(this, new GetCompanyPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetUserAsCompanyManager", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SetUserAsCompanyManager(string sessionID, string companyID, long userID) {
            object[] results = this.Invoke("SetUserAsCompanyManager", new object[] {
                        sessionID,
                        companyID,
                        userID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserAsCompanyManagerAsync(string sessionID, string companyID, long userID) {
            this.SetUserAsCompanyManagerAsync(sessionID, companyID, userID, null);
        }
        
        /// <remarks/>
        public void SetUserAsCompanyManagerAsync(string sessionID, string companyID, long userID, object userState) {
            if ((this.SetUserAsCompanyManagerOperationCompleted == null)) {
                this.SetUserAsCompanyManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserAsCompanyManagerOperationCompleted);
            }
            this.InvokeAsync("SetUserAsCompanyManager", new object[] {
                        sessionID,
                        companyID,
                        userID}, this.SetUserAsCompanyManagerOperationCompleted, userState);
        }
        
        private void OnSetUserAsCompanyManagerOperationCompleted(object arg) {
            if ((this.SetUserAsCompanyManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserAsCompanyManagerCompleted(this, new SetUserAsCompanyManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetUserAsServiceProviderManager", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SetUserAsServiceProviderManager(string sessionID, string spID, long userID) {
            object[] results = this.Invoke("SetUserAsServiceProviderManager", new object[] {
                        sessionID,
                        spID,
                        userID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserAsServiceProviderManagerAsync(string sessionID, string spID, long userID) {
            this.SetUserAsServiceProviderManagerAsync(sessionID, spID, userID, null);
        }
        
        /// <remarks/>
        public void SetUserAsServiceProviderManagerAsync(string sessionID, string spID, long userID, object userState) {
            if ((this.SetUserAsServiceProviderManagerOperationCompleted == null)) {
                this.SetUserAsServiceProviderManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserAsServiceProviderManagerOperationCompleted);
            }
            this.InvokeAsync("SetUserAsServiceProviderManager", new object[] {
                        sessionID,
                        spID,
                        userID}, this.SetUserAsServiceProviderManagerOperationCompleted, userState);
        }
        
        private void OnSetUserAsServiceProviderManagerOperationCompleted(object arg) {
            if ((this.SetUserAsServiceProviderManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserAsServiceProviderManagerCompleted(this, new SetUserAsServiceProviderManagerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidServiceProviderName", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse IsValidServiceProviderName(string sessionID, string serviceProviderName) {
            object[] results = this.Invoke("IsValidServiceProviderName", new object[] {
                        sessionID,
                        serviceProviderName});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidServiceProviderNameAsync(string sessionID, string serviceProviderName) {
            this.IsValidServiceProviderNameAsync(sessionID, serviceProviderName, null);
        }
        
        /// <remarks/>
        public void IsValidServiceProviderNameAsync(string sessionID, string serviceProviderName, object userState) {
            if ((this.IsValidServiceProviderNameOperationCompleted == null)) {
                this.IsValidServiceProviderNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidServiceProviderNameOperationCompleted);
            }
            this.InvokeAsync("IsValidServiceProviderName", new object[] {
                        sessionID,
                        serviceProviderName}, this.IsValidServiceProviderNameOperationCompleted, userState);
        }
        
        private void OnIsValidServiceProviderNameOperationCompleted(object arg) {
            if ((this.IsValidServiceProviderNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidServiceProviderNameCompleted(this, new IsValidServiceProviderNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateCompanyProperties", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateCompanyProperties(string sessionID, string companyID, string companyName, int maxReviewers, int maxScanners, int maxManagers) {
            object[] results = this.Invoke("UpdateCompanyProperties", new object[] {
                        sessionID,
                        companyID,
                        companyName,
                        maxReviewers,
                        maxScanners,
                        maxManagers});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCompanyPropertiesAsync(string sessionID, string companyID, string companyName, int maxReviewers, int maxScanners, int maxManagers) {
            this.UpdateCompanyPropertiesAsync(sessionID, companyID, companyName, maxReviewers, maxScanners, maxManagers, null);
        }
        
        /// <remarks/>
        public void UpdateCompanyPropertiesAsync(string sessionID, string companyID, string companyName, int maxReviewers, int maxScanners, int maxManagers, object userState) {
            if ((this.UpdateCompanyPropertiesOperationCompleted == null)) {
                this.UpdateCompanyPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCompanyPropertiesOperationCompleted);
            }
            this.InvokeAsync("UpdateCompanyProperties", new object[] {
                        sessionID,
                        companyID,
                        companyName,
                        maxReviewers,
                        maxScanners,
                        maxManagers}, this.UpdateCompanyPropertiesOperationCompleted, userState);
        }
        
        private void OnUpdateCompanyPropertiesOperationCompleted(object arg) {
            if ((this.UpdateCompanyPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCompanyPropertiesCompleted(this, new UpdateCompanyPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetSystemSettings", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SetSystemSettings(string sessionID, SystemSettings settings) {
            object[] results = this.Invoke("SetSystemSettings", new object[] {
                        sessionID,
                        settings});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SetSystemSettingsAsync(string sessionID, SystemSettings settings) {
            this.SetSystemSettingsAsync(sessionID, settings, null);
        }
        
        /// <remarks/>
        public void SetSystemSettingsAsync(string sessionID, SystemSettings settings, object userState) {
            if ((this.SetSystemSettingsOperationCompleted == null)) {
                this.SetSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetSystemSettingsOperationCompleted);
            }
            this.InvokeAsync("SetSystemSettings", new object[] {
                        sessionID,
                        settings}, this.SetSystemSettingsOperationCompleted, userState);
        }
        
        private void OnSetSystemSettingsOperationCompleted(object arg) {
            if ((this.SetSystemSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetSystemSettingsCompleted(this, new SetSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetServerLanguageList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSystemLanguages GetServerLanguageList(string sessionID) {
            object[] results = this.Invoke("GetServerLanguageList", new object[] {
                        sessionID});
            return ((CxWSResponseSystemLanguages)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerLanguageListAsync(string sessionID) {
            this.GetServerLanguageListAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetServerLanguageListAsync(string sessionID, object userState) {
            if ((this.GetServerLanguageListOperationCompleted == null)) {
                this.GetServerLanguageListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerLanguageListOperationCompleted);
            }
            this.InvokeAsync("GetServerLanguageList", new object[] {
                        sessionID}, this.GetServerLanguageListOperationCompleted, userState);
        }
        
        private void OnGetServerLanguageListOperationCompleted(object arg) {
            if ((this.GetServerLanguageListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerLanguageListCompleted(this, new GetServerLanguageListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSystemSettings", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWsResponseSystemSettings GetSystemSettings(string sessionID) {
            object[] results = this.Invoke("GetSystemSettings", new object[] {
                        sessionID});
            return ((CxWsResponseSystemSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemSettingsAsync(string sessionID) {
            this.GetSystemSettingsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetSystemSettingsAsync(string sessionID, object userState) {
            if ((this.GetSystemSettingsOperationCompleted == null)) {
                this.GetSystemSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemSettingsOperationCompleted);
            }
            this.InvokeAsync("GetSystemSettings", new object[] {
                        sessionID}, this.GetSystemSettingsOperationCompleted, userState);
        }
        
        private void OnGetSystemSettingsOperationCompleted(object arg) {
            if ((this.GetSystemSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemSettingsCompleted(this, new GetSystemSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/VerifySupportedVersion", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse VerifySupportedVersion(CxClientType clientType, string clientVersion, string APIVersion) {
            object[] results = this.Invoke("VerifySupportedVersion", new object[] {
                        clientType,
                        clientVersion,
                        APIVersion});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void VerifySupportedVersionAsync(CxClientType clientType, string clientVersion, string APIVersion) {
            this.VerifySupportedVersionAsync(clientType, clientVersion, APIVersion, null);
        }
        
        /// <remarks/>
        public void VerifySupportedVersionAsync(CxClientType clientType, string clientVersion, string APIVersion, object userState) {
            if ((this.VerifySupportedVersionOperationCompleted == null)) {
                this.VerifySupportedVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifySupportedVersionOperationCompleted);
            }
            this.InvokeAsync("VerifySupportedVersion", new object[] {
                        clientType,
                        clientVersion,
                        APIVersion}, this.VerifySupportedVersionOperationCompleted, userState);
        }
        
        private void OnVerifySupportedVersionOperationCompleted(object arg) {
            if ((this.VerifySupportedVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifySupportedVersionCompleted(this, new VerifySupportedVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetInstallationSettings", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseInstallationSettings GetInstallationSettings(string sessionID) {
            object[] results = this.Invoke("GetInstallationSettings", new object[] {
                        sessionID});
            return ((CxWSResponseInstallationSettings)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstallationSettingsAsync(string sessionID) {
            this.GetInstallationSettingsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetInstallationSettingsAsync(string sessionID, object userState) {
            if ((this.GetInstallationSettingsOperationCompleted == null)) {
                this.GetInstallationSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstallationSettingsOperationCompleted);
            }
            this.InvokeAsync("GetInstallationSettings", new object[] {
                        sessionID}, this.GetInstallationSettingsOperationCompleted, userState);
        }
        
        private void OnGetInstallationSettingsOperationCompleted(object arg) {
            if ((this.GetInstallationSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstallationSettingsCompleted(this, new GetInstallationSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPresetList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePresetList GetPresetList(string SessionID) {
            object[] results = this.Invoke("GetPresetList", new object[] {
                        SessionID});
            return ((CxWSResponsePresetList)(results[0]));
        }
        
        /// <remarks/>
        public void GetPresetListAsync(string SessionID) {
            this.GetPresetListAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void GetPresetListAsync(string SessionID, object userState) {
            if ((this.GetPresetListOperationCompleted == null)) {
                this.GetPresetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPresetListOperationCompleted);
            }
            this.InvokeAsync("GetPresetList", new object[] {
                        SessionID}, this.GetPresetListOperationCompleted, userState);
        }
        
        private void OnGetPresetListOperationCompleted(object arg) {
            if ((this.GetPresetListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPresetListCompleted(this, new GetPresetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryCollection", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxQueryCollectionResponse GetQueryCollection(string sessionId) {
            object[] results = this.Invoke("GetQueryCollection", new object[] {
                        sessionId});
            return ((CxQueryCollectionResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryCollectionAsync(string sessionId) {
            this.GetQueryCollectionAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetQueryCollectionAsync(string sessionId, object userState) {
            if ((this.GetQueryCollectionOperationCompleted == null)) {
                this.GetQueryCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryCollectionOperationCompleted);
            }
            this.InvokeAsync("GetQueryCollection", new object[] {
                        sessionId}, this.GetQueryCollectionOperationCompleted, userState);
        }
        
        private void OnGetQueryCollectionOperationCompleted(object arg) {
            if ((this.GetQueryCollectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryCollectionCompleted(this, new GetQueryCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryCollectionWithInactive", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxQueryCollectionResponse GetQueryCollectionWithInactive(string sessionId) {
            object[] results = this.Invoke("GetQueryCollectionWithInactive", new object[] {
                        sessionId});
            return ((CxQueryCollectionResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryCollectionWithInactiveAsync(string sessionId) {
            this.GetQueryCollectionWithInactiveAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetQueryCollectionWithInactiveAsync(string sessionId, object userState) {
            if ((this.GetQueryCollectionWithInactiveOperationCompleted == null)) {
                this.GetQueryCollectionWithInactiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryCollectionWithInactiveOperationCompleted);
            }
            this.InvokeAsync("GetQueryCollectionWithInactive", new object[] {
                        sessionId}, this.GetQueryCollectionWithInactiveOperationCompleted, userState);
        }
        
        private void OnGetQueryCollectionWithInactiveOperationCompleted(object arg) {
            if ((this.GetQueryCollectionWithInactiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryCollectionWithInactiveCompleted(this, new GetQueryCollectionWithInactiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPresetDetails", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePresetDetails GetPresetDetails(string sessionId, long id) {
            object[] results = this.Invoke("GetPresetDetails", new object[] {
                        sessionId,
                        id});
            return ((CxWSResponsePresetDetails)(results[0]));
        }
        
        /// <remarks/>
        public void GetPresetDetailsAsync(string sessionId, long id) {
            this.GetPresetDetailsAsync(sessionId, id, null);
        }
        
        /// <remarks/>
        public void GetPresetDetailsAsync(string sessionId, long id, object userState) {
            if ((this.GetPresetDetailsOperationCompleted == null)) {
                this.GetPresetDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPresetDetailsOperationCompleted);
            }
            this.InvokeAsync("GetPresetDetails", new object[] {
                        sessionId,
                        id}, this.GetPresetDetailsOperationCompleted, userState);
        }
        
        private void OnGetPresetDetailsOperationCompleted(object arg) {
            if ((this.GetPresetDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPresetDetailsCompleted(this, new GetPresetDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewPreset", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePresetDetails CreateNewPreset(string sessionId, CxPresetDetails presrt) {
            object[] results = this.Invoke("CreateNewPreset", new object[] {
                        sessionId,
                        presrt});
            return ((CxWSResponsePresetDetails)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewPresetAsync(string sessionId, CxPresetDetails presrt) {
            this.CreateNewPresetAsync(sessionId, presrt, null);
        }
        
        /// <remarks/>
        public void CreateNewPresetAsync(string sessionId, CxPresetDetails presrt, object userState) {
            if ((this.CreateNewPresetOperationCompleted == null)) {
                this.CreateNewPresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewPresetOperationCompleted);
            }
            this.InvokeAsync("CreateNewPreset", new object[] {
                        sessionId,
                        presrt}, this.CreateNewPresetOperationCompleted, userState);
        }
        
        private void OnCreateNewPresetOperationCompleted(object arg) {
            if ((this.CreateNewPresetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewPresetCompleted(this, new CreateNewPresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdatePreset", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePresetDetails UpdatePreset(string sessionId, CxPresetDetails presrt) {
            object[] results = this.Invoke("UpdatePreset", new object[] {
                        sessionId,
                        presrt});
            return ((CxWSResponsePresetDetails)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePresetAsync(string sessionId, CxPresetDetails presrt) {
            this.UpdatePresetAsync(sessionId, presrt, null);
        }
        
        /// <remarks/>
        public void UpdatePresetAsync(string sessionId, CxPresetDetails presrt, object userState) {
            if ((this.UpdatePresetOperationCompleted == null)) {
                this.UpdatePresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePresetOperationCompleted);
            }
            this.InvokeAsync("UpdatePreset", new object[] {
                        sessionId,
                        presrt}, this.UpdatePresetOperationCompleted, userState);
        }
        
        private void OnUpdatePresetOperationCompleted(object arg) {
            if ((this.UpdatePresetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePresetCompleted(this, new UpdatePresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeletePreset", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeletePreset(string sessionId, long id) {
            object[] results = this.Invoke("DeletePreset", new object[] {
                        sessionId,
                        id});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePresetAsync(string sessionId, long id) {
            this.DeletePresetAsync(sessionId, id, null);
        }
        
        /// <remarks/>
        public void DeletePresetAsync(string sessionId, long id, object userState) {
            if ((this.DeletePresetOperationCompleted == null)) {
                this.DeletePresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePresetOperationCompleted);
            }
            this.InvokeAsync("DeletePreset", new object[] {
                        sessionId,
                        id}, this.DeletePresetOperationCompleted, userState);
        }
        
        private void OnDeletePresetOperationCompleted(object arg) {
            if ((this.DeletePresetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePresetCompleted(this, new DeletePresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidPresetName", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse IsValidPresetName(string sessionID, string presetName) {
            object[] results = this.Invoke("IsValidPresetName", new object[] {
                        sessionID,
                        presetName});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidPresetNameAsync(string sessionID, string presetName) {
            this.IsValidPresetNameAsync(sessionID, presetName, null);
        }
        
        /// <remarks/>
        public void IsValidPresetNameAsync(string sessionID, string presetName, object userState) {
            if ((this.IsValidPresetNameOperationCompleted == null)) {
                this.IsValidPresetNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidPresetNameOperationCompleted);
            }
            this.InvokeAsync("IsValidPresetName", new object[] {
                        sessionID,
                        presetName}, this.IsValidPresetNameOperationCompleted, userState);
        }
        
        private void OnIsValidPresetNameOperationCompleted(object arg) {
            if ((this.IsValidPresetNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidPresetNameCompleted(this, new IsValidPresetNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueriesCategories", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseQueriesCategories GetQueriesCategories(string sessionId) {
            object[] results = this.Invoke("GetQueriesCategories", new object[] {
                        sessionId});
            return ((CxWSResponseQueriesCategories)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueriesCategoriesAsync(string sessionId) {
            this.GetQueriesCategoriesAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetQueriesCategoriesAsync(string sessionId, object userState) {
            if ((this.GetQueriesCategoriesOperationCompleted == null)) {
                this.GetQueriesCategoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueriesCategoriesOperationCompleted);
            }
            this.InvokeAsync("GetQueriesCategories", new object[] {
                        sessionId}, this.GetQueriesCategoriesOperationCompleted, userState);
        }
        
        private void OnGetQueriesCategoriesOperationCompleted(object arg) {
            if ((this.GetQueriesCategoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueriesCategoriesCompleted(this, new GetQueriesCategoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetDetailsForQueryVersionCode", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSQueryVersionDetailsResponse GetDetailsForQueryVersionCode(string sessionId, long queryVersionCode) {
            object[] results = this.Invoke("GetDetailsForQueryVersionCode", new object[] {
                        sessionId,
                        queryVersionCode});
            return ((CxWSQueryVersionDetailsResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetDetailsForQueryVersionCodeAsync(string sessionId, long queryVersionCode) {
            this.GetDetailsForQueryVersionCodeAsync(sessionId, queryVersionCode, null);
        }
        
        /// <remarks/>
        public void GetDetailsForQueryVersionCodeAsync(string sessionId, long queryVersionCode, object userState) {
            if ((this.GetDetailsForQueryVersionCodeOperationCompleted == null)) {
                this.GetDetailsForQueryVersionCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDetailsForQueryVersionCodeOperationCompleted);
            }
            this.InvokeAsync("GetDetailsForQueryVersionCode", new object[] {
                        sessionId,
                        queryVersionCode}, this.GetDetailsForQueryVersionCodeOperationCompleted, userState);
        }
        
        private void OnGetDetailsForQueryVersionCodeOperationCompleted(object arg) {
            if ((this.GetDetailsForQueryVersionCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDetailsForQueryVersionCodeCompleted(this, new GetDetailsForQueryVersionCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueriesForScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceQuerisForScan GetQueriesForScan(string sessionID, long scanId) {
            object[] results = this.Invoke("GetQueriesForScan", new object[] {
                        sessionID,
                        scanId});
            return ((CxWSResponceQuerisForScan)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueriesForScanAsync(string sessionID, long scanId) {
            this.GetQueriesForScanAsync(sessionID, scanId, null);
        }
        
        /// <remarks/>
        public void GetQueriesForScanAsync(string sessionID, long scanId, object userState) {
            if ((this.GetQueriesForScanOperationCompleted == null)) {
                this.GetQueriesForScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueriesForScanOperationCompleted);
            }
            this.InvokeAsync("GetQueriesForScan", new object[] {
                        sessionID,
                        scanId}, this.GetQueriesForScanOperationCompleted, userState);
        }
        
        private void OnGetQueriesForScanOperationCompleted(object arg) {
            if ((this.GetQueriesForScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueriesForScanCompleted(this, new GetQueriesForScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsForQuery", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceScanResults GetResultsForQuery(string sessionID, long scanId, long queryId) {
            object[] results = this.Invoke("GetResultsForQuery", new object[] {
                        sessionID,
                        scanId,
                        queryId});
            return ((CxWSResponceScanResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsForQueryAsync(string sessionID, long scanId, long queryId) {
            this.GetResultsForQueryAsync(sessionID, scanId, queryId, null);
        }
        
        /// <remarks/>
        public void GetResultsForQueryAsync(string sessionID, long scanId, long queryId, object userState) {
            if ((this.GetResultsForQueryOperationCompleted == null)) {
                this.GetResultsForQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsForQueryOperationCompleted);
            }
            this.InvokeAsync("GetResultsForQuery", new object[] {
                        sessionID,
                        scanId,
                        queryId}, this.GetResultsForQueryOperationCompleted, userState);
        }
        
        private void OnGetResultsForQueryOperationCompleted(object arg) {
            if ((this.GetResultsForQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsForQueryCompleted(this, new GetResultsForQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsForQueryQroup", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceScanResults GetResultsForQueryQroup(string sessionID, long scanId, long queryGroupId) {
            object[] results = this.Invoke("GetResultsForQueryQroup", new object[] {
                        sessionID,
                        scanId,
                        queryGroupId});
            return ((CxWSResponceScanResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsForQueryQroupAsync(string sessionID, long scanId, long queryGroupId) {
            this.GetResultsForQueryQroupAsync(sessionID, scanId, queryGroupId, null);
        }
        
        /// <remarks/>
        public void GetResultsForQueryQroupAsync(string sessionID, long scanId, long queryGroupId, object userState) {
            if ((this.GetResultsForQueryQroupOperationCompleted == null)) {
                this.GetResultsForQueryQroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsForQueryQroupOperationCompleted);
            }
            this.InvokeAsync("GetResultsForQueryQroup", new object[] {
                        sessionID,
                        scanId,
                        queryGroupId}, this.GetResultsForQueryQroupOperationCompleted, userState);
        }
        
        private void OnGetResultsForQueryQroupOperationCompleted(object arg) {
            if ((this.GetResultsForQueryQroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsForQueryQroupCompleted(this, new GetResultsForQueryQroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsForScanByLanguage", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceScanResults GetResultsForScanByLanguage(string sessionID, long scanId, string Language) {
            object[] results = this.Invoke("GetResultsForScanByLanguage", new object[] {
                        sessionID,
                        scanId,
                        Language});
            return ((CxWSResponceScanResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsForScanByLanguageAsync(string sessionID, long scanId, string Language) {
            this.GetResultsForScanByLanguageAsync(sessionID, scanId, Language, null);
        }
        
        /// <remarks/>
        public void GetResultsForScanByLanguageAsync(string sessionID, long scanId, string Language, object userState) {
            if ((this.GetResultsForScanByLanguageOperationCompleted == null)) {
                this.GetResultsForScanByLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsForScanByLanguageOperationCompleted);
            }
            this.InvokeAsync("GetResultsForScanByLanguage", new object[] {
                        sessionID,
                        scanId,
                        Language}, this.GetResultsForScanByLanguageOperationCompleted, userState);
        }
        
        private void OnGetResultsForScanByLanguageOperationCompleted(object arg) {
            if ((this.GetResultsForScanByLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsForScanByLanguageCompleted(this, new GetResultsForScanByLanguageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsForScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceScanResults GetResultsForScan(string sessionID, long scanId) {
            object[] results = this.Invoke("GetResultsForScan", new object[] {
                        sessionID,
                        scanId});
            return ((CxWSResponceScanResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsForScanAsync(string sessionID, long scanId) {
            this.GetResultsForScanAsync(sessionID, scanId, null);
        }
        
        /// <remarks/>
        public void GetResultsForScanAsync(string sessionID, long scanId, object userState) {
            if ((this.GetResultsForScanOperationCompleted == null)) {
                this.GetResultsForScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsForScanOperationCompleted);
            }
            this.InvokeAsync("GetResultsForScan", new object[] {
                        sessionID,
                        scanId}, this.GetResultsForScanOperationCompleted, userState);
        }
        
        private void OnGetResultsForScanOperationCompleted(object arg) {
            if ((this.GetResultsForScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsForScanCompleted(this, new GetResultsForScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultPath", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceResultPath GetResultPath(string sessionId, long scanId, long pathId) {
            object[] results = this.Invoke("GetResultPath", new object[] {
                        sessionId,
                        scanId,
                        pathId});
            return ((CxWSResponceResultPath)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultPathAsync(string sessionId, long scanId, long pathId) {
            this.GetResultPathAsync(sessionId, scanId, pathId, null);
        }
        
        /// <remarks/>
        public void GetResultPathAsync(string sessionId, long scanId, long pathId, object userState) {
            if ((this.GetResultPathOperationCompleted == null)) {
                this.GetResultPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultPathOperationCompleted);
            }
            this.InvokeAsync("GetResultPath", new object[] {
                        sessionId,
                        scanId,
                        pathId}, this.GetResultPathOperationCompleted, userState);
        }
        
        private void OnGetResultPathOperationCompleted(object arg) {
            if ((this.GetResultPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultPathCompleted(this, new GetResultPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPathCommentsHistory", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceResultPath GetPathCommentsHistory(string sessionId, long scanId, long pathId, ResultLabelTypeEnum labelType) {
            object[] results = this.Invoke("GetPathCommentsHistory", new object[] {
                        sessionId,
                        scanId,
                        pathId,
                        labelType});
            return ((CxWSResponceResultPath)(results[0]));
        }
        
        /// <remarks/>
        public void GetPathCommentsHistoryAsync(string sessionId, long scanId, long pathId, ResultLabelTypeEnum labelType) {
            this.GetPathCommentsHistoryAsync(sessionId, scanId, pathId, labelType, null);
        }
        
        /// <remarks/>
        public void GetPathCommentsHistoryAsync(string sessionId, long scanId, long pathId, ResultLabelTypeEnum labelType, object userState) {
            if ((this.GetPathCommentsHistoryOperationCompleted == null)) {
                this.GetPathCommentsHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPathCommentsHistoryOperationCompleted);
            }
            this.InvokeAsync("GetPathCommentsHistory", new object[] {
                        sessionId,
                        scanId,
                        pathId,
                        labelType}, this.GetPathCommentsHistoryOperationCompleted, userState);
        }
        
        private void OnGetPathCommentsHistoryOperationCompleted(object arg) {
            if ((this.GetPathCommentsHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPathCommentsHistoryCompleted(this, new GetPathCommentsHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetFileNamesForPath", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceFileNames GetFileNamesForPath(string sessionId, long scanId, long pathId) {
            object[] results = this.Invoke("GetFileNamesForPath", new object[] {
                        sessionId,
                        scanId,
                        pathId});
            return ((CxWSResponceFileNames)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileNamesForPathAsync(string sessionId, long scanId, long pathId) {
            this.GetFileNamesForPathAsync(sessionId, scanId, pathId, null);
        }
        
        /// <remarks/>
        public void GetFileNamesForPathAsync(string sessionId, long scanId, long pathId, object userState) {
            if ((this.GetFileNamesForPathOperationCompleted == null)) {
                this.GetFileNamesForPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileNamesForPathOperationCompleted);
            }
            this.InvokeAsync("GetFileNamesForPath", new object[] {
                        sessionId,
                        scanId,
                        pathId}, this.GetFileNamesForPathOperationCompleted, userState);
        }
        
        private void OnGetFileNamesForPathOperationCompleted(object arg) {
            if ((this.GetFileNamesForPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileNamesForPathCompleted(this, new GetFileNamesForPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultPathsForQuery", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseResultPaths GetResultPathsForQuery(string sessionId, long scanId, long queryId) {
            object[] results = this.Invoke("GetResultPathsForQuery", new object[] {
                        sessionId,
                        scanId,
                        queryId});
            return ((CxWSResponseResultPaths)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultPathsForQueryAsync(string sessionId, long scanId, long queryId) {
            this.GetResultPathsForQueryAsync(sessionId, scanId, queryId, null);
        }
        
        /// <remarks/>
        public void GetResultPathsForQueryAsync(string sessionId, long scanId, long queryId, object userState) {
            if ((this.GetResultPathsForQueryOperationCompleted == null)) {
                this.GetResultPathsForQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultPathsForQueryOperationCompleted);
            }
            this.InvokeAsync("GetResultPathsForQuery", new object[] {
                        sessionId,
                        scanId,
                        queryId}, this.GetResultPathsForQueryOperationCompleted, userState);
        }
        
        private void OnGetResultPathsForQueryOperationCompleted(object arg) {
            if ((this.GetResultPathsForQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultPathsForQueryCompleted(this, new GetResultPathsForQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultGraphForQuery", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseResultGraph GetResultGraphForQuery(string sessionId, long scanId, long queryId, int maxNodes, CxWSGraphTypeEnum graphType, bool includeNotExploitable) {
            object[] results = this.Invoke("GetResultGraphForQuery", new object[] {
                        sessionId,
                        scanId,
                        queryId,
                        maxNodes,
                        graphType,
                        includeNotExploitable});
            return ((CxWSResponseResultGraph)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultGraphForQueryAsync(string sessionId, long scanId, long queryId, int maxNodes, CxWSGraphTypeEnum graphType, bool includeNotExploitable) {
            this.GetResultGraphForQueryAsync(sessionId, scanId, queryId, maxNodes, graphType, includeNotExploitable, null);
        }
        
        /// <remarks/>
        public void GetResultGraphForQueryAsync(string sessionId, long scanId, long queryId, int maxNodes, CxWSGraphTypeEnum graphType, bool includeNotExploitable, object userState) {
            if ((this.GetResultGraphForQueryOperationCompleted == null)) {
                this.GetResultGraphForQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultGraphForQueryOperationCompleted);
            }
            this.InvokeAsync("GetResultGraphForQuery", new object[] {
                        sessionId,
                        scanId,
                        queryId,
                        maxNodes,
                        graphType,
                        includeNotExploitable}, this.GetResultGraphForQueryOperationCompleted, userState);
        }
        
        private void OnGetResultGraphForQueryOperationCompleted(object arg) {
            if ((this.GetResultGraphForQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultGraphForQueryCompleted(this, new GetResultGraphForQueryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultsBySeverity", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceScanResults GetResultsBySeverity(string sessionId, long scanId, int Severity, string Language) {
            object[] results = this.Invoke("GetResultsBySeverity", new object[] {
                        sessionId,
                        scanId,
                        Severity,
                        Language});
            return ((CxWSResponceScanResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsBySeverityAsync(string sessionId, long scanId, int Severity, string Language) {
            this.GetResultsBySeverityAsync(sessionId, scanId, Severity, Language, null);
        }
        
        /// <remarks/>
        public void GetResultsBySeverityAsync(string sessionId, long scanId, int Severity, string Language, object userState) {
            if ((this.GetResultsBySeverityOperationCompleted == null)) {
                this.GetResultsBySeverityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsBySeverityOperationCompleted);
            }
            this.InvokeAsync("GetResultsBySeverity", new object[] {
                        sessionId,
                        scanId,
                        Severity,
                        Language}, this.GetResultsBySeverityOperationCompleted, userState);
        }
        
        private void OnGetResultsBySeverityOperationCompleted(object arg) {
            if ((this.GetResultsBySeverityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsBySeverityCompleted(this, new GetResultsBySeverityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCustomFields", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseCustomFields GetCustomFields(string sessionID) {
            object[] results = this.Invoke("GetCustomFields", new object[] {
                        sessionID});
            return ((CxWSResponseCustomFields)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomFieldsAsync(string sessionID) {
            this.GetCustomFieldsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetCustomFieldsAsync(string sessionID, object userState) {
            if ((this.GetCustomFieldsOperationCompleted == null)) {
                this.GetCustomFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomFieldsOperationCompleted);
            }
            this.InvokeAsync("GetCustomFields", new object[] {
                        sessionID}, this.GetCustomFieldsOperationCompleted, userState);
        }
        
        private void OnGetCustomFieldsOperationCompleted(object arg) {
            if ((this.GetCustomFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomFieldsCompleted(this, new GetCustomFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SaveCustomFields", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SaveCustomFields(string sessionID, CxWSCustomField[] customFields) {
            object[] results = this.Invoke("SaveCustomFields", new object[] {
                        sessionID,
                        customFields});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SaveCustomFieldsAsync(string sessionID, CxWSCustomField[] customFields) {
            this.SaveCustomFieldsAsync(sessionID, customFields, null);
        }
        
        /// <remarks/>
        public void SaveCustomFieldsAsync(string sessionID, CxWSCustomField[] customFields, object userState) {
            if ((this.SaveCustomFieldsOperationCompleted == null)) {
                this.SaveCustomFieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveCustomFieldsOperationCompleted);
            }
            this.InvokeAsync("SaveCustomFields", new object[] {
                        sessionID,
                        customFields}, this.SaveCustomFieldsOperationCompleted, userState);
        }
        
        private void OnSaveCustomFieldsOperationCompleted(object arg) {
            if ((this.SaveCustomFieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveCustomFieldsCompleted(this, new SaveCustomFieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteCustomField", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeleteCustomField(string sessionID, long customFieldId) {
            object[] results = this.Invoke("DeleteCustomField", new object[] {
                        sessionID,
                        customFieldId});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCustomFieldAsync(string sessionID, long customFieldId) {
            this.DeleteCustomFieldAsync(sessionID, customFieldId, null);
        }
        
        /// <remarks/>
        public void DeleteCustomFieldAsync(string sessionID, long customFieldId, object userState) {
            if ((this.DeleteCustomFieldOperationCompleted == null)) {
                this.DeleteCustomFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCustomFieldOperationCompleted);
            }
            this.InvokeAsync("DeleteCustomField", new object[] {
                        sessionID,
                        customFieldId}, this.DeleteCustomFieldOperationCompleted, userState);
        }
        
        private void OnDeleteCustomFieldOperationCompleted(object arg) {
            if ((this.DeleteCustomFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCustomFieldCompleted(this, new DeleteCustomFieldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCustomFieldValues", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseCustomFieldValues GetCustomFieldValues(string sessionID, long customFieldId) {
            object[] results = this.Invoke("GetCustomFieldValues", new object[] {
                        sessionID,
                        customFieldId});
            return ((CxWSResponseCustomFieldValues)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomFieldValuesAsync(string sessionID, long customFieldId) {
            this.GetCustomFieldValuesAsync(sessionID, customFieldId, null);
        }
        
        /// <remarks/>
        public void GetCustomFieldValuesAsync(string sessionID, long customFieldId, object userState) {
            if ((this.GetCustomFieldValuesOperationCompleted == null)) {
                this.GetCustomFieldValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomFieldValuesOperationCompleted);
            }
            this.InvokeAsync("GetCustomFieldValues", new object[] {
                        sessionID,
                        customFieldId}, this.GetCustomFieldValuesOperationCompleted, userState);
        }
        
        private void OnGetCustomFieldValuesOperationCompleted(object arg) {
            if ((this.GetCustomFieldValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomFieldValuesCompleted(this, new GetCustomFieldValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SavePredefinedCommands", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SavePredefinedCommands(string sessionID, CxPredefinedCommand[] predefinedCommands) {
            object[] results = this.Invoke("SavePredefinedCommands", new object[] {
                        sessionID,
                        predefinedCommands});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SavePredefinedCommandsAsync(string sessionID, CxPredefinedCommand[] predefinedCommands) {
            this.SavePredefinedCommandsAsync(sessionID, predefinedCommands, null);
        }
        
        /// <remarks/>
        public void SavePredefinedCommandsAsync(string sessionID, CxPredefinedCommand[] predefinedCommands, object userState) {
            if ((this.SavePredefinedCommandsOperationCompleted == null)) {
                this.SavePredefinedCommandsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePredefinedCommandsOperationCompleted);
            }
            this.InvokeAsync("SavePredefinedCommands", new object[] {
                        sessionID,
                        predefinedCommands}, this.SavePredefinedCommandsOperationCompleted, userState);
        }
        
        private void OnSavePredefinedCommandsOperationCompleted(object arg) {
            if ((this.SavePredefinedCommandsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePredefinedCommandsCompleted(this, new SavePredefinedCommandsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPredefinedCommands", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePredefinedCommands GetPredefinedCommands(string sessionId) {
            object[] results = this.Invoke("GetPredefinedCommands", new object[] {
                        sessionId});
            return ((CxWSResponsePredefinedCommands)(results[0]));
        }
        
        /// <remarks/>
        public void GetPredefinedCommandsAsync(string sessionId) {
            this.GetPredefinedCommandsAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetPredefinedCommandsAsync(string sessionId, object userState) {
            if ((this.GetPredefinedCommandsOperationCompleted == null)) {
                this.GetPredefinedCommandsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPredefinedCommandsOperationCompleted);
            }
            this.InvokeAsync("GetPredefinedCommands", new object[] {
                        sessionId}, this.GetPredefinedCommandsOperationCompleted, userState);
        }
        
        private void OnGetPredefinedCommandsOperationCompleted(object arg) {
            if ((this.GetPredefinedCommandsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPredefinedCommandsCompleted(this, new GetPredefinedCommandsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetExecutableList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseNameList GetExecutableList(string sessionId) {
            object[] results = this.Invoke("GetExecutableList", new object[] {
                        sessionId});
            return ((CxWSResponseNameList)(results[0]));
        }
        
        /// <remarks/>
        public void GetExecutableListAsync(string sessionId) {
            this.GetExecutableListAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetExecutableListAsync(string sessionId, object userState) {
            if ((this.GetExecutableListOperationCompleted == null)) {
                this.GetExecutableListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExecutableListOperationCompleted);
            }
            this.InvokeAsync("GetExecutableList", new object[] {
                        sessionId}, this.GetExecutableListOperationCompleted, userState);
        }
        
        private void OnGetExecutableListOperationCompleted(object arg) {
            if ((this.GetExecutableListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExecutableListCompleted(this, new GetExecutableListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdatePermission", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdatePermission(string sessionID, CxPermission permission, string teamId) {
            object[] results = this.Invoke("UpdatePermission", new object[] {
                        sessionID,
                        permission,
                        teamId});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePermissionAsync(string sessionID, CxPermission permission, string teamId) {
            this.UpdatePermissionAsync(sessionID, permission, teamId, null);
        }
        
        /// <remarks/>
        public void UpdatePermissionAsync(string sessionID, CxPermission permission, string teamId, object userState) {
            if ((this.UpdatePermissionOperationCompleted == null)) {
                this.UpdatePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePermissionOperationCompleted);
            }
            this.InvokeAsync("UpdatePermission", new object[] {
                        sessionID,
                        permission,
                        teamId}, this.UpdatePermissionOperationCompleted, userState);
        }
        
        private void OnUpdatePermissionOperationCompleted(object arg) {
            if ((this.UpdatePermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePermissionCompleted(this, new UpdatePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectAssignUsers", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseUserData GetProjectAssignUsers(string sessionID, long projectId) {
            object[] results = this.Invoke("GetProjectAssignUsers", new object[] {
                        sessionID,
                        projectId});
            return ((CxWSResponseUserData)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectAssignUsersAsync(string sessionID, long projectId) {
            this.GetProjectAssignUsersAsync(sessionID, projectId, null);
        }
        
        /// <remarks/>
        public void GetProjectAssignUsersAsync(string sessionID, long projectId, object userState) {
            if ((this.GetProjectAssignUsersOperationCompleted == null)) {
                this.GetProjectAssignUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectAssignUsersOperationCompleted);
            }
            this.InvokeAsync("GetProjectAssignUsers", new object[] {
                        sessionID,
                        projectId}, this.GetProjectAssignUsersOperationCompleted, userState);
        }
        
        private void OnGetProjectAssignUsersOperationCompleted(object arg) {
            if ((this.GetProjectAssignUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectAssignUsersCompleted(this, new GetProjectAssignUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectAssignUsersList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseAssignUsers GetProjectAssignUsersList(string sessionID, long projectId) {
            object[] results = this.Invoke("GetProjectAssignUsersList", new object[] {
                        sessionID,
                        projectId});
            return ((CxWSResponseAssignUsers)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectAssignUsersListAsync(string sessionID, long projectId) {
            this.GetProjectAssignUsersListAsync(sessionID, projectId, null);
        }
        
        /// <remarks/>
        public void GetProjectAssignUsersListAsync(string sessionID, long projectId, object userState) {
            if ((this.GetProjectAssignUsersListOperationCompleted == null)) {
                this.GetProjectAssignUsersListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectAssignUsersListOperationCompleted);
            }
            this.InvokeAsync("GetProjectAssignUsersList", new object[] {
                        sessionID,
                        projectId}, this.GetProjectAssignUsersListOperationCompleted, userState);
        }
        
        private void OnGetProjectAssignUsersListOperationCompleted(object arg) {
            if ((this.GetProjectAssignUsersListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectAssignUsersListCompleted(this, new GetProjectAssignUsersListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsAllowAutoSignIn", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseBool IsAllowAutoSignIn() {
            object[] results = this.Invoke("IsAllowAutoSignIn", new object[0]);
            return ((CxWSResponseBool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAllowAutoSignInAsync() {
            this.IsAllowAutoSignInAsync(null);
        }
        
        /// <remarks/>
        public void IsAllowAutoSignInAsync(object userState) {
            if ((this.IsAllowAutoSignInOperationCompleted == null)) {
                this.IsAllowAutoSignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAllowAutoSignInOperationCompleted);
            }
            this.InvokeAsync("IsAllowAutoSignIn", new object[0], this.IsAllowAutoSignInOperationCompleted, userState);
        }
        
        private void OnIsAllowAutoSignInOperationCompleted(object arg) {
            if ((this.IsAllowAutoSignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAllowAutoSignInCompleted(this, new IsAllowAutoSignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SaveSubsetResults", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SaveSubsetResults(string sessionId, long projectId, long ScanId, long[] pathIds, string comments) {
            object[] results = this.Invoke("SaveSubsetResults", new object[] {
                        sessionId,
                        projectId,
                        ScanId,
                        pathIds,
                        comments});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SaveSubsetResultsAsync(string sessionId, long projectId, long ScanId, long[] pathIds, string comments) {
            this.SaveSubsetResultsAsync(sessionId, projectId, ScanId, pathIds, comments, null);
        }
        
        /// <remarks/>
        public void SaveSubsetResultsAsync(string sessionId, long projectId, long ScanId, long[] pathIds, string comments, object userState) {
            if ((this.SaveSubsetResultsOperationCompleted == null)) {
                this.SaveSubsetResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveSubsetResultsOperationCompleted);
            }
            this.InvokeAsync("SaveSubsetResults", new object[] {
                        sessionId,
                        projectId,
                        ScanId,
                        pathIds,
                        comments}, this.SaveSubsetResultsOperationCompleted, userState);
        }
        
        private void OnSaveSubsetResultsOperationCompleted(object arg) {
            if ((this.SaveSubsetResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveSubsetResultsCompleted(this, new SaveSubsetResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPivotData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePivotTable GetPivotData(string SessionID, CxPivotDataRequest PivotParams) {
            object[] results = this.Invoke("GetPivotData", new object[] {
                        SessionID,
                        PivotParams});
            return ((CxWSResponsePivotTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetPivotDataAsync(string SessionID, CxPivotDataRequest PivotParams) {
            this.GetPivotDataAsync(SessionID, PivotParams, null);
        }
        
        /// <remarks/>
        public void GetPivotDataAsync(string SessionID, CxPivotDataRequest PivotParams, object userState) {
            if ((this.GetPivotDataOperationCompleted == null)) {
                this.GetPivotDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPivotDataOperationCompleted);
            }
            this.InvokeAsync("GetPivotData", new object[] {
                        SessionID,
                        PivotParams}, this.GetPivotDataOperationCompleted, userState);
        }
        
        private void OnGetPivotDataOperationCompleted(object arg) {
            if ((this.GetPivotDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPivotDataCompleted(this, new GetPivotDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPivotLayouts", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePivotLayouts GetPivotLayouts(string SessionID) {
            object[] results = this.Invoke("GetPivotLayouts", new object[] {
                        SessionID});
            return ((CxWSResponsePivotLayouts)(results[0]));
        }
        
        /// <remarks/>
        public void GetPivotLayoutsAsync(string SessionID) {
            this.GetPivotLayoutsAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void GetPivotLayoutsAsync(string SessionID, object userState) {
            if ((this.GetPivotLayoutsOperationCompleted == null)) {
                this.GetPivotLayoutsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPivotLayoutsOperationCompleted);
            }
            this.InvokeAsync("GetPivotLayouts", new object[] {
                        SessionID}, this.GetPivotLayoutsOperationCompleted, userState);
        }
        
        private void OnGetPivotLayoutsOperationCompleted(object arg) {
            if ((this.GetPivotLayoutsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPivotLayoutsCompleted(this, new GetPivotLayoutsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SavePivotLayout", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SavePivotLayout(string SessionID, CxPivotLayout layout) {
            object[] results = this.Invoke("SavePivotLayout", new object[] {
                        SessionID,
                        layout});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SavePivotLayoutAsync(string SessionID, CxPivotLayout layout) {
            this.SavePivotLayoutAsync(SessionID, layout, null);
        }
        
        /// <remarks/>
        public void SavePivotLayoutAsync(string SessionID, CxPivotLayout layout, object userState) {
            if ((this.SavePivotLayoutOperationCompleted == null)) {
                this.SavePivotLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSavePivotLayoutOperationCompleted);
            }
            this.InvokeAsync("SavePivotLayout", new object[] {
                        SessionID,
                        layout}, this.SavePivotLayoutOperationCompleted, userState);
        }
        
        private void OnSavePivotLayoutOperationCompleted(object arg) {
            if ((this.SavePivotLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SavePivotLayoutCompleted(this, new SavePivotLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeletePivotLayout", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeletePivotLayout(string SessionID, long LayoutID) {
            object[] results = this.Invoke("DeletePivotLayout", new object[] {
                        SessionID,
                        LayoutID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePivotLayoutAsync(string SessionID, long LayoutID) {
            this.DeletePivotLayoutAsync(SessionID, LayoutID, null);
        }
        
        /// <remarks/>
        public void DeletePivotLayoutAsync(string SessionID, long LayoutID, object userState) {
            if ((this.DeletePivotLayoutOperationCompleted == null)) {
                this.DeletePivotLayoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePivotLayoutOperationCompleted);
            }
            this.InvokeAsync("DeletePivotLayout", new object[] {
                        SessionID,
                        LayoutID}, this.DeletePivotLayoutOperationCompleted, userState);
        }
        
        private void OnDeletePivotLayoutOperationCompleted(object arg) {
            if ((this.DeletePivotLayoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePivotLayoutCompleted(this, new DeletePivotLayoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryShortDescription", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseShortQueryDescription GetQueryShortDescription(string sessionId, long queryId) {
            object[] results = this.Invoke("GetQueryShortDescription", new object[] {
                        sessionId,
                        queryId});
            return ((CxWSResponseShortQueryDescription)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryShortDescriptionAsync(string sessionId, long queryId) {
            this.GetQueryShortDescriptionAsync(sessionId, queryId, null);
        }
        
        /// <remarks/>
        public void GetQueryShortDescriptionAsync(string sessionId, long queryId, object userState) {
            if ((this.GetQueryShortDescriptionOperationCompleted == null)) {
                this.GetQueryShortDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryShortDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetQueryShortDescription", new object[] {
                        sessionId,
                        queryId}, this.GetQueryShortDescriptionOperationCompleted, userState);
        }
        
        private void OnGetQueryShortDescriptionOperationCompleted(object arg) {
            if ((this.GetQueryShortDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryShortDescriptionCompleted(this, new GetQueryShortDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RegisterSaasPendingUser", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse RegisterSaasPendingUser(SaasPendingUser pendingUser, string activationPageUrl) {
            object[] results = this.Invoke("RegisterSaasPendingUser", new object[] {
                        pendingUser,
                        activationPageUrl});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterSaasPendingUserAsync(SaasPendingUser pendingUser, string activationPageUrl) {
            this.RegisterSaasPendingUserAsync(pendingUser, activationPageUrl, null);
        }
        
        /// <remarks/>
        public void RegisterSaasPendingUserAsync(SaasPendingUser pendingUser, string activationPageUrl, object userState) {
            if ((this.RegisterSaasPendingUserOperationCompleted == null)) {
                this.RegisterSaasPendingUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterSaasPendingUserOperationCompleted);
            }
            this.InvokeAsync("RegisterSaasPendingUser", new object[] {
                        pendingUser,
                        activationPageUrl}, this.RegisterSaasPendingUserOperationCompleted, userState);
        }
        
        private void OnRegisterSaasPendingUserOperationCompleted(object arg) {
            if ((this.RegisterSaasPendingUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterSaasPendingUserCompleted(this, new RegisterSaasPendingUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ActivateSaasUser", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSaasLoginData ActivateSaasUser(string userToken) {
            object[] results = this.Invoke("ActivateSaasUser", new object[] {
                        userToken});
            return ((CxWSResponseSaasLoginData)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateSaasUserAsync(string userToken) {
            this.ActivateSaasUserAsync(userToken, null);
        }
        
        /// <remarks/>
        public void ActivateSaasUserAsync(string userToken, object userState) {
            if ((this.ActivateSaasUserOperationCompleted == null)) {
                this.ActivateSaasUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateSaasUserOperationCompleted);
            }
            this.InvokeAsync("ActivateSaasUser", new object[] {
                        userToken}, this.ActivateSaasUserOperationCompleted, userState);
        }
        
        private void OnActivateSaasUserOperationCompleted(object arg) {
            if ((this.ActivateSaasUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateSaasUserCompleted(this, new ActivateSaasUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSaasPackages", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSaasPackage GetSaasPackages() {
            object[] results = this.Invoke("GetSaasPackages", new object[0]);
            return ((CxWSResponseSaasPackage)(results[0]));
        }
        
        /// <remarks/>
        public void GetSaasPackagesAsync() {
            this.GetSaasPackagesAsync(null);
        }
        
        /// <remarks/>
        public void GetSaasPackagesAsync(object userState) {
            if ((this.GetSaasPackagesOperationCompleted == null)) {
                this.GetSaasPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSaasPackagesOperationCompleted);
            }
            this.InvokeAsync("GetSaasPackages", new object[0], this.GetSaasPackagesOperationCompleted, userState);
        }
        
        private void OnGetSaasPackagesOperationCompleted(object arg) {
            if ((this.GetSaasPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSaasPackagesCompleted(this, new GetSaasPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetTeamSaaSPackage", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSaasPackage GetTeamSaaSPackage(string teamId) {
            object[] results = this.Invoke("GetTeamSaaSPackage", new object[] {
                        teamId});
            return ((CxWSResponseSaasPackage)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamSaaSPackageAsync(string teamId) {
            this.GetTeamSaaSPackageAsync(teamId, null);
        }
        
        /// <remarks/>
        public void GetTeamSaaSPackageAsync(string teamId, object userState) {
            if ((this.GetTeamSaaSPackageOperationCompleted == null)) {
                this.GetTeamSaaSPackageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamSaaSPackageOperationCompleted);
            }
            this.InvokeAsync("GetTeamSaaSPackage", new object[] {
                        teamId}, this.GetTeamSaaSPackageOperationCompleted, userState);
        }
        
        private void OnGetTeamSaaSPackageOperationCompleted(object arg) {
            if ((this.GetTeamSaaSPackageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamSaaSPackageCompleted(this, new GetTeamSaaSPackageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SaasLogin", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSaasLoginData SaasLogin(Credentials applicationCredentials, int lcid) {
            object[] results = this.Invoke("SaasLogin", new object[] {
                        applicationCredentials,
                        lcid});
            return ((CxWSResponseSaasLoginData)(results[0]));
        }
        
        /// <remarks/>
        public void SaasLoginAsync(Credentials applicationCredentials, int lcid) {
            this.SaasLoginAsync(applicationCredentials, lcid, null);
        }
        
        /// <remarks/>
        public void SaasLoginAsync(Credentials applicationCredentials, int lcid, object userState) {
            if ((this.SaasLoginOperationCompleted == null)) {
                this.SaasLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaasLoginOperationCompleted);
            }
            this.InvokeAsync("SaasLogin", new object[] {
                        applicationCredentials,
                        lcid}, this.SaasLoginOperationCompleted, userState);
        }
        
        private void OnSaasLoginOperationCompleted(object arg) {
            if ((this.SaasLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaasLoginCompleted(this, new SaasLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SendEmailForSales", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SendEmailForSales(string sessionID, EmailForSalesData emailData) {
            object[] results = this.Invoke("SendEmailForSales", new object[] {
                        sessionID,
                        emailData});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailForSalesAsync(string sessionID, EmailForSalesData emailData) {
            this.SendEmailForSalesAsync(sessionID, emailData, null);
        }
        
        /// <remarks/>
        public void SendEmailForSalesAsync(string sessionID, EmailForSalesData emailData, object userState) {
            if ((this.SendEmailForSalesOperationCompleted == null)) {
                this.SendEmailForSalesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailForSalesOperationCompleted);
            }
            this.InvokeAsync("SendEmailForSales", new object[] {
                        sessionID,
                        emailData}, this.SendEmailForSalesOperationCompleted, userState);
        }
        
        private void OnSendEmailForSalesOperationCompleted(object arg) {
            if ((this.SendEmailForSalesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailForSalesCompleted(this, new SendEmailForSalesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetEngineServers", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseEngineServers GetEngineServers(string sessionID) {
            object[] results = this.Invoke("GetEngineServers", new object[] {
                        sessionID});
            return ((CxWSResponseEngineServers)(results[0]));
        }
        
        /// <remarks/>
        public void GetEngineServersAsync(string sessionID) {
            this.GetEngineServersAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetEngineServersAsync(string sessionID, object userState) {
            if ((this.GetEngineServersOperationCompleted == null)) {
                this.GetEngineServersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEngineServersOperationCompleted);
            }
            this.InvokeAsync("GetEngineServers", new object[] {
                        sessionID}, this.GetEngineServersOperationCompleted, userState);
        }
        
        private void OnGetEngineServersOperationCompleted(object arg) {
            if ((this.GetEngineServersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEngineServersCompleted(this, new GetEngineServersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateEngineServer", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseEngineServerId UpdateEngineServer(string sessionID, CxEngineServer engine) {
            object[] results = this.Invoke("UpdateEngineServer", new object[] {
                        sessionID,
                        engine});
            return ((CxWSResponseEngineServerId)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEngineServerAsync(string sessionID, CxEngineServer engine) {
            this.UpdateEngineServerAsync(sessionID, engine, null);
        }
        
        /// <remarks/>
        public void UpdateEngineServerAsync(string sessionID, CxEngineServer engine, object userState) {
            if ((this.UpdateEngineServerOperationCompleted == null)) {
                this.UpdateEngineServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEngineServerOperationCompleted);
            }
            this.InvokeAsync("UpdateEngineServer", new object[] {
                        sessionID,
                        engine}, this.UpdateEngineServerOperationCompleted, userState);
        }
        
        private void OnUpdateEngineServerOperationCompleted(object arg) {
            if ((this.UpdateEngineServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEngineServerCompleted(this, new UpdateEngineServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateEngineServer", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseEngineServerId CreateEngineServer(string sessionID, CxEngineServer engine) {
            object[] results = this.Invoke("CreateEngineServer", new object[] {
                        sessionID,
                        engine});
            return ((CxWSResponseEngineServerId)(results[0]));
        }
        
        /// <remarks/>
        public void CreateEngineServerAsync(string sessionID, CxEngineServer engine) {
            this.CreateEngineServerAsync(sessionID, engine, null);
        }
        
        /// <remarks/>
        public void CreateEngineServerAsync(string sessionID, CxEngineServer engine, object userState) {
            if ((this.CreateEngineServerOperationCompleted == null)) {
                this.CreateEngineServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateEngineServerOperationCompleted);
            }
            this.InvokeAsync("CreateEngineServer", new object[] {
                        sessionID,
                        engine}, this.CreateEngineServerOperationCompleted, userState);
        }
        
        private void OnCreateEngineServerOperationCompleted(object arg) {
            if ((this.CreateEngineServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateEngineServerCompleted(this, new CreateEngineServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteEngineServer", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseEngineServerId DeleteEngineServer(string sessionID, long id) {
            object[] results = this.Invoke("DeleteEngineServer", new object[] {
                        sessionID,
                        id});
            return ((CxWSResponseEngineServerId)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteEngineServerAsync(string sessionID, long id) {
            this.DeleteEngineServerAsync(sessionID, id, null);
        }
        
        /// <remarks/>
        public void DeleteEngineServerAsync(string sessionID, long id, object userState) {
            if ((this.DeleteEngineServerOperationCompleted == null)) {
                this.DeleteEngineServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEngineServerOperationCompleted);
            }
            this.InvokeAsync("DeleteEngineServer", new object[] {
                        sessionID,
                        id}, this.DeleteEngineServerOperationCompleted, userState);
        }
        
        private void OnDeleteEngineServerOperationCompleted(object arg) {
            if ((this.DeleteEngineServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEngineServerCompleted(this, new DeleteEngineServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/Scan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseRunID Scan(string sessionId, CliScanArgs args) {
            object[] results = this.Invoke("Scan", new object[] {
                        sessionId,
                        args});
            return ((CxWSResponseRunID)(results[0]));
        }
        
        /// <remarks/>
        public void ScanAsync(string sessionId, CliScanArgs args) {
            this.ScanAsync(sessionId, args, null);
        }
        
        /// <remarks/>
        public void ScanAsync(string sessionId, CliScanArgs args, object userState) {
            if ((this.ScanOperationCompleted == null)) {
                this.ScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnScanOperationCompleted);
            }
            this.InvokeAsync("Scan", new object[] {
                        sessionId,
                        args}, this.ScanOperationCompleted, userState);
        }
        
        private void OnScanOperationCompleted(object arg) {
            if ((this.ScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ScanCompleted(this, new ScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ExportQueries", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseQueries ExportQueries(string sessionId, long[] queryIds) {
            object[] results = this.Invoke("ExportQueries", new object[] {
                        sessionId,
                        queryIds});
            return ((CxWSResponseQueries)(results[0]));
        }
        
        /// <remarks/>
        public void ExportQueriesAsync(string sessionId, long[] queryIds) {
            this.ExportQueriesAsync(sessionId, queryIds, null);
        }
        
        /// <remarks/>
        public void ExportQueriesAsync(string sessionId, long[] queryIds, object userState) {
            if ((this.ExportQueriesOperationCompleted == null)) {
                this.ExportQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportQueriesOperationCompleted);
            }
            this.InvokeAsync("ExportQueries", new object[] {
                        sessionId,
                        queryIds}, this.ExportQueriesOperationCompleted, userState);
        }
        
        private void OnExportQueriesOperationCompleted(object arg) {
            if ((this.ExportQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportQueriesCompleted(this, new ExportQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ExportPreset", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePreset ExportPreset(string sessionId, long presetId) {
            object[] results = this.Invoke("ExportPreset", new object[] {
                        sessionId,
                        presetId});
            return ((CxWSResponsePreset)(results[0]));
        }
        
        /// <remarks/>
        public void ExportPresetAsync(string sessionId, long presetId) {
            this.ExportPresetAsync(sessionId, presetId, null);
        }
        
        /// <remarks/>
        public void ExportPresetAsync(string sessionId, long presetId, object userState) {
            if ((this.ExportPresetOperationCompleted == null)) {
                this.ExportPresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportPresetOperationCompleted);
            }
            this.InvokeAsync("ExportPreset", new object[] {
                        sessionId,
                        presetId}, this.ExportPresetOperationCompleted, userState);
        }
        
        private void OnExportPresetOperationCompleted(object arg) {
            if ((this.ExportPresetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportPresetCompleted(this, new ExportPresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ImportQueries", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSImportQueriesRepsonse ImportQueries(string sessionId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] importedFile) {
            object[] results = this.Invoke("ImportQueries", new object[] {
                        sessionId,
                        importedFile});
            return ((CxWSImportQueriesRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ImportQueriesAsync(string sessionId, byte[] importedFile) {
            this.ImportQueriesAsync(sessionId, importedFile, null);
        }
        
        /// <remarks/>
        public void ImportQueriesAsync(string sessionId, byte[] importedFile, object userState) {
            if ((this.ImportQueriesOperationCompleted == null)) {
                this.ImportQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportQueriesOperationCompleted);
            }
            this.InvokeAsync("ImportQueries", new object[] {
                        sessionId,
                        importedFile}, this.ImportQueriesOperationCompleted, userState);
        }
        
        private void OnImportQueriesOperationCompleted(object arg) {
            if ((this.ImportQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportQueriesCompleted(this, new ImportQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetImportQueriesStatus", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSImportQueriesRepsonse GetImportQueriesStatus(string sessionId, long requestId) {
            object[] results = this.Invoke("GetImportQueriesStatus", new object[] {
                        sessionId,
                        requestId});
            return ((CxWSImportQueriesRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void GetImportQueriesStatusAsync(string sessionId, long requestId) {
            this.GetImportQueriesStatusAsync(sessionId, requestId, null);
        }
        
        /// <remarks/>
        public void GetImportQueriesStatusAsync(string sessionId, long requestId, object userState) {
            if ((this.GetImportQueriesStatusOperationCompleted == null)) {
                this.GetImportQueriesStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetImportQueriesStatusOperationCompleted);
            }
            this.InvokeAsync("GetImportQueriesStatus", new object[] {
                        sessionId,
                        requestId}, this.GetImportQueriesStatusOperationCompleted, userState);
        }
        
        private void OnGetImportQueriesStatusOperationCompleted(object arg) {
            if ((this.GetImportQueriesStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetImportQueriesStatusCompleted(this, new GetImportQueriesStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetExistingQueries", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTransportedQueries GetExistingQueries(string sessionId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] importedFile) {
            object[] results = this.Invoke("GetExistingQueries", new object[] {
                        sessionId,
                        importedFile});
            return ((CxWSResponseTransportedQueries)(results[0]));
        }
        
        /// <remarks/>
        public void GetExistingQueriesAsync(string sessionId, byte[] importedFile) {
            this.GetExistingQueriesAsync(sessionId, importedFile, null);
        }
        
        /// <remarks/>
        public void GetExistingQueriesAsync(string sessionId, byte[] importedFile, object userState) {
            if ((this.GetExistingQueriesOperationCompleted == null)) {
                this.GetExistingQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExistingQueriesOperationCompleted);
            }
            this.InvokeAsync("GetExistingQueries", new object[] {
                        sessionId,
                        importedFile}, this.GetExistingQueriesOperationCompleted, userState);
        }
        
        private void OnGetExistingQueriesOperationCompleted(object arg) {
            if ((this.GetExistingQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExistingQueriesCompleted(this, new GetExistingQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetExistingPresetQueries", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseExistsingTransportedPresetQueries GetExistingPresetQueries(string sessionId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] importedFile) {
            object[] results = this.Invoke("GetExistingPresetQueries", new object[] {
                        sessionId,
                        importedFile});
            return ((CxWSResponseExistsingTransportedPresetQueries)(results[0]));
        }
        
        /// <remarks/>
        public void GetExistingPresetQueriesAsync(string sessionId, byte[] importedFile) {
            this.GetExistingPresetQueriesAsync(sessionId, importedFile, null);
        }
        
        /// <remarks/>
        public void GetExistingPresetQueriesAsync(string sessionId, byte[] importedFile, object userState) {
            if ((this.GetExistingPresetQueriesOperationCompleted == null)) {
                this.GetExistingPresetQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExistingPresetQueriesOperationCompleted);
            }
            this.InvokeAsync("GetExistingPresetQueries", new object[] {
                        sessionId,
                        importedFile}, this.GetExistingPresetQueriesOperationCompleted, userState);
        }
        
        private void OnGetExistingPresetQueriesOperationCompleted(object arg) {
            if ((this.GetExistingPresetQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExistingPresetQueriesCompleted(this, new GetExistingPresetQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ImportPreset", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSImportQueriesRepsonse ImportPreset(string sessionId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] importedFile) {
            object[] results = this.Invoke("ImportPreset", new object[] {
                        sessionId,
                        importedFile});
            return ((CxWSImportQueriesRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ImportPresetAsync(string sessionId, byte[] importedFile) {
            this.ImportPresetAsync(sessionId, importedFile, null);
        }
        
        /// <remarks/>
        public void ImportPresetAsync(string sessionId, byte[] importedFile, object userState) {
            if ((this.ImportPresetOperationCompleted == null)) {
                this.ImportPresetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportPresetOperationCompleted);
            }
            this.InvokeAsync("ImportPreset", new object[] {
                        sessionId,
                        importedFile}, this.ImportPresetOperationCompleted, userState);
        }
        
        private void OnImportPresetOperationCompleted(object arg) {
            if ((this.ImportPresetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportPresetCompleted(this, new ImportPresetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateScanReport", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSCreateReportResponse CreateScanReport(string SessionID, CxWSFilteredReportRequest Report) {
            object[] results = this.Invoke("CreateScanReport", new object[] {
                        SessionID,
                        Report});
            return ((CxWSCreateReportResponse)(results[0]));
        }
        
        /// <remarks/>
        public void CreateScanReportAsync(string SessionID, CxWSFilteredReportRequest Report) {
            this.CreateScanReportAsync(SessionID, Report, null);
        }
        
        /// <remarks/>
        public void CreateScanReportAsync(string SessionID, CxWSFilteredReportRequest Report, object userState) {
            if ((this.CreateScanReportOperationCompleted == null)) {
                this.CreateScanReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateScanReportOperationCompleted);
            }
            this.InvokeAsync("CreateScanReport", new object[] {
                        SessionID,
                        Report}, this.CreateScanReportOperationCompleted, userState);
        }
        
        private void OnCreateScanReportOperationCompleted(object arg) {
            if ((this.CreateScanReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateScanReportCompleted(this, new CreateScanReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanReportStatus", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSReportStatusResponse GetScanReportStatus(string SessionID, long ReportID) {
            object[] results = this.Invoke("GetScanReportStatus", new object[] {
                        SessionID,
                        ReportID});
            return ((CxWSReportStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetScanReportStatusAsync(string SessionID, long ReportID) {
            this.GetScanReportStatusAsync(SessionID, ReportID, null);
        }
        
        /// <remarks/>
        public void GetScanReportStatusAsync(string SessionID, long ReportID, object userState) {
            if ((this.GetScanReportStatusOperationCompleted == null)) {
                this.GetScanReportStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanReportStatusOperationCompleted);
            }
            this.InvokeAsync("GetScanReportStatus", new object[] {
                        SessionID,
                        ReportID}, this.GetScanReportStatusOperationCompleted, userState);
        }
        
        private void OnGetScanReportStatusOperationCompleted(object arg) {
            if ((this.GetScanReportStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScanReportStatusCompleted(this, new GetScanReportStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanReport", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseScanResults GetScanReport(string SessionID, long ReportID) {
            object[] results = this.Invoke("GetScanReport", new object[] {
                        SessionID,
                        ReportID});
            return ((CxWSResponseScanResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetScanReportAsync(string SessionID, long ReportID) {
            this.GetScanReportAsync(SessionID, ReportID, null);
        }
        
        /// <remarks/>
        public void GetScanReportAsync(string SessionID, long ReportID, object userState) {
            if ((this.GetScanReportOperationCompleted == null)) {
                this.GetScanReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanReportOperationCompleted);
            }
            this.InvokeAsync("GetScanReport", new object[] {
                        SessionID,
                        ReportID}, this.GetScanReportOperationCompleted, userState);
        }
        
        private void OnGetScanReportOperationCompleted(object arg) {
            if ((this.GetScanReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScanReportCompleted(this, new GetScanReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CancelScanReport", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse CancelScanReport(string SessionID, long ReportID) {
            object[] results = this.Invoke("CancelScanReport", new object[] {
                        SessionID,
                        ReportID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void CancelScanReportAsync(string SessionID, long ReportID) {
            this.CancelScanReportAsync(SessionID, ReportID, null);
        }
        
        /// <remarks/>
        public void CancelScanReportAsync(string SessionID, long ReportID, object userState) {
            if ((this.CancelScanReportOperationCompleted == null)) {
                this.CancelScanReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelScanReportOperationCompleted);
            }
            this.InvokeAsync("CancelScanReport", new object[] {
                        SessionID,
                        ReportID}, this.CancelScanReportOperationCompleted, userState);
        }
        
        private void OnCancelScanReportOperationCompleted(object arg) {
            if ((this.CancelScanReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelScanReportCompleted(this, new CancelScanReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SaveUserPreferences", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SaveUserPreferences(string SessionID, CxUserPreferences[] Preferences) {
            object[] results = this.Invoke("SaveUserPreferences", new object[] {
                        SessionID,
                        Preferences});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SaveUserPreferencesAsync(string SessionID, CxUserPreferences[] Preferences) {
            this.SaveUserPreferencesAsync(SessionID, Preferences, null);
        }
        
        /// <remarks/>
        public void SaveUserPreferencesAsync(string SessionID, CxUserPreferences[] Preferences, object userState) {
            if ((this.SaveUserPreferencesOperationCompleted == null)) {
                this.SaveUserPreferencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveUserPreferencesOperationCompleted);
            }
            this.InvokeAsync("SaveUserPreferences", new object[] {
                        SessionID,
                        Preferences}, this.SaveUserPreferencesOperationCompleted, userState);
        }
        
        private void OnSaveUserPreferencesOperationCompleted(object arg) {
            if ((this.SaveUserPreferencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveUserPreferencesCompleted(this, new SaveUserPreferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetUserPreferences", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSUserPreferencesResponse GetUserPreferences(string SessionID) {
            object[] results = this.Invoke("GetUserPreferences", new object[] {
                        SessionID});
            return ((CxWSUserPreferencesResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPreferencesAsync(string SessionID) {
            this.GetUserPreferencesAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void GetUserPreferencesAsync(string SessionID, object userState) {
            if ((this.GetUserPreferencesOperationCompleted == null)) {
                this.GetUserPreferencesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPreferencesOperationCompleted);
            }
            this.InvokeAsync("GetUserPreferences", new object[] {
                        SessionID}, this.GetUserPreferencesOperationCompleted, userState);
        }
        
        private void OnGetUserPreferencesOperationCompleted(object arg) {
            if ((this.GetUserPreferencesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPreferencesCompleted(this, new GetUserPreferencesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IssueTrackingSystemsAPI", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSIssueTrackingSystemResponse IssueTrackingSystemsAPI(CxWSIssueTrackingSystemRequest request) {
            object[] results = this.Invoke("IssueTrackingSystemsAPI", new object[] {
                        request});
            return ((CxWSIssueTrackingSystemResponse)(results[0]));
        }
        
        /// <remarks/>
        public void IssueTrackingSystemsAPIAsync(CxWSIssueTrackingSystemRequest request) {
            this.IssueTrackingSystemsAPIAsync(request, null);
        }
        
        /// <remarks/>
        public void IssueTrackingSystemsAPIAsync(CxWSIssueTrackingSystemRequest request, object userState) {
            if ((this.IssueTrackingSystemsAPIOperationCompleted == null)) {
                this.IssueTrackingSystemsAPIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIssueTrackingSystemsAPIOperationCompleted);
            }
            this.InvokeAsync("IssueTrackingSystemsAPI", new object[] {
                        request}, this.IssueTrackingSystemsAPIOperationCompleted, userState);
        }
        
        private void OnIssueTrackingSystemsAPIOperationCompleted(object arg) {
            if ((this.IssueTrackingSystemsAPICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IssueTrackingSystemsAPICompleted(this, new IssueTrackingSystemsAPICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetVersionNumber", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSCxVersionResponse GetVersionNumber() {
            object[] results = this.Invoke("GetVersionNumber", new object[0]);
            return ((CxWSCxVersionResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetVersionNumberAsync() {
            this.GetVersionNumberAsync(null);
        }
        
        /// <remarks/>
        public void GetVersionNumberAsync(object userState) {
            if ((this.GetVersionNumberOperationCompleted == null)) {
                this.GetVersionNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVersionNumberOperationCompleted);
            }
            this.InvokeAsync("GetVersionNumber", new object[0], this.GetVersionNumberOperationCompleted, userState);
        }
        
        private void OnGetVersionNumberOperationCompleted(object arg) {
            if ((this.GetVersionNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVersionNumberCompleted(this, new GetVersionNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/MoveTeam", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSCxMoveTeamResponse MoveTeam(string sessionID, string sourceID, string destenationID) {
            object[] results = this.Invoke("MoveTeam", new object[] {
                        sessionID,
                        sourceID,
                        destenationID});
            return ((CxWSCxMoveTeamResponse)(results[0]));
        }
        
        /// <remarks/>
        public void MoveTeamAsync(string sessionID, string sourceID, string destenationID) {
            this.MoveTeamAsync(sessionID, sourceID, destenationID, null);
        }
        
        /// <remarks/>
        public void MoveTeamAsync(string sessionID, string sourceID, string destenationID, object userState) {
            if ((this.MoveTeamOperationCompleted == null)) {
                this.MoveTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveTeamOperationCompleted);
            }
            this.InvokeAsync("MoveTeam", new object[] {
                        sessionID,
                        sourceID,
                        destenationID}, this.MoveTeamOperationCompleted, userState);
        }
        
        private void OnMoveTeamOperationCompleted(object arg) {
            if ((this.MoveTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveTeamCompleted(this, new MoveTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetTeamFullPaths", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxTeamPathsResponseResponse GetTeamFullPaths(string sessionID, string sourceTeamID, string destinationTeamID) {
            object[] results = this.Invoke("GetTeamFullPaths", new object[] {
                        sessionID,
                        sourceTeamID,
                        destinationTeamID});
            return ((CxTeamPathsResponseResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamFullPathsAsync(string sessionID, string sourceTeamID, string destinationTeamID) {
            this.GetTeamFullPathsAsync(sessionID, sourceTeamID, destinationTeamID, null);
        }
        
        /// <remarks/>
        public void GetTeamFullPathsAsync(string sessionID, string sourceTeamID, string destinationTeamID, object userState) {
            if ((this.GetTeamFullPathsOperationCompleted == null)) {
                this.GetTeamFullPathsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamFullPathsOperationCompleted);
            }
            this.InvokeAsync("GetTeamFullPaths", new object[] {
                        sessionID,
                        sourceTeamID,
                        destinationTeamID}, this.GetTeamFullPathsOperationCompleted, userState);
        }
        
        private void OnGetTeamFullPathsOperationCompleted(object arg) {
            if ((this.GetTeamFullPathsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamFullPathsCompleted(this, new GetTeamFullPathsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectScannedDisplayData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseProjectScannedDisplayData GetProjectScannedDisplayData(string sessionID) {
            object[] results = this.Invoke("GetProjectScannedDisplayData", new object[] {
                        sessionID});
            return ((CxWSResponseProjectScannedDisplayData)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectScannedDisplayDataAsync(string sessionID) {
            this.GetProjectScannedDisplayDataAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetProjectScannedDisplayDataAsync(string sessionID, object userState) {
            if ((this.GetProjectScannedDisplayDataOperationCompleted == null)) {
                this.GetProjectScannedDisplayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectScannedDisplayDataOperationCompleted);
            }
            this.InvokeAsync("GetProjectScannedDisplayData", new object[] {
                        sessionID}, this.GetProjectScannedDisplayDataOperationCompleted, userState);
        }
        
        private void OnGetProjectScannedDisplayDataOperationCompleted(object arg) {
            if ((this.GetProjectScannedDisplayDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectScannedDisplayDataCompleted(this, new GetProjectScannedDisplayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetFailedScansDisplayData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseFailedScansDisplayData GetFailedScansDisplayData(string sessionID) {
            object[] results = this.Invoke("GetFailedScansDisplayData", new object[] {
                        sessionID});
            return ((CxWSResponseFailedScansDisplayData)(results[0]));
        }
        
        /// <remarks/>
        public void GetFailedScansDisplayDataAsync(string sessionID) {
            this.GetFailedScansDisplayDataAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetFailedScansDisplayDataAsync(string sessionID, object userState) {
            if ((this.GetFailedScansDisplayDataOperationCompleted == null)) {
                this.GetFailedScansDisplayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFailedScansDisplayDataOperationCompleted);
            }
            this.InvokeAsync("GetFailedScansDisplayData", new object[] {
                        sessionID}, this.GetFailedScansDisplayDataOperationCompleted, userState);
        }
        
        private void OnGetFailedScansDisplayDataOperationCompleted(object arg) {
            if ((this.GetFailedScansDisplayDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFailedScansDisplayDataCompleted(this, new GetFailedScansDisplayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetTabWidgets", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseJSONData GetTabWidgets(string sessionId, int tabId) {
            object[] results = this.Invoke("GetTabWidgets", new object[] {
                        sessionId,
                        tabId});
            return ((CxWSResponseJSONData)(results[0]));
        }
        
        /// <remarks/>
        public void GetTabWidgetsAsync(string sessionId, int tabId) {
            this.GetTabWidgetsAsync(sessionId, tabId, null);
        }
        
        /// <remarks/>
        public void GetTabWidgetsAsync(string sessionId, int tabId, object userState) {
            if ((this.GetTabWidgetsOperationCompleted == null)) {
                this.GetTabWidgetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTabWidgetsOperationCompleted);
            }
            this.InvokeAsync("GetTabWidgets", new object[] {
                        sessionId,
                        tabId}, this.GetTabWidgetsOperationCompleted, userState);
        }
        
        private void OnGetTabWidgetsOperationCompleted(object arg) {
            if ((this.GetTabWidgetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTabWidgetsCompleted(this, new GetTabWidgetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetWidgetFilters", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseJSONData GetWidgetFilters(string sessionId, int[] widgetIds) {
            object[] results = this.Invoke("GetWidgetFilters", new object[] {
                        sessionId,
                        widgetIds});
            return ((CxWSResponseJSONData)(results[0]));
        }
        
        /// <remarks/>
        public void GetWidgetFiltersAsync(string sessionId, int[] widgetIds) {
            this.GetWidgetFiltersAsync(sessionId, widgetIds, null);
        }
        
        /// <remarks/>
        public void GetWidgetFiltersAsync(string sessionId, int[] widgetIds, object userState) {
            if ((this.GetWidgetFiltersOperationCompleted == null)) {
                this.GetWidgetFiltersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWidgetFiltersOperationCompleted);
            }
            this.InvokeAsync("GetWidgetFilters", new object[] {
                        sessionId,
                        widgetIds}, this.GetWidgetFiltersOperationCompleted, userState);
        }
        
        private void OnGetWidgetFiltersOperationCompleted(object arg) {
            if ((this.GetWidgetFiltersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWidgetFiltersCompleted(this, new GetWidgetFiltersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetWidgetData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseJSONData GetWidgetData(string sessionId, int widgetId, string parametersAsJSON) {
            object[] results = this.Invoke("GetWidgetData", new object[] {
                        sessionId,
                        widgetId,
                        parametersAsJSON});
            return ((CxWSResponseJSONData)(results[0]));
        }
        
        /// <remarks/>
        public void GetWidgetDataAsync(string sessionId, int widgetId, string parametersAsJSON) {
            this.GetWidgetDataAsync(sessionId, widgetId, parametersAsJSON, null);
        }
        
        /// <remarks/>
        public void GetWidgetDataAsync(string sessionId, int widgetId, string parametersAsJSON, object userState) {
            if ((this.GetWidgetDataOperationCompleted == null)) {
                this.GetWidgetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWidgetDataOperationCompleted);
            }
            this.InvokeAsync("GetWidgetData", new object[] {
                        sessionId,
                        widgetId,
                        parametersAsJSON}, this.GetWidgetDataOperationCompleted, userState);
        }
        
        private void OnGetWidgetDataOperationCompleted(object arg) {
            if ((this.GetWidgetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWidgetDataCompleted(this, new GetWidgetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetLdapServersConfigurations", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLDAPServersConfiguration GetLdapServersConfigurations(string sessionId) {
            object[] results = this.Invoke("GetLdapServersConfigurations", new object[] {
                        sessionId});
            return ((CxWSResponseLDAPServersConfiguration)(results[0]));
        }
        
        /// <remarks/>
        public void GetLdapServersConfigurationsAsync(string sessionId) {
            this.GetLdapServersConfigurationsAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetLdapServersConfigurationsAsync(string sessionId, object userState) {
            if ((this.GetLdapServersConfigurationsOperationCompleted == null)) {
                this.GetLdapServersConfigurationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLdapServersConfigurationsOperationCompleted);
            }
            this.InvokeAsync("GetLdapServersConfigurations", new object[] {
                        sessionId}, this.GetLdapServersConfigurationsOperationCompleted, userState);
        }
        
        private void OnGetLdapServersConfigurationsOperationCompleted(object arg) {
            if ((this.GetLdapServersConfigurationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLdapServersConfigurationsCompleted(this, new GetLdapServersConfigurationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetLdapServersConfigurations", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLDAPServersConfiguration SetLdapServersConfigurations(string sessionId, CxWSLdapServerConfiguration[] serverConfigurations) {
            object[] results = this.Invoke("SetLdapServersConfigurations", new object[] {
                        sessionId,
                        serverConfigurations});
            return ((CxWSResponseLDAPServersConfiguration)(results[0]));
        }
        
        /// <remarks/>
        public void SetLdapServersConfigurationsAsync(string sessionId, CxWSLdapServerConfiguration[] serverConfigurations) {
            this.SetLdapServersConfigurationsAsync(sessionId, serverConfigurations, null);
        }
        
        /// <remarks/>
        public void SetLdapServersConfigurationsAsync(string sessionId, CxWSLdapServerConfiguration[] serverConfigurations, object userState) {
            if ((this.SetLdapServersConfigurationsOperationCompleted == null)) {
                this.SetLdapServersConfigurationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetLdapServersConfigurationsOperationCompleted);
            }
            this.InvokeAsync("SetLdapServersConfigurations", new object[] {
                        sessionId,
                        serverConfigurations}, this.SetLdapServersConfigurationsOperationCompleted, userState);
        }
        
        private void OnSetLdapServersConfigurationsOperationCompleted(object arg) {
            if ((this.SetLdapServersConfigurationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetLdapServersConfigurationsCompleted(this, new SetLdapServersConfigurationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/TestLdapServerConnection", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse TestLdapServerConnection(string sessionId, CxWSLdapServerConfiguration serverConfiguration) {
            object[] results = this.Invoke("TestLdapServerConnection", new object[] {
                        sessionId,
                        serverConfiguration});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void TestLdapServerConnectionAsync(string sessionId, CxWSLdapServerConfiguration serverConfiguration) {
            this.TestLdapServerConnectionAsync(sessionId, serverConfiguration, null);
        }
        
        /// <remarks/>
        public void TestLdapServerConnectionAsync(string sessionId, CxWSLdapServerConfiguration serverConfiguration, object userState) {
            if ((this.TestLdapServerConnectionOperationCompleted == null)) {
                this.TestLdapServerConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestLdapServerConnectionOperationCompleted);
            }
            this.InvokeAsync("TestLdapServerConnection", new object[] {
                        sessionId,
                        serverConfiguration}, this.TestLdapServerConnectionOperationCompleted, userState);
        }
        
        private void OnTestLdapServerConnectionOperationCompleted(object arg) {
            if ((this.TestLdapServerConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestLdapServerConnectionCompleted(this, new TestLdapServerConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetConfiguredLdapServerNames", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseIdNamePairList GetConfiguredLdapServerNames(string sessionId, bool onlySyncEnabled) {
            object[] results = this.Invoke("GetConfiguredLdapServerNames", new object[] {
                        sessionId,
                        onlySyncEnabled});
            return ((CxWSResponseIdNamePairList)(results[0]));
        }
        
        /// <remarks/>
        public void GetConfiguredLdapServerNamesAsync(string sessionId, bool onlySyncEnabled) {
            this.GetConfiguredLdapServerNamesAsync(sessionId, onlySyncEnabled, null);
        }
        
        /// <remarks/>
        public void GetConfiguredLdapServerNamesAsync(string sessionId, bool onlySyncEnabled, object userState) {
            if ((this.GetConfiguredLdapServerNamesOperationCompleted == null)) {
                this.GetConfiguredLdapServerNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfiguredLdapServerNamesOperationCompleted);
            }
            this.InvokeAsync("GetConfiguredLdapServerNames", new object[] {
                        sessionId,
                        onlySyncEnabled}, this.GetConfiguredLdapServerNamesOperationCompleted, userState);
        }
        
        private void OnGetConfiguredLdapServerNamesOperationCompleted(object arg) {
            if ((this.GetConfiguredLdapServerNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfiguredLdapServerNamesCompleted(this, new GetConfiguredLdapServerNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetLdapServerGroups", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLDAPServerGroups GetLdapServerGroups(string sessionId, int ldapServerId, string searchPattern, CxWSSearchPatternOption searchPatternOption) {
            object[] results = this.Invoke("GetLdapServerGroups", new object[] {
                        sessionId,
                        ldapServerId,
                        searchPattern,
                        searchPatternOption});
            return ((CxWSResponseLDAPServerGroups)(results[0]));
        }
        
        /// <remarks/>
        public void GetLdapServerGroupsAsync(string sessionId, int ldapServerId, string searchPattern, CxWSSearchPatternOption searchPatternOption) {
            this.GetLdapServerGroupsAsync(sessionId, ldapServerId, searchPattern, searchPatternOption, null);
        }
        
        /// <remarks/>
        public void GetLdapServerGroupsAsync(string sessionId, int ldapServerId, string searchPattern, CxWSSearchPatternOption searchPatternOption, object userState) {
            if ((this.GetLdapServerGroupsOperationCompleted == null)) {
                this.GetLdapServerGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLdapServerGroupsOperationCompleted);
            }
            this.InvokeAsync("GetLdapServerGroups", new object[] {
                        sessionId,
                        ldapServerId,
                        searchPattern,
                        searchPatternOption}, this.GetLdapServerGroupsOperationCompleted, userState);
        }
        
        private void OnGetLdapServerGroupsOperationCompleted(object arg) {
            if ((this.GetLdapServerGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLdapServerGroupsCompleted(this, new GetLdapServerGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetTeamLdapGroupsMapping", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTeamLdapGroupMappingData GetTeamLdapGroupsMapping(string sessionId, string teamId) {
            object[] results = this.Invoke("GetTeamLdapGroupsMapping", new object[] {
                        sessionId,
                        teamId});
            return ((CxWSResponseTeamLdapGroupMappingData)(results[0]));
        }
        
        /// <remarks/>
        public void GetTeamLdapGroupsMappingAsync(string sessionId, string teamId) {
            this.GetTeamLdapGroupsMappingAsync(sessionId, teamId, null);
        }
        
        /// <remarks/>
        public void GetTeamLdapGroupsMappingAsync(string sessionId, string teamId, object userState) {
            if ((this.GetTeamLdapGroupsMappingOperationCompleted == null)) {
                this.GetTeamLdapGroupsMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTeamLdapGroupsMappingOperationCompleted);
            }
            this.InvokeAsync("GetTeamLdapGroupsMapping", new object[] {
                        sessionId,
                        teamId}, this.GetTeamLdapGroupsMappingOperationCompleted, userState);
        }
        
        private void OnGetTeamLdapGroupsMappingOperationCompleted(object arg) {
            if ((this.GetTeamLdapGroupsMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTeamLdapGroupsMappingCompleted(this, new GetTeamLdapGroupsMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetTeamLdapGroupsMapping", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SetTeamLdapGroupsMapping(string sessionId, string teamId, CxWSLdapGroupMapping[] ldapGroups) {
            object[] results = this.Invoke("SetTeamLdapGroupsMapping", new object[] {
                        sessionId,
                        teamId,
                        ldapGroups});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SetTeamLdapGroupsMappingAsync(string sessionId, string teamId, CxWSLdapGroupMapping[] ldapGroups) {
            this.SetTeamLdapGroupsMappingAsync(sessionId, teamId, ldapGroups, null);
        }
        
        /// <remarks/>
        public void SetTeamLdapGroupsMappingAsync(string sessionId, string teamId, CxWSLdapGroupMapping[] ldapGroups, object userState) {
            if ((this.SetTeamLdapGroupsMappingOperationCompleted == null)) {
                this.SetTeamLdapGroupsMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTeamLdapGroupsMappingOperationCompleted);
            }
            this.InvokeAsync("SetTeamLdapGroupsMapping", new object[] {
                        sessionId,
                        teamId,
                        ldapGroups}, this.SetTeamLdapGroupsMappingOperationCompleted, userState);
        }
        
        private void OnSetTeamLdapGroupsMappingOperationCompleted(object arg) {
            if ((this.SetTeamLdapGroupsMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTeamLdapGroupsMappingCompleted(this, new SetTeamLdapGroupsMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ExecuteDataRetention", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse ExecuteDataRetention(string SessionID, CxDataRetentionConfiguration dataRetentionConfiguration) {
            object[] results = this.Invoke("ExecuteDataRetention", new object[] {
                        SessionID,
                        dataRetentionConfiguration});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteDataRetentionAsync(string SessionID, CxDataRetentionConfiguration dataRetentionConfiguration) {
            this.ExecuteDataRetentionAsync(SessionID, dataRetentionConfiguration, null);
        }
        
        /// <remarks/>
        public void ExecuteDataRetentionAsync(string SessionID, CxDataRetentionConfiguration dataRetentionConfiguration, object userState) {
            if ((this.ExecuteDataRetentionOperationCompleted == null)) {
                this.ExecuteDataRetentionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteDataRetentionOperationCompleted);
            }
            this.InvokeAsync("ExecuteDataRetention", new object[] {
                        SessionID,
                        dataRetentionConfiguration}, this.ExecuteDataRetentionOperationCompleted, userState);
        }
        
        private void OnExecuteDataRetentionOperationCompleted(object arg) {
            if ((this.ExecuteDataRetentionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteDataRetentionCompleted(this, new ExecuteDataRetentionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetDataRetentionStatus", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSDataRetentionStatusResponse GetDataRetentionStatus(string SessionID) {
            object[] results = this.Invoke("GetDataRetentionStatus", new object[] {
                        SessionID});
            return ((CxWSDataRetentionStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataRetentionStatusAsync(string SessionID) {
            this.GetDataRetentionStatusAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void GetDataRetentionStatusAsync(string SessionID, object userState) {
            if ((this.GetDataRetentionStatusOperationCompleted == null)) {
                this.GetDataRetentionStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataRetentionStatusOperationCompleted);
            }
            this.InvokeAsync("GetDataRetentionStatus", new object[] {
                        SessionID}, this.GetDataRetentionStatusOperationCompleted, userState);
        }
        
        private void OnGetDataRetentionStatusOperationCompleted(object arg) {
            if ((this.GetDataRetentionStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataRetentionStatusCompleted(this, new GetDataRetentionStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetLatestFinishedDataRetentionRequest", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSDataRetentionRequestResponse GetLatestFinishedDataRetentionRequest(string SessionID) {
            object[] results = this.Invoke("GetLatestFinishedDataRetentionRequest", new object[] {
                        SessionID});
            return ((CxWSDataRetentionRequestResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestFinishedDataRetentionRequestAsync(string SessionID) {
            this.GetLatestFinishedDataRetentionRequestAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void GetLatestFinishedDataRetentionRequestAsync(string SessionID, object userState) {
            if ((this.GetLatestFinishedDataRetentionRequestOperationCompleted == null)) {
                this.GetLatestFinishedDataRetentionRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestFinishedDataRetentionRequestOperationCompleted);
            }
            this.InvokeAsync("GetLatestFinishedDataRetentionRequest", new object[] {
                        SessionID}, this.GetLatestFinishedDataRetentionRequestOperationCompleted, userState);
        }
        
        private void OnGetLatestFinishedDataRetentionRequestOperationCompleted(object arg) {
            if ((this.GetLatestFinishedDataRetentionRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestFinishedDataRetentionRequestCompleted(this, new GetLatestFinishedDataRetentionRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/StopDataRetention", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse StopDataRetention(string SessionID) {
            object[] results = this.Invoke("StopDataRetention", new object[] {
                        SessionID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void StopDataRetentionAsync(string SessionID) {
            this.StopDataRetentionAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void StopDataRetentionAsync(string SessionID, object userState) {
            if ((this.StopDataRetentionOperationCompleted == null)) {
                this.StopDataRetentionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopDataRetentionOperationCompleted);
            }
            this.InvokeAsync("StopDataRetention", new object[] {
                        SessionID}, this.StopDataRetentionOperationCompleted, userState);
        }
        
        private void OnStopDataRetentionOperationCompleted(object arg) {
            if ((this.StopDataRetentionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopDataRetentionCompleted(this, new StopDataRetentionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetLicenseExpirationDateForAdmin", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLicenseExpirationDateDetails GetLicenseExpirationDateForAdmin(string sessionID) {
            object[] results = this.Invoke("GetLicenseExpirationDateForAdmin", new object[] {
                        sessionID});
            return ((CxWSResponseLicenseExpirationDateDetails)(results[0]));
        }
        
        /// <remarks/>
        public void GetLicenseExpirationDateForAdminAsync(string sessionID) {
            this.GetLicenseExpirationDateForAdminAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetLicenseExpirationDateForAdminAsync(string sessionID, object userState) {
            if ((this.GetLicenseExpirationDateForAdminOperationCompleted == null)) {
                this.GetLicenseExpirationDateForAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLicenseExpirationDateForAdminOperationCompleted);
            }
            this.InvokeAsync("GetLicenseExpirationDateForAdmin", new object[] {
                        sessionID}, this.GetLicenseExpirationDateForAdminOperationCompleted, userState);
        }
        
        private void OnGetLicenseExpirationDateForAdminOperationCompleted(object arg) {
            if ((this.GetLicenseExpirationDateForAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLicenseExpirationDateForAdminCompleted(this, new GetLicenseExpirationDateForAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/AddLicenseExpirationNotification", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse AddLicenseExpirationNotification(string sessionID) {
            object[] results = this.Invoke("AddLicenseExpirationNotification", new object[] {
                        sessionID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void AddLicenseExpirationNotificationAsync(string sessionID) {
            this.AddLicenseExpirationNotificationAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void AddLicenseExpirationNotificationAsync(string sessionID, object userState) {
            if ((this.AddLicenseExpirationNotificationOperationCompleted == null)) {
                this.AddLicenseExpirationNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLicenseExpirationNotificationOperationCompleted);
            }
            this.InvokeAsync("AddLicenseExpirationNotification", new object[] {
                        sessionID}, this.AddLicenseExpirationNotificationOperationCompleted, userState);
        }
        
        private void OnAddLicenseExpirationNotificationOperationCompleted(object arg) {
            if ((this.AddLicenseExpirationNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLicenseExpirationNotificationCompleted(this, new AddLicenseExpirationNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CancelLicenseExpirationNotification", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse CancelLicenseExpirationNotification(string sessionID) {
            object[] results = this.Invoke("CancelLicenseExpirationNotification", new object[] {
                        sessionID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void CancelLicenseExpirationNotificationAsync(string sessionID) {
            this.CancelLicenseExpirationNotificationAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void CancelLicenseExpirationNotificationAsync(string sessionID, object userState) {
            if ((this.CancelLicenseExpirationNotificationOperationCompleted == null)) {
                this.CancelLicenseExpirationNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelLicenseExpirationNotificationOperationCompleted);
            }
            this.InvokeAsync("CancelLicenseExpirationNotification", new object[] {
                        sessionID}, this.CancelLicenseExpirationNotificationOperationCompleted, userState);
        }
        
        private void OnCancelLicenseExpirationNotificationOperationCompleted(object arg) {
            if ((this.CancelLicenseExpirationNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelLicenseExpirationNotificationCompleted(this, new CancelLicenseExpirationNotificationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/Warmup", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse Warmup() {
            object[] results = this.Invoke("Warmup", new object[0]);
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void WarmupAsync() {
            this.WarmupAsync(null);
        }
        
        /// <remarks/>
        public void WarmupAsync(object userState) {
            if ((this.WarmupOperationCompleted == null)) {
                this.WarmupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWarmupOperationCompleted);
            }
            this.InvokeAsync("Warmup", new object[0], this.WarmupOperationCompleted, userState);
        }
        
        private void OnWarmupOperationCompleted(object arg) {
            if ((this.WarmupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WarmupCompleted(this, new WarmupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectsWithScans", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseProjectsScansList GetProjectsWithScans(string sessionId) {
            object[] results = this.Invoke("GetProjectsWithScans", new object[] {
                        sessionId});
            return ((CxWSResponseProjectsScansList)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectsWithScansAsync(string sessionId) {
            this.GetProjectsWithScansAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void GetProjectsWithScansAsync(string sessionId, object userState) {
            if ((this.GetProjectsWithScansOperationCompleted == null)) {
                this.GetProjectsWithScansOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsWithScansOperationCompleted);
            }
            this.InvokeAsync("GetProjectsWithScans", new object[] {
                        sessionId}, this.GetProjectsWithScansOperationCompleted, userState);
        }
        
        private void OnGetProjectsWithScansOperationCompleted(object arg) {
            if ((this.GetProjectsWithScansCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectsWithScansCompleted(this, new GetProjectsWithScansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UploadProjectWithDefaultSettings", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSourceID UploadProjectWithDefaultSettings(string sessionId, ProjectBasicSettings projectSettings, LocalCodeContainer localCodeContainer) {
            object[] results = this.Invoke("UploadProjectWithDefaultSettings", new object[] {
                        sessionId,
                        projectSettings,
                        localCodeContainer});
            return ((CxWSResponseSourceID)(results[0]));
        }
        
        /// <remarks/>
        public void UploadProjectWithDefaultSettingsAsync(string sessionId, ProjectBasicSettings projectSettings, LocalCodeContainer localCodeContainer) {
            this.UploadProjectWithDefaultSettingsAsync(sessionId, projectSettings, localCodeContainer, null);
        }
        
        /// <remarks/>
        public void UploadProjectWithDefaultSettingsAsync(string sessionId, ProjectBasicSettings projectSettings, LocalCodeContainer localCodeContainer, object userState) {
            if ((this.UploadProjectWithDefaultSettingsOperationCompleted == null)) {
                this.UploadProjectWithDefaultSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadProjectWithDefaultSettingsOperationCompleted);
            }
            this.InvokeAsync("UploadProjectWithDefaultSettings", new object[] {
                        sessionId,
                        projectSettings,
                        localCodeContainer}, this.UploadProjectWithDefaultSettingsOperationCompleted, userState);
        }
        
        private void OnUploadProjectWithDefaultSettingsOperationCompleted(object arg) {
            if ((this.UploadProjectWithDefaultSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadProjectWithDefaultSettingsCompleted(this, new UploadProjectWithDefaultSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSourceCodeForScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSourceContainer GetSourceCodeForScan(string sessionID, long scanId) {
            object[] results = this.Invoke("GetSourceCodeForScan", new object[] {
                        sessionID,
                        scanId});
            return ((CxWSResponseSourceContainer)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceCodeForScanAsync(string sessionID, long scanId) {
            this.GetSourceCodeForScanAsync(sessionID, scanId, null);
        }
        
        /// <remarks/>
        public void GetSourceCodeForScanAsync(string sessionID, long scanId, object userState) {
            if ((this.GetSourceCodeForScanOperationCompleted == null)) {
                this.GetSourceCodeForScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceCodeForScanOperationCompleted);
            }
            this.InvokeAsync("GetSourceCodeForScan", new object[] {
                        sessionID,
                        scanId}, this.GetSourceCodeForScanOperationCompleted, userState);
        }
        
        private void OnGetSourceCodeForScanOperationCompleted(object arg) {
            if ((this.GetSourceCodeForScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceCodeForScanCompleted(this, new GetSourceCodeForScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryCollectionForLanguage", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxQueryCollectionResponse GetQueryCollectionForLanguage(string sessionId, int projectType, long projectId) {
            object[] results = this.Invoke("GetQueryCollectionForLanguage", new object[] {
                        sessionId,
                        projectType,
                        projectId});
            return ((CxQueryCollectionResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryCollectionForLanguageAsync(string sessionId, int projectType, long projectId) {
            this.GetQueryCollectionForLanguageAsync(sessionId, projectType, projectId, null);
        }
        
        /// <remarks/>
        public void GetQueryCollectionForLanguageAsync(string sessionId, int projectType, long projectId, object userState) {
            if ((this.GetQueryCollectionForLanguageOperationCompleted == null)) {
                this.GetQueryCollectionForLanguageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryCollectionForLanguageOperationCompleted);
            }
            this.InvokeAsync("GetQueryCollectionForLanguage", new object[] {
                        sessionId,
                        projectType,
                        projectId}, this.GetQueryCollectionForLanguageOperationCompleted, userState);
        }
        
        private void OnGetQueryCollectionForLanguageOperationCompleted(object arg) {
            if ((this.GetQueryCollectionForLanguageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryCollectionForLanguageCompleted(this, new GetQueryCollectionForLanguageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryCollectionForLanguageByTeamId", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxQueryCollectionResponse GetQueryCollectionForLanguageByTeamId(string sessionId, int projectType, string teamId) {
            object[] results = this.Invoke("GetQueryCollectionForLanguageByTeamId", new object[] {
                        sessionId,
                        projectType,
                        teamId});
            return ((CxQueryCollectionResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryCollectionForLanguageByTeamIdAsync(string sessionId, int projectType, string teamId) {
            this.GetQueryCollectionForLanguageByTeamIdAsync(sessionId, projectType, teamId, null);
        }
        
        /// <remarks/>
        public void GetQueryCollectionForLanguageByTeamIdAsync(string sessionId, int projectType, string teamId, object userState) {
            if ((this.GetQueryCollectionForLanguageByTeamIdOperationCompleted == null)) {
                this.GetQueryCollectionForLanguageByTeamIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryCollectionForLanguageByTeamIdOperationCompleted);
            }
            this.InvokeAsync("GetQueryCollectionForLanguageByTeamId", new object[] {
                        sessionId,
                        projectType,
                        teamId}, this.GetQueryCollectionForLanguageByTeamIdOperationCompleted, userState);
        }
        
        private void OnGetQueryCollectionForLanguageByTeamIdOperationCompleted(object arg) {
            if ((this.GetQueryCollectionForLanguageByTeamIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryCollectionForLanguageByTeamIdCompleted(this, new GetQueryCollectionForLanguageByTeamIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UploadQueries", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UploadQueries(string sessionId, CxWSQueryGroup[] queries) {
            object[] results = this.Invoke("UploadQueries", new object[] {
                        sessionId,
                        queries});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UploadQueriesAsync(string sessionId, CxWSQueryGroup[] queries) {
            this.UploadQueriesAsync(sessionId, queries, null);
        }
        
        /// <remarks/>
        public void UploadQueriesAsync(string sessionId, CxWSQueryGroup[] queries, object userState) {
            if ((this.UploadQueriesOperationCompleted == null)) {
                this.UploadQueriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadQueriesOperationCompleted);
            }
            this.InvokeAsync("UploadQueries", new object[] {
                        sessionId,
                        queries}, this.UploadQueriesOperationCompleted, userState);
        }
        
        private void OnUploadQueriesOperationCompleted(object arg) {
            if ((this.UploadQueriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadQueriesCompleted(this, new UploadQueriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/AddScanResultsToProject", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseBasicScanData AddScanResultsToProject(string sessionId, long projectId, string sourceId, AuditResultsCollection resultsCollection, string comment) {
            object[] results = this.Invoke("AddScanResultsToProject", new object[] {
                        sessionId,
                        projectId,
                        sourceId,
                        resultsCollection,
                        comment});
            return ((CxWSResponseBasicScanData)(results[0]));
        }
        
        /// <remarks/>
        public void AddScanResultsToProjectAsync(string sessionId, long projectId, string sourceId, AuditResultsCollection resultsCollection, string comment) {
            this.AddScanResultsToProjectAsync(sessionId, projectId, sourceId, resultsCollection, comment, null);
        }
        
        /// <remarks/>
        public void AddScanResultsToProjectAsync(string sessionId, long projectId, string sourceId, AuditResultsCollection resultsCollection, string comment, object userState) {
            if ((this.AddScanResultsToProjectOperationCompleted == null)) {
                this.AddScanResultsToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddScanResultsToProjectOperationCompleted);
            }
            this.InvokeAsync("AddScanResultsToProject", new object[] {
                        sessionId,
                        projectId,
                        sourceId,
                        resultsCollection,
                        comment}, this.AddScanResultsToProjectOperationCompleted, userState);
        }
        
        private void OnAddScanResultsToProjectOperationCompleted(object arg) {
            if ((this.AddScanResultsToProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddScanResultsToProjectCompleted(this, new AddScanResultsToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResults", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseResultCollection GetResults(string sessionId, long scanId) {
            object[] results = this.Invoke("GetResults", new object[] {
                        sessionId,
                        scanId});
            return ((CxWSResponseResultCollection)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultsAsync(string sessionId, long scanId) {
            this.GetResultsAsync(sessionId, scanId, null);
        }
        
        /// <remarks/>
        public void GetResultsAsync(string sessionId, long scanId, object userState) {
            if ((this.GetResultsOperationCompleted == null)) {
                this.GetResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultsOperationCompleted);
            }
            this.InvokeAsync("GetResults", new object[] {
                        sessionId,
                        scanId}, this.GetResultsOperationCompleted, userState);
        }
        
        private void OnGetResultsOperationCompleted(object arg) {
            if ((this.GetResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultsCompleted(this, new GetResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultSummary", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CXWSResponseResultSummary GetResultSummary(string sessionId, long scanId) {
            object[] results = this.Invoke("GetResultSummary", new object[] {
                        sessionId,
                        scanId});
            return ((CXWSResponseResultSummary)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultSummaryAsync(string sessionId, long scanId) {
            this.GetResultSummaryAsync(sessionId, scanId, null);
        }
        
        /// <remarks/>
        public void GetResultSummaryAsync(string sessionId, long scanId, object userState) {
            if ((this.GetResultSummaryOperationCompleted == null)) {
                this.GetResultSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultSummaryOperationCompleted);
            }
            this.InvokeAsync("GetResultSummary", new object[] {
                        sessionId,
                        scanId}, this.GetResultSummaryOperationCompleted, userState);
        }
        
        private void OnGetResultSummaryOperationCompleted(object arg) {
            if ((this.GetResultSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultSummaryCompleted(this, new GetResultSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCache", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseCache GetCache(string sessionId, long scanId) {
            object[] results = this.Invoke("GetCache", new object[] {
                        sessionId,
                        scanId});
            return ((CxWSResponseCache)(results[0]));
        }
        
        /// <remarks/>
        public void GetCacheAsync(string sessionId, long scanId) {
            this.GetCacheAsync(sessionId, scanId, null);
        }
        
        /// <remarks/>
        public void GetCacheAsync(string sessionId, long scanId, object userState) {
            if ((this.GetCacheOperationCompleted == null)) {
                this.GetCacheOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCacheOperationCompleted);
            }
            this.InvokeAsync("GetCache", new object[] {
                        sessionId,
                        scanId}, this.GetCacheOperationCompleted, userState);
        }
        
        private void OnGetCacheOperationCompleted(object arg) {
            if ((this.GetCacheCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCacheCompleted(this, new GetCacheCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/Login", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLoginData Login(Credentials applicationCredentials, int lcid) {
            object[] results = this.Invoke("Login", new object[] {
                        applicationCredentials,
                        lcid});
            return ((CxWSResponseLoginData)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(Credentials applicationCredentials, int lcid) {
            this.LoginAsync(applicationCredentials, lcid, null);
        }
        
        /// <remarks/>
        public void LoginAsync(Credentials applicationCredentials, int lcid, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        applicationCredentials,
                        lcid}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SamlLogin", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLoginData SamlLogin(string token, int lcid) {
            object[] results = this.Invoke("SamlLogin", new object[] {
                        token,
                        lcid});
            return ((CxWSResponseLoginData)(results[0]));
        }
        
        /// <remarks/>
        public void SamlLoginAsync(string token, int lcid) {
            this.SamlLoginAsync(token, lcid, null);
        }
        
        /// <remarks/>
        public void SamlLoginAsync(string token, int lcid, object userState) {
            if ((this.SamlLoginOperationCompleted == null)) {
                this.SamlLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSamlLoginOperationCompleted);
            }
            this.InvokeAsync("SamlLogin", new object[] {
                        token,
                        lcid}, this.SamlLoginOperationCompleted, userState);
        }
        
        private void OnSamlLoginOperationCompleted(object arg) {
            if ((this.SamlLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SamlLoginCompleted(this, new SamlLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/LoginV2", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLoginData LoginV2(Credentials applicationCredentials, int lcid, bool useExistingSession) {
            object[] results = this.Invoke("LoginV2", new object[] {
                        applicationCredentials,
                        lcid,
                        useExistingSession});
            return ((CxWSResponseLoginData)(results[0]));
        }
        
        /// <remarks/>
        public void LoginV2Async(Credentials applicationCredentials, int lcid, bool useExistingSession) {
            this.LoginV2Async(applicationCredentials, lcid, useExistingSession, null);
        }
        
        /// <remarks/>
        public void LoginV2Async(Credentials applicationCredentials, int lcid, bool useExistingSession, object userState) {
            if ((this.LoginV2OperationCompleted == null)) {
                this.LoginV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginV2OperationCompleted);
            }
            this.InvokeAsync("LoginV2", new object[] {
                        applicationCredentials,
                        lcid,
                        useExistingSession}, this.LoginV2OperationCompleted, userState);
        }
        
        private void OnLoginV2OperationCompleted(object arg) {
            if ((this.LoginV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginV2Completed(this, new LoginV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SsoLogin", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLoginData SsoLogin(Credentials encryptedCredentials, int lcid) {
            object[] results = this.Invoke("SsoLogin", new object[] {
                        encryptedCredentials,
                        lcid});
            return ((CxWSResponseLoginData)(results[0]));
        }
        
        /// <remarks/>
        public void SsoLoginAsync(Credentials encryptedCredentials, int lcid) {
            this.SsoLoginAsync(encryptedCredentials, lcid, null);
        }
        
        /// <remarks/>
        public void SsoLoginAsync(Credentials encryptedCredentials, int lcid, object userState) {
            if ((this.SsoLoginOperationCompleted == null)) {
                this.SsoLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSsoLoginOperationCompleted);
            }
            this.InvokeAsync("SsoLogin", new object[] {
                        encryptedCredentials,
                        lcid}, this.SsoLoginOperationCompleted, userState);
        }
        
        private void OnSsoLoginOperationCompleted(object arg) {
            if ((this.SsoLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SsoLoginCompleted(this, new SsoLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SsoLoginV2", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLoginData SsoLoginV2(Credentials encryptedCredentials, int lcid, bool useExistingSession) {
            object[] results = this.Invoke("SsoLoginV2", new object[] {
                        encryptedCredentials,
                        lcid,
                        useExistingSession});
            return ((CxWSResponseLoginData)(results[0]));
        }
        
        /// <remarks/>
        public void SsoLoginV2Async(Credentials encryptedCredentials, int lcid, bool useExistingSession) {
            this.SsoLoginV2Async(encryptedCredentials, lcid, useExistingSession, null);
        }
        
        /// <remarks/>
        public void SsoLoginV2Async(Credentials encryptedCredentials, int lcid, bool useExistingSession, object userState) {
            if ((this.SsoLoginV2OperationCompleted == null)) {
                this.SsoLoginV2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSsoLoginV2OperationCompleted);
            }
            this.InvokeAsync("SsoLoginV2", new object[] {
                        encryptedCredentials,
                        lcid,
                        useExistingSession}, this.SsoLoginV2OperationCompleted, userState);
        }
        
        private void OnSsoLoginV2OperationCompleted(object arg) {
            if ((this.SsoLoginV2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SsoLoginV2Completed(this, new SsoLoginV2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/Logout", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse Logout(string sessionID) {
            object[] results = this.Invoke("Logout", new object[] {
                        sessionID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void LogoutAsync(string sessionID) {
            this.LogoutAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(string sessionID, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        sessionID}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/LoginBySID", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseLoginData LoginBySID(string sessionID) {
            object[] results = this.Invoke("LoginBySID", new object[] {
                        sessionID});
            return ((CxWSResponseLoginData)(results[0]));
        }
        
        /// <remarks/>
        public void LoginBySIDAsync(string sessionID) {
            this.LoginBySIDAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void LoginBySIDAsync(string sessionID, object userState) {
            if ((this.LoginBySIDOperationCompleted == null)) {
                this.LoginBySIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginBySIDOperationCompleted);
            }
            this.InvokeAsync("LoginBySID", new object[] {
                        sessionID}, this.LoginBySIDOperationCompleted, userState);
        }
        
        private void OnLoginBySIDOperationCompleted(object arg) {
            if ((this.LoginBySIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginBySIDCompleted(this, new LoginBySIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsFirstLogin", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseBool IsFirstLogin() {
            object[] results = this.Invoke("IsFirstLogin", new object[0]);
            return ((CxWSResponseBool)(results[0]));
        }
        
        /// <remarks/>
        public void IsFirstLoginAsync() {
            this.IsFirstLoginAsync(null);
        }
        
        /// <remarks/>
        public void IsFirstLoginAsync(object userState) {
            if ((this.IsFirstLoginOperationCompleted == null)) {
                this.IsFirstLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsFirstLoginOperationCompleted);
            }
            this.InvokeAsync("IsFirstLogin", new object[0], this.IsFirstLoginOperationCompleted, userState);
        }
        
        private void OnIsFirstLoginOperationCompleted(object arg) {
            if ((this.IsFirstLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsFirstLoginCompleted(this, new IsFirstLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/FirstLogin", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse FirstLogin(string newUsername, string newPassword) {
            object[] results = this.Invoke("FirstLogin", new object[] {
                        newUsername,
                        newPassword});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void FirstLoginAsync(string newUsername, string newPassword) {
            this.FirstLoginAsync(newUsername, newPassword, null);
        }
        
        /// <remarks/>
        public void FirstLoginAsync(string newUsername, string newPassword, object userState) {
            if ((this.FirstLoginOperationCompleted == null)) {
                this.FirstLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFirstLoginOperationCompleted);
            }
            this.InvokeAsync("FirstLogin", new object[] {
                        newUsername,
                        newPassword}, this.FirstLoginOperationCompleted, userState);
        }
        
        private void OnFirstLoginOperationCompleted(object arg) {
            if ((this.FirstLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FirstLoginCompleted(this, new FirstLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAssociatedGroupsList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseGroupList GetAssociatedGroupsList(string SessionID) {
            object[] results = this.Invoke("GetAssociatedGroupsList", new object[] {
                        SessionID});
            return ((CxWSResponseGroupList)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssociatedGroupsListAsync(string SessionID) {
            this.GetAssociatedGroupsListAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void GetAssociatedGroupsListAsync(string SessionID, object userState) {
            if ((this.GetAssociatedGroupsListOperationCompleted == null)) {
                this.GetAssociatedGroupsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssociatedGroupsListOperationCompleted);
            }
            this.InvokeAsync("GetAssociatedGroupsList", new object[] {
                        SessionID}, this.GetAssociatedGroupsListOperationCompleted, userState);
        }
        
        private void OnGetAssociatedGroupsListOperationCompleted(object arg) {
            if ((this.GetAssociatedGroupsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssociatedGroupsListCompleted(this, new GetAssociatedGroupsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetConfigurationSetList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseConfigSetList GetConfigurationSetList(string SessionID) {
            object[] results = this.Invoke("GetConfigurationSetList", new object[] {
                        SessionID});
            return ((CxWSResponseConfigSetList)(results[0]));
        }
        
        /// <remarks/>
        public void GetConfigurationSetListAsync(string SessionID) {
            this.GetConfigurationSetListAsync(SessionID, null);
        }
        
        /// <remarks/>
        public void GetConfigurationSetListAsync(string SessionID, object userState) {
            if ((this.GetConfigurationSetListOperationCompleted == null)) {
                this.GetConfigurationSetListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationSetListOperationCompleted);
            }
            this.InvokeAsync("GetConfigurationSetList", new object[] {
                        SessionID}, this.GetConfigurationSetListOperationCompleted, userState);
        }
        
        private void OnGetConfigurationSetListOperationCompleted(object arg) {
            if ((this.GetConfigurationSetListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationSetListCompleted(this, new GetConfigurationSetListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidProjectName", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse IsValidProjectName(string SessionID, string ProjectName, string GroupId) {
            object[] results = this.Invoke("IsValidProjectName", new object[] {
                        SessionID,
                        ProjectName,
                        GroupId});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidProjectNameAsync(string SessionID, string ProjectName, string GroupId) {
            this.IsValidProjectNameAsync(SessionID, ProjectName, GroupId, null);
        }
        
        /// <remarks/>
        public void IsValidProjectNameAsync(string SessionID, string ProjectName, string GroupId, object userState) {
            if ((this.IsValidProjectNameOperationCompleted == null)) {
                this.IsValidProjectNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidProjectNameOperationCompleted);
            }
            this.InvokeAsync("IsValidProjectName", new object[] {
                        SessionID,
                        ProjectName,
                        GroupId}, this.IsValidProjectNameOperationCompleted, userState);
        }
        
        private void OnIsValidProjectNameOperationCompleted(object arg) {
            if ((this.IsValidProjectNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidProjectNameCompleted(this, new IsValidProjectNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSharedFileSystemLayer", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseFileSystemLayer GetSharedFileSystemLayer(string SessionID, string Path, Credentials UserCredentials) {
            object[] results = this.Invoke("GetSharedFileSystemLayer", new object[] {
                        SessionID,
                        Path,
                        UserCredentials});
            return ((CxWSResponseFileSystemLayer)(results[0]));
        }
        
        /// <remarks/>
        public void GetSharedFileSystemLayerAsync(string SessionID, string Path, Credentials UserCredentials) {
            this.GetSharedFileSystemLayerAsync(SessionID, Path, UserCredentials, null);
        }
        
        /// <remarks/>
        public void GetSharedFileSystemLayerAsync(string SessionID, string Path, Credentials UserCredentials, object userState) {
            if ((this.GetSharedFileSystemLayerOperationCompleted == null)) {
                this.GetSharedFileSystemLayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedFileSystemLayerOperationCompleted);
            }
            this.InvokeAsync("GetSharedFileSystemLayer", new object[] {
                        SessionID,
                        Path,
                        UserCredentials}, this.GetSharedFileSystemLayerOperationCompleted, userState);
        }
        
        private void OnGetSharedFileSystemLayerOperationCompleted(object arg) {
            if ((this.GetSharedFileSystemLayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedFileSystemLayerCompleted(this, new GetSharedFileSystemLayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetRepositoryFileSystemLayer", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseFileSystemLayer GetRepositoryFileSystemLayer(string SessionID, string Path, SourceControlSettings SourceControlSettings) {
            object[] results = this.Invoke("GetRepositoryFileSystemLayer", new object[] {
                        SessionID,
                        Path,
                        SourceControlSettings});
            return ((CxWSResponseFileSystemLayer)(results[0]));
        }
        
        /// <remarks/>
        public void GetRepositoryFileSystemLayerAsync(string SessionID, string Path, SourceControlSettings SourceControlSettings) {
            this.GetRepositoryFileSystemLayerAsync(SessionID, Path, SourceControlSettings, null);
        }
        
        /// <remarks/>
        public void GetRepositoryFileSystemLayerAsync(string SessionID, string Path, SourceControlSettings SourceControlSettings, object userState) {
            if ((this.GetRepositoryFileSystemLayerOperationCompleted == null)) {
                this.GetRepositoryFileSystemLayerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRepositoryFileSystemLayerOperationCompleted);
            }
            this.InvokeAsync("GetRepositoryFileSystemLayer", new object[] {
                        SessionID,
                        Path,
                        SourceControlSettings}, this.GetRepositoryFileSystemLayerOperationCompleted, userState);
        }
        
        private void OnGetRepositoryFileSystemLayerOperationCompleted(object arg) {
            if ((this.GetRepositoryFileSystemLayerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRepositoryFileSystemLayerCompleted(this, new GetRepositoryFileSystemLayerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSourceControlActionList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSourceActionList GetSourceControlActionList(string SessionID, string teamId) {
            object[] results = this.Invoke("GetSourceControlActionList", new object[] {
                        SessionID,
                        teamId});
            return ((CxWSResponseSourceActionList)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceControlActionListAsync(string SessionID, string teamId) {
            this.GetSourceControlActionListAsync(SessionID, teamId, null);
        }
        
        /// <remarks/>
        public void GetSourceControlActionListAsync(string SessionID, string teamId, object userState) {
            if ((this.GetSourceControlActionListOperationCompleted == null)) {
                this.GetSourceControlActionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceControlActionListOperationCompleted);
            }
            this.InvokeAsync("GetSourceControlActionList", new object[] {
                        SessionID,
                        teamId}, this.GetSourceControlActionListOperationCompleted, userState);
        }
        
        private void OnGetSourceControlActionListOperationCompleted(object arg) {
            if ((this.GetSourceControlActionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceControlActionListCompleted(this, new GetSourceControlActionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPostScanActionList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSourceActionList GetPostScanActionList(string SessionID, string teamId) {
            object[] results = this.Invoke("GetPostScanActionList", new object[] {
                        SessionID,
                        teamId});
            return ((CxWSResponseSourceActionList)(results[0]));
        }
        
        /// <remarks/>
        public void GetPostScanActionListAsync(string SessionID, string teamId) {
            this.GetPostScanActionListAsync(SessionID, teamId, null);
        }
        
        /// <remarks/>
        public void GetPostScanActionListAsync(string SessionID, string teamId, object userState) {
            if ((this.GetPostScanActionListOperationCompleted == null)) {
                this.GetPostScanActionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPostScanActionListOperationCompleted);
            }
            this.InvokeAsync("GetPostScanActionList", new object[] {
                        SessionID,
                        teamId}, this.GetPostScanActionListOperationCompleted, userState);
        }
        
        private void OnGetPostScanActionListOperationCompleted(object arg) {
            if ((this.GetPostScanActionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPostScanActionListCompleted(this, new GetPostScanActionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewProject", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseRunID CreateNewProject(string SessionID, ProjectConfiguration Project) {
            object[] results = this.Invoke("CreateNewProject", new object[] {
                        SessionID,
                        Project});
            return ((CxWSResponseRunID)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewProjectAsync(string SessionID, ProjectConfiguration Project) {
            this.CreateNewProjectAsync(SessionID, Project, null);
        }
        
        /// <remarks/>
        public void CreateNewProjectAsync(string SessionID, ProjectConfiguration Project, object userState) {
            if ((this.CreateNewProjectOperationCompleted == null)) {
                this.CreateNewProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewProjectOperationCompleted);
            }
            this.InvokeAsync("CreateNewProject", new object[] {
                        SessionID,
                        Project}, this.CreateNewProjectOperationCompleted, userState);
        }
        
        private void OnCreateNewProjectOperationCompleted(object arg) {
            if ((this.CreateNewProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewProjectCompleted(this, new CreateNewProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateAndRunProject", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseRunID CreateAndRunProject(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers) {
            object[] results = this.Invoke("CreateAndRunProject", new object[] {
                        SessionID,
                        ProjectSettings,
                        LocalCodeContainer,
                        visibleToOtherUsers});
            return ((CxWSResponseRunID)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAndRunProjectAsync(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers) {
            this.CreateAndRunProjectAsync(SessionID, ProjectSettings, LocalCodeContainer, visibleToOtherUsers, null);
        }
        
        /// <remarks/>
        public void CreateAndRunProjectAsync(string SessionID, ProjectSettings ProjectSettings, LocalCodeContainer LocalCodeContainer, bool visibleToOtherUsers, object userState) {
            if ((this.CreateAndRunProjectOperationCompleted == null)) {
                this.CreateAndRunProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAndRunProjectOperationCompleted);
            }
            this.InvokeAsync("CreateAndRunProject", new object[] {
                        SessionID,
                        ProjectSettings,
                        LocalCodeContainer,
                        visibleToOtherUsers}, this.CreateAndRunProjectOperationCompleted, userState);
        }
        
        private void OnCreateAndRunProjectOperationCompleted(object arg) {
            if ((this.CreateAndRunProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAndRunProjectCompleted(this, new CreateAndRunProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RunScanAndAddToProject", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseRunID RunScanAndAddToProject(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers) {
            object[] results = this.Invoke("RunScanAndAddToProject", new object[] {
                        sessionId,
                        projectSettings,
                        localCodeContainer,
                        visibleToUtherUsers});
            return ((CxWSResponseRunID)(results[0]));
        }
        
        /// <remarks/>
        public void RunScanAndAddToProjectAsync(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers) {
            this.RunScanAndAddToProjectAsync(sessionId, projectSettings, localCodeContainer, visibleToUtherUsers, null);
        }
        
        /// <remarks/>
        public void RunScanAndAddToProjectAsync(string sessionId, ProjectSettings projectSettings, LocalCodeContainer localCodeContainer, bool visibleToUtherUsers, object userState) {
            if ((this.RunScanAndAddToProjectOperationCompleted == null)) {
                this.RunScanAndAddToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunScanAndAddToProjectOperationCompleted);
            }
            this.InvokeAsync("RunScanAndAddToProject", new object[] {
                        sessionId,
                        projectSettings,
                        localCodeContainer,
                        visibleToUtherUsers}, this.RunScanAndAddToProjectOperationCompleted, userState);
        }
        
        private void OnRunScanAndAddToProjectOperationCompleted(object arg) {
            if ((this.RunScanAndAddToProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunScanAndAddToProjectCompleted(this, new RunScanAndAddToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CountLines", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseCountLines CountLines(string sessionId, LocalCodeContainer localCodeContainer) {
            object[] results = this.Invoke("CountLines", new object[] {
                        sessionId,
                        localCodeContainer});
            return ((CxWSResponseCountLines)(results[0]));
        }
        
        /// <remarks/>
        public void CountLinesAsync(string sessionId, LocalCodeContainer localCodeContainer) {
            this.CountLinesAsync(sessionId, localCodeContainer, null);
        }
        
        /// <remarks/>
        public void CountLinesAsync(string sessionId, LocalCodeContainer localCodeContainer, object userState) {
            if ((this.CountLinesOperationCompleted == null)) {
                this.CountLinesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountLinesOperationCompleted);
            }
            this.InvokeAsync("CountLines", new object[] {
                        sessionId,
                        localCodeContainer}, this.CountLinesOperationCompleted, userState);
        }
        
        private void OnCountLinesOperationCompleted(object arg) {
            if ((this.CountLinesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountLinesCompleted(this, new CountLinesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScansStatuses", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseExtendedScanStatusArray GetScansStatuses(string sessionID) {
            object[] results = this.Invoke("GetScansStatuses", new object[] {
                        sessionID});
            return ((CxWSResponseExtendedScanStatusArray)(results[0]));
        }
        
        /// <remarks/>
        public void GetScansStatusesAsync(string sessionID) {
            this.GetScansStatusesAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetScansStatusesAsync(string sessionID, object userState) {
            if ((this.GetScansStatusesOperationCompleted == null)) {
                this.GetScansStatusesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScansStatusesOperationCompleted);
            }
            this.InvokeAsync("GetScansStatuses", new object[] {
                        sessionID}, this.GetScansStatusesOperationCompleted, userState);
        }
        
        private void OnGetScansStatusesOperationCompleted(object arg) {
            if ((this.GetScansStatusesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScansStatusesCompleted(this, new GetScansStatusesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetStatusOfSingleScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseExtendedScanStatus GetStatusOfSingleScan(string sessionID, string runId) {
            object[] results = this.Invoke("GetStatusOfSingleScan", new object[] {
                        sessionID,
                        runId});
            return ((CxWSResponseExtendedScanStatus)(results[0]));
        }
        
        /// <remarks/>
        public void GetStatusOfSingleScanAsync(string sessionID, string runId) {
            this.GetStatusOfSingleScanAsync(sessionID, runId, null);
        }
        
        /// <remarks/>
        public void GetStatusOfSingleScanAsync(string sessionID, string runId, object userState) {
            if ((this.GetStatusOfSingleScanOperationCompleted == null)) {
                this.GetStatusOfSingleScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStatusOfSingleScanOperationCompleted);
            }
            this.InvokeAsync("GetStatusOfSingleScan", new object[] {
                        sessionID,
                        runId}, this.GetStatusOfSingleScanOperationCompleted, userState);
        }
        
        private void OnGetStatusOfSingleScanOperationCompleted(object arg) {
            if ((this.GetStatusOfSingleScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStatusOfSingleScanCompleted(this, new GetStatusOfSingleScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/PostponeScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseQueueRunID PostponeScan(string sessionID, string RunId) {
            object[] results = this.Invoke("PostponeScan", new object[] {
                        sessionID,
                        RunId});
            return ((CxWSResponseQueueRunID)(results[0]));
        }
        
        /// <remarks/>
        public void PostponeScanAsync(string sessionID, string RunId) {
            this.PostponeScanAsync(sessionID, RunId, null);
        }
        
        /// <remarks/>
        public void PostponeScanAsync(string sessionID, string RunId, object userState) {
            if ((this.PostponeScanOperationCompleted == null)) {
                this.PostponeScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostponeScanOperationCompleted);
            }
            this.InvokeAsync("PostponeScan", new object[] {
                        sessionID,
                        RunId}, this.PostponeScanOperationCompleted, userState);
        }
        
        private void OnPostponeScanOperationCompleted(object arg) {
            if ((this.PostponeScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostponeScanCompleted(this, new PostponeScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CancelScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse CancelScan(string sessionID, string RunId) {
            object[] results = this.Invoke("CancelScan", new object[] {
                        sessionID,
                        RunId});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void CancelScanAsync(string sessionID, string RunId) {
            this.CancelScanAsync(sessionID, RunId, null);
        }
        
        /// <remarks/>
        public void CancelScanAsync(string sessionID, string RunId, object userState) {
            if ((this.CancelScanOperationCompleted == null)) {
                this.CancelScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelScanOperationCompleted);
            }
            this.InvokeAsync("CancelScan", new object[] {
                        sessionID,
                        RunId}, this.CancelScanOperationCompleted, userState);
        }
        
        private void OnCancelScanOperationCompleted(object arg) {
            if ((this.CancelScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelScanCompleted(this, new CancelScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateProjectUserCredentials", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateProjectUserCredentials(string sessionID, long projectID, Credentials credentials) {
            object[] results = this.Invoke("UpdateProjectUserCredentials", new object[] {
                        sessionID,
                        projectID,
                        credentials});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateProjectUserCredentialsAsync(string sessionID, long projectID, Credentials credentials) {
            this.UpdateProjectUserCredentialsAsync(sessionID, projectID, credentials, null);
        }
        
        /// <remarks/>
        public void UpdateProjectUserCredentialsAsync(string sessionID, long projectID, Credentials credentials, object userState) {
            if ((this.UpdateProjectUserCredentialsOperationCompleted == null)) {
                this.UpdateProjectUserCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectUserCredentialsOperationCompleted);
            }
            this.InvokeAsync("UpdateProjectUserCredentials", new object[] {
                        sessionID,
                        projectID,
                        credentials}, this.UpdateProjectUserCredentialsOperationCompleted, userState);
        }
        
        private void OnUpdateProjectUserCredentialsOperationCompleted(object arg) {
            if ((this.UpdateProjectUserCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProjectUserCredentialsCompleted(this, new UpdateProjectUserCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectsWithUserCredentials", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseProjectsData GetProjectsWithUserCredentials(string sessionID, string username) {
            object[] results = this.Invoke("GetProjectsWithUserCredentials", new object[] {
                        sessionID,
                        username});
            return ((CxWSResponseProjectsData)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectsWithUserCredentialsAsync(string sessionID, string username) {
            this.GetProjectsWithUserCredentialsAsync(sessionID, username, null);
        }
        
        /// <remarks/>
        public void GetProjectsWithUserCredentialsAsync(string sessionID, string username, object userState) {
            if ((this.GetProjectsWithUserCredentialsOperationCompleted == null)) {
                this.GetProjectsWithUserCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsWithUserCredentialsOperationCompleted);
            }
            this.InvokeAsync("GetProjectsWithUserCredentials", new object[] {
                        sessionID,
                        username}, this.GetProjectsWithUserCredentialsOperationCompleted, userState);
        }
        
        private void OnGetProjectsWithUserCredentialsOperationCompleted(object arg) {
            if ((this.GetProjectsWithUserCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectsWithUserCredentialsCompleted(this, new GetProjectsWithUserCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectsCredentialUsers", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseNameList GetProjectsCredentialUsers(string sessionID) {
            object[] results = this.Invoke("GetProjectsCredentialUsers", new object[] {
                        sessionID});
            return ((CxWSResponseNameList)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectsCredentialUsersAsync(string sessionID) {
            this.GetProjectsCredentialUsersAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetProjectsCredentialUsersAsync(string sessionID, object userState) {
            if ((this.GetProjectsCredentialUsersOperationCompleted == null)) {
                this.GetProjectsCredentialUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsCredentialUsersOperationCompleted);
            }
            this.InvokeAsync("GetProjectsCredentialUsers", new object[] {
                        sessionID}, this.GetProjectsCredentialUsersOperationCompleted, userState);
        }
        
        private void OnGetProjectsCredentialUsersOperationCompleted(object arg) {
            if ((this.GetProjectsCredentialUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectsCredentialUsersCompleted(this, new GetProjectsCredentialUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectsDisplayData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseProjectsDisplayData GetProjectsDisplayData(string sessionID) {
            object[] results = this.Invoke("GetProjectsDisplayData", new object[] {
                        sessionID});
            return ((CxWSResponseProjectsDisplayData)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectsDisplayDataAsync(string sessionID) {
            this.GetProjectsDisplayDataAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetProjectsDisplayDataAsync(string sessionID, object userState) {
            if ((this.GetProjectsDisplayDataOperationCompleted == null)) {
                this.GetProjectsDisplayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectsDisplayDataOperationCompleted);
            }
            this.InvokeAsync("GetProjectsDisplayData", new object[] {
                        sessionID}, this.GetProjectsDisplayDataOperationCompleted, userState);
        }
        
        private void OnGetProjectsDisplayDataOperationCompleted(object arg) {
            if ((this.GetProjectsDisplayDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectsDisplayDataCompleted(this, new GetProjectsDisplayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RunProjectImmediately", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse RunProjectImmediately(string sessionID, long projectID) {
            object[] results = this.Invoke("RunProjectImmediately", new object[] {
                        sessionID,
                        projectID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void RunProjectImmediatelyAsync(string sessionID, long projectID) {
            this.RunProjectImmediatelyAsync(sessionID, projectID, null);
        }
        
        /// <remarks/>
        public void RunProjectImmediatelyAsync(string sessionID, long projectID, object userState) {
            if ((this.RunProjectImmediatelyOperationCompleted == null)) {
                this.RunProjectImmediatelyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunProjectImmediatelyOperationCompleted);
            }
            this.InvokeAsync("RunProjectImmediately", new object[] {
                        sessionID,
                        projectID}, this.RunProjectImmediatelyOperationCompleted, userState);
        }
        
        private void OnRunProjectImmediatelyOperationCompleted(object arg) {
            if ((this.RunProjectImmediatelyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunProjectImmediatelyCompleted(this, new RunProjectImmediatelyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RunProjectIncrementally", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse RunProjectIncrementally(string sessionID, long projectID) {
            object[] results = this.Invoke("RunProjectIncrementally", new object[] {
                        sessionID,
                        projectID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void RunProjectIncrementallyAsync(string sessionID, long projectID) {
            this.RunProjectIncrementallyAsync(sessionID, projectID, null);
        }
        
        /// <remarks/>
        public void RunProjectIncrementallyAsync(string sessionID, long projectID, object userState) {
            if ((this.RunProjectIncrementallyOperationCompleted == null)) {
                this.RunProjectIncrementallyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunProjectIncrementallyOperationCompleted);
            }
            this.InvokeAsync("RunProjectIncrementally", new object[] {
                        sessionID,
                        projectID}, this.RunProjectIncrementallyOperationCompleted, userState);
        }
        
        private void OnRunProjectIncrementallyOperationCompleted(object arg) {
            if ((this.RunProjectIncrementallyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunProjectIncrementallyCompleted(this, new RunProjectIncrementallyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteProject", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeleteProject(string sessionID, long projectID) {
            object[] results = this.Invoke("DeleteProject", new object[] {
                        sessionID,
                        projectID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProjectAsync(string sessionID, long projectID) {
            this.DeleteProjectAsync(sessionID, projectID, null);
        }
        
        /// <remarks/>
        public void DeleteProjectAsync(string sessionID, long projectID, object userState) {
            if ((this.DeleteProjectOperationCompleted == null)) {
                this.DeleteProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProjectOperationCompleted);
            }
            this.InvokeAsync("DeleteProject", new object[] {
                        sessionID,
                        projectID}, this.DeleteProjectOperationCompleted, userState);
        }
        
        private void OnDeleteProjectOperationCompleted(object arg) {
            if ((this.DeleteProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProjectCompleted(this, new DeleteProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectConfiguration", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseProjectConfig GetProjectConfiguration(string sessionID, long projectID) {
            object[] results = this.Invoke("GetProjectConfiguration", new object[] {
                        sessionID,
                        projectID});
            return ((CxWSResponseProjectConfig)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectConfigurationAsync(string sessionID, long projectID) {
            this.GetProjectConfigurationAsync(sessionID, projectID, null);
        }
        
        /// <remarks/>
        public void GetProjectConfigurationAsync(string sessionID, long projectID, object userState) {
            if ((this.GetProjectConfigurationOperationCompleted == null)) {
                this.GetProjectConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetProjectConfiguration", new object[] {
                        sessionID,
                        projectID}, this.GetProjectConfigurationOperationCompleted, userState);
        }
        
        private void OnGetProjectConfigurationOperationCompleted(object arg) {
            if ((this.GetProjectConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectConfigurationCompleted(this, new GetProjectConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectProperties", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsProjectProperties GetProjectProperties(string sessionID, long projectID, ScanType scanType) {
            object[] results = this.Invoke("GetProjectProperties", new object[] {
                        sessionID,
                        projectID,
                        scanType});
            return ((CxWSResponsProjectProperties)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectPropertiesAsync(string sessionID, long projectID, ScanType scanType) {
            this.GetProjectPropertiesAsync(sessionID, projectID, scanType, null);
        }
        
        /// <remarks/>
        public void GetProjectPropertiesAsync(string sessionID, long projectID, ScanType scanType, object userState) {
            if ((this.GetProjectPropertiesOperationCompleted == null)) {
                this.GetProjectPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetProjectProperties", new object[] {
                        sessionID,
                        projectID,
                        scanType}, this.GetProjectPropertiesOperationCompleted, userState);
        }
        
        private void OnGetProjectPropertiesOperationCompleted(object arg) {
            if ((this.GetProjectPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectPropertiesCompleted(this, new GetProjectPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateProjectConfiguration", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateProjectConfiguration(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
            object[] results = this.Invoke("UpdateProjectConfiguration", new object[] {
                        sessionID,
                        projectID,
                        projectConfiguration});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateProjectConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
            this.UpdateProjectConfigurationAsync(sessionID, projectID, projectConfiguration, null);
        }
        
        /// <remarks/>
        public void UpdateProjectConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration, object userState) {
            if ((this.UpdateProjectConfigurationOperationCompleted == null)) {
                this.UpdateProjectConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectConfigurationOperationCompleted);
            }
            this.InvokeAsync("UpdateProjectConfiguration", new object[] {
                        sessionID,
                        projectID,
                        projectConfiguration}, this.UpdateProjectConfigurationOperationCompleted, userState);
        }
        
        private void OnUpdateProjectConfigurationOperationCompleted(object arg) {
            if ((this.UpdateProjectConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProjectConfigurationCompleted(this, new UpdateProjectConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateProjectIncrementalConfiguration", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateProjectIncrementalConfiguration(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
            object[] results = this.Invoke("UpdateProjectIncrementalConfiguration", new object[] {
                        sessionID,
                        projectID,
                        projectConfiguration});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateProjectIncrementalConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration) {
            this.UpdateProjectIncrementalConfigurationAsync(sessionID, projectID, projectConfiguration, null);
        }
        
        /// <remarks/>
        public void UpdateProjectIncrementalConfigurationAsync(string sessionID, long projectID, ProjectConfiguration projectConfiguration, object userState) {
            if ((this.UpdateProjectIncrementalConfigurationOperationCompleted == null)) {
                this.UpdateProjectIncrementalConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateProjectIncrementalConfigurationOperationCompleted);
            }
            this.InvokeAsync("UpdateProjectIncrementalConfiguration", new object[] {
                        sessionID,
                        projectID,
                        projectConfiguration}, this.UpdateProjectIncrementalConfigurationOperationCompleted, userState);
        }
        
        private void OnUpdateProjectIncrementalConfigurationOperationCompleted(object arg) {
            if ((this.UpdateProjectIncrementalConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateProjectIncrementalConfigurationCompleted(this, new UpdateProjectIncrementalConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectCharts", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsProjectChartData GetProjectCharts(string sessionID, long projectID, ScanType scanType) {
            object[] results = this.Invoke("GetProjectCharts", new object[] {
                        sessionID,
                        projectID,
                        scanType});
            return ((CxWSResponsProjectChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectChartsAsync(string sessionID, long projectID, ScanType scanType) {
            this.GetProjectChartsAsync(sessionID, projectID, scanType, null);
        }
        
        /// <remarks/>
        public void GetProjectChartsAsync(string sessionID, long projectID, ScanType scanType, object userState) {
            if ((this.GetProjectChartsOperationCompleted == null)) {
                this.GetProjectChartsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectChartsOperationCompleted);
            }
            this.InvokeAsync("GetProjectCharts", new object[] {
                        sessionID,
                        projectID,
                        scanType}, this.GetProjectChartsOperationCompleted, userState);
        }
        
        private void OnGetProjectChartsOperationCompleted(object arg) {
            if ((this.GetProjectChartsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectChartsCompleted(this, new GetProjectChartsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetFalsePositiveFlag", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SetFalsePositiveFlag(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag) {
            object[] results = this.Invoke("SetFalsePositiveFlag", new object[] {
                        sessionID,
                        ResultId,
                        PathId,
                        projectId,
                        falsePositiveFlag});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SetFalsePositiveFlagAsync(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag) {
            this.SetFalsePositiveFlagAsync(sessionID, ResultId, PathId, projectId, falsePositiveFlag, null);
        }
        
        /// <remarks/>
        public void SetFalsePositiveFlagAsync(string sessionID, long ResultId, long PathId, long projectId, bool falsePositiveFlag, object userState) {
            if ((this.SetFalsePositiveFlagOperationCompleted == null)) {
                this.SetFalsePositiveFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFalsePositiveFlagOperationCompleted);
            }
            this.InvokeAsync("SetFalsePositiveFlag", new object[] {
                        sessionID,
                        ResultId,
                        PathId,
                        projectId,
                        falsePositiveFlag}, this.SetFalsePositiveFlagOperationCompleted, userState);
        }
        
        private void OnSetFalsePositiveFlagOperationCompleted(object arg) {
            if ((this.SetFalsePositiveFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFalsePositiveFlagCompleted(this, new SetFalsePositiveFlagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateResultComment", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateResultComment(string sessionID, long ResultId, long PathId, long projectId, string comment) {
            object[] results = this.Invoke("UpdateResultComment", new object[] {
                        sessionID,
                        ResultId,
                        PathId,
                        projectId,
                        comment});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateResultCommentAsync(string sessionID, long ResultId, long PathId, long projectId, string comment) {
            this.UpdateResultCommentAsync(sessionID, ResultId, PathId, projectId, comment, null);
        }
        
        /// <remarks/>
        public void UpdateResultCommentAsync(string sessionID, long ResultId, long PathId, long projectId, string comment, object userState) {
            if ((this.UpdateResultCommentOperationCompleted == null)) {
                this.UpdateResultCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateResultCommentOperationCompleted);
            }
            this.InvokeAsync("UpdateResultComment", new object[] {
                        sessionID,
                        ResultId,
                        PathId,
                        projectId,
                        comment}, this.UpdateResultCommentOperationCompleted, userState);
        }
        
        private void OnUpdateResultCommentOperationCompleted(object arg) {
            if ((this.UpdateResultCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateResultCommentCompleted(this, new UpdateResultCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateResultState", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateResultState(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data) {
            object[] results = this.Invoke("UpdateResultState", new object[] {
                        sessionID,
                        scanId,
                        PathId,
                        projectId,
                        Remarks,
                        ResultLabelType,
                        data});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateResultStateAsync(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data) {
            this.UpdateResultStateAsync(sessionID, scanId, PathId, projectId, Remarks, ResultLabelType, data, null);
        }
        
        /// <remarks/>
        public void UpdateResultStateAsync(string sessionID, long scanId, long PathId, long projectId, string Remarks, int ResultLabelType, string data, object userState) {
            if ((this.UpdateResultStateOperationCompleted == null)) {
                this.UpdateResultStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateResultStateOperationCompleted);
            }
            this.InvokeAsync("UpdateResultState", new object[] {
                        sessionID,
                        scanId,
                        PathId,
                        projectId,
                        Remarks,
                        ResultLabelType,
                        data}, this.UpdateResultStateOperationCompleted, userState);
        }
        
        private void OnUpdateResultStateOperationCompleted(object arg) {
            if ((this.UpdateResultStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateResultStateCompleted(this, new UpdateResultStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateSetOfResultState", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateSetOfResultState(string sessionID, ResultStateData[] resultsStates) {
            object[] results = this.Invoke("UpdateSetOfResultState", new object[] {
                        sessionID,
                        resultsStates});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSetOfResultStateAsync(string sessionID, ResultStateData[] resultsStates) {
            this.UpdateSetOfResultStateAsync(sessionID, resultsStates, null);
        }
        
        /// <remarks/>
        public void UpdateSetOfResultStateAsync(string sessionID, ResultStateData[] resultsStates, object userState) {
            if ((this.UpdateSetOfResultStateOperationCompleted == null)) {
                this.UpdateSetOfResultStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSetOfResultStateOperationCompleted);
            }
            this.InvokeAsync("UpdateSetOfResultState", new object[] {
                        sessionID,
                        resultsStates}, this.UpdateSetOfResultStateOperationCompleted, userState);
        }
        
        private void OnUpdateSetOfResultStateOperationCompleted(object arg) {
            if ((this.UpdateSetOfResultStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSetOfResultStateCompleted(this, new UpdateSetOfResultStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateSetOfResultStateInfluenceCheck", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseResultStateUpdate UpdateSetOfResultStateInfluenceCheck(string sessionID, ResultStateData[] resultsStates, bool checkPathInfluence) {
            object[] results = this.Invoke("UpdateSetOfResultStateInfluenceCheck", new object[] {
                        sessionID,
                        resultsStates,
                        checkPathInfluence});
            return ((CxWSResponseResultStateUpdate)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSetOfResultStateInfluenceCheckAsync(string sessionID, ResultStateData[] resultsStates, bool checkPathInfluence) {
            this.UpdateSetOfResultStateInfluenceCheckAsync(sessionID, resultsStates, checkPathInfluence, null);
        }
        
        /// <remarks/>
        public void UpdateSetOfResultStateInfluenceCheckAsync(string sessionID, ResultStateData[] resultsStates, bool checkPathInfluence, object userState) {
            if ((this.UpdateSetOfResultStateInfluenceCheckOperationCompleted == null)) {
                this.UpdateSetOfResultStateInfluenceCheckOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSetOfResultStateInfluenceCheckOperationCompleted);
            }
            this.InvokeAsync("UpdateSetOfResultStateInfluenceCheck", new object[] {
                        sessionID,
                        resultsStates,
                        checkPathInfluence}, this.UpdateSetOfResultStateInfluenceCheckOperationCompleted, userState);
        }
        
        private void OnUpdateSetOfResultStateInfluenceCheckOperationCompleted(object arg) {
            if ((this.UpdateSetOfResultStateInfluenceCheckCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSetOfResultStateInfluenceCheckCompleted(this, new UpdateSetOfResultStateInfluenceCheckCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/BranchProject", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseRunID BranchProject(string SessionID, ProjectConfiguration Project, long originalProjectId) {
            object[] results = this.Invoke("BranchProject", new object[] {
                        SessionID,
                        Project,
                        originalProjectId});
            return ((CxWSResponseRunID)(results[0]));
        }
        
        /// <remarks/>
        public void BranchProjectAsync(string SessionID, ProjectConfiguration Project, long originalProjectId) {
            this.BranchProjectAsync(SessionID, Project, originalProjectId, null);
        }
        
        /// <remarks/>
        public void BranchProjectAsync(string SessionID, ProjectConfiguration Project, long originalProjectId, object userState) {
            if ((this.BranchProjectOperationCompleted == null)) {
                this.BranchProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBranchProjectOperationCompleted);
            }
            this.InvokeAsync("BranchProject", new object[] {
                        SessionID,
                        Project,
                        originalProjectId}, this.BranchProjectOperationCompleted, userState);
        }
        
        private void OnBranchProjectOperationCompleted(object arg) {
            if ((this.BranchProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BranchProjectCompleted(this, new BranchProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetProjectBranchingStatus", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSProjectBranchingStatusResponse GetProjectBranchingStatus(string SessionID, long BranchedProjectID) {
            object[] results = this.Invoke("GetProjectBranchingStatus", new object[] {
                        SessionID,
                        BranchedProjectID});
            return ((CxWSProjectBranchingStatusResponse)(results[0]));
        }
        
        /// <remarks/>
        public void GetProjectBranchingStatusAsync(string SessionID, long BranchedProjectID) {
            this.GetProjectBranchingStatusAsync(SessionID, BranchedProjectID, null);
        }
        
        /// <remarks/>
        public void GetProjectBranchingStatusAsync(string SessionID, long BranchedProjectID, object userState) {
            if ((this.GetProjectBranchingStatusOperationCompleted == null)) {
                this.GetProjectBranchingStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProjectBranchingStatusOperationCompleted);
            }
            this.InvokeAsync("GetProjectBranchingStatus", new object[] {
                        SessionID,
                        BranchedProjectID}, this.GetProjectBranchingStatusOperationCompleted, userState);
        }
        
        private void OnGetProjectBranchingStatusOperationCompleted(object arg) {
            if ((this.GetProjectBranchingStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProjectBranchingStatusCompleted(this, new GetProjectBranchingStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteProjects", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseDeleteProjects DeleteProjects(CxWSRequestDeleteProjects request) {
            object[] results = this.Invoke("DeleteProjects", new object[] {
                        request});
            return ((CxWSResponseDeleteProjects)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteProjectsAsync(CxWSRequestDeleteProjects request) {
            this.DeleteProjectsAsync(request, null);
        }
        
        /// <remarks/>
        public void DeleteProjectsAsync(CxWSRequestDeleteProjects request, object userState) {
            if ((this.DeleteProjectsOperationCompleted == null)) {
                this.DeleteProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProjectsOperationCompleted);
            }
            this.InvokeAsync("DeleteProjects", new object[] {
                        request}, this.DeleteProjectsOperationCompleted, userState);
        }
        
        private void OnDeleteProjectsOperationCompleted(object arg) {
            if ((this.DeleteProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProjectsCompleted(this, new DeleteProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RunScanWithExistingProject", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseRunID RunScanWithExistingProject(string sessionId, string projectName) {
            object[] results = this.Invoke("RunScanWithExistingProject", new object[] {
                        sessionId,
                        projectName});
            return ((CxWSResponseRunID)(results[0]));
        }
        
        /// <remarks/>
        public void RunScanWithExistingProjectAsync(string sessionId, string projectName) {
            this.RunScanWithExistingProjectAsync(sessionId, projectName, null);
        }
        
        /// <remarks/>
        public void RunScanWithExistingProjectAsync(string sessionId, string projectName, object userState) {
            if ((this.RunScanWithExistingProjectOperationCompleted == null)) {
                this.RunScanWithExistingProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunScanWithExistingProjectOperationCompleted);
            }
            this.InvokeAsync("RunScanWithExistingProject", new object[] {
                        sessionId,
                        projectName}, this.RunScanWithExistingProjectOperationCompleted, userState);
        }
        
        private void OnRunScanWithExistingProjectOperationCompleted(object arg) {
            if ((this.RunScanWithExistingProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunScanWithExistingProjectCompleted(this, new RunScanWithExistingProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScansDisplayData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseScansDisplayData GetScansDisplayData(string sessionID, long projectID) {
            object[] results = this.Invoke("GetScansDisplayData", new object[] {
                        sessionID,
                        projectID});
            return ((CxWSResponseScansDisplayData)(results[0]));
        }
        
        /// <remarks/>
        public void GetScansDisplayDataAsync(string sessionID, long projectID) {
            this.GetScansDisplayDataAsync(sessionID, projectID, null);
        }
        
        /// <remarks/>
        public void GetScansDisplayDataAsync(string sessionID, long projectID, object userState) {
            if ((this.GetScansDisplayDataOperationCompleted == null)) {
                this.GetScansDisplayDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScansDisplayDataOperationCompleted);
            }
            this.InvokeAsync("GetScansDisplayData", new object[] {
                        sessionID,
                        projectID}, this.GetScansDisplayDataOperationCompleted, userState);
        }
        
        private void OnGetScansDisplayDataOperationCompleted(object arg) {
            if ((this.GetScansDisplayDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScansDisplayDataCompleted(this, new GetScansDisplayDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeleteScan(string sessionID, long ScanID) {
            object[] results = this.Invoke("DeleteScan", new object[] {
                        sessionID,
                        ScanID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteScanAsync(string sessionID, long ScanID) {
            this.DeleteScanAsync(sessionID, ScanID, null);
        }
        
        /// <remarks/>
        public void DeleteScanAsync(string sessionID, long ScanID, object userState) {
            if ((this.DeleteScanOperationCompleted == null)) {
                this.DeleteScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScanOperationCompleted);
            }
            this.InvokeAsync("DeleteScan", new object[] {
                        sessionID,
                        ScanID}, this.DeleteScanOperationCompleted, userState);
        }
        
        private void OnDeleteScanOperationCompleted(object arg) {
            if ((this.DeleteScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteScanCompleted(this, new DeleteScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanProperties", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseScanProperties GetScanProperties(string sessionID, long ScanID) {
            object[] results = this.Invoke("GetScanProperties", new object[] {
                        sessionID,
                        ScanID});
            return ((CxWSResponseScanProperties)(results[0]));
        }
        
        /// <remarks/>
        public void GetScanPropertiesAsync(string sessionID, long ScanID) {
            this.GetScanPropertiesAsync(sessionID, ScanID, null);
        }
        
        /// <remarks/>
        public void GetScanPropertiesAsync(string sessionID, long ScanID, object userState) {
            if ((this.GetScanPropertiesOperationCompleted == null)) {
                this.GetScanPropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanPropertiesOperationCompleted);
            }
            this.InvokeAsync("GetScanProperties", new object[] {
                        sessionID,
                        ScanID}, this.GetScanPropertiesOperationCompleted, userState);
        }
        
        private void OnGetScanPropertiesOperationCompleted(object arg) {
            if ((this.GetScanPropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScanPropertiesCompleted(this, new GetScanPropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateScanComment", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateScanComment(string sessionID, long ScanID, string Comment) {
            object[] results = this.Invoke("UpdateScanComment", new object[] {
                        sessionID,
                        ScanID,
                        Comment});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateScanCommentAsync(string sessionID, long ScanID, string Comment) {
            this.UpdateScanCommentAsync(sessionID, ScanID, Comment, null);
        }
        
        /// <remarks/>
        public void UpdateScanCommentAsync(string sessionID, long ScanID, string Comment, object userState) {
            if ((this.UpdateScanCommentOperationCompleted == null)) {
                this.UpdateScanCommentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateScanCommentOperationCompleted);
            }
            this.InvokeAsync("UpdateScanComment", new object[] {
                        sessionID,
                        ScanID,
                        Comment}, this.UpdateScanCommentOperationCompleted, userState);
        }
        
        private void OnUpdateScanCommentOperationCompleted(object arg) {
            if ((this.UpdateScanCommentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateScanCommentCompleted(this, new UpdateScanCommentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScansDisplayDataForAllProjects", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseScansDisplayExtendedData GetScansDisplayDataForAllProjects(string sessionID) {
            object[] results = this.Invoke("GetScansDisplayDataForAllProjects", new object[] {
                        sessionID});
            return ((CxWSResponseScansDisplayExtendedData)(results[0]));
        }
        
        /// <remarks/>
        public void GetScansDisplayDataForAllProjectsAsync(string sessionID) {
            this.GetScansDisplayDataForAllProjectsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetScansDisplayDataForAllProjectsAsync(string sessionID, object userState) {
            if ((this.GetScansDisplayDataForAllProjectsOperationCompleted == null)) {
                this.GetScansDisplayDataForAllProjectsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScansDisplayDataForAllProjectsOperationCompleted);
            }
            this.InvokeAsync("GetScansDisplayDataForAllProjects", new object[] {
                        sessionID}, this.GetScansDisplayDataForAllProjectsOperationCompleted, userState);
        }
        
        private void OnGetScansDisplayDataForAllProjectsOperationCompleted(object arg) {
            if ((this.GetScansDisplayDataForAllProjectsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScansDisplayDataForAllProjectsCompleted(this, new GetScansDisplayDataForAllProjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanSummary", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseScanSummaryExtended GetScanSummary(string i_SessionID, long i_ScanID, bool auditEvent) {
            object[] results = this.Invoke("GetScanSummary", new object[] {
                        i_SessionID,
                        i_ScanID,
                        auditEvent});
            return ((CxWSResponseScanSummaryExtended)(results[0]));
        }
        
        /// <remarks/>
        public void GetScanSummaryAsync(string i_SessionID, long i_ScanID, bool auditEvent) {
            this.GetScanSummaryAsync(i_SessionID, i_ScanID, auditEvent, null);
        }
        
        /// <remarks/>
        public void GetScanSummaryAsync(string i_SessionID, long i_ScanID, bool auditEvent, object userState) {
            if ((this.GetScanSummaryOperationCompleted == null)) {
                this.GetScanSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanSummaryOperationCompleted);
            }
            this.InvokeAsync("GetScanSummary", new object[] {
                        i_SessionID,
                        i_ScanID,
                        auditEvent}, this.GetScanSummaryOperationCompleted, userState);
        }
        
        private void OnGetScanSummaryOperationCompleted(object arg) {
            if ((this.GetScanSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScanSummaryCompleted(this, new GetScanSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanCompareSummary", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseScanCompareSummary GetScanCompareSummary(string sessionId, long oldScanId, long newScanId) {
            object[] results = this.Invoke("GetScanCompareSummary", new object[] {
                        sessionId,
                        oldScanId,
                        newScanId});
            return ((CxWSResponseScanCompareSummary)(results[0]));
        }
        
        /// <remarks/>
        public void GetScanCompareSummaryAsync(string sessionId, long oldScanId, long newScanId) {
            this.GetScanCompareSummaryAsync(sessionId, oldScanId, newScanId, null);
        }
        
        /// <remarks/>
        public void GetScanCompareSummaryAsync(string sessionId, long oldScanId, long newScanId, object userState) {
            if ((this.GetScanCompareSummaryOperationCompleted == null)) {
                this.GetScanCompareSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanCompareSummaryOperationCompleted);
            }
            this.InvokeAsync("GetScanCompareSummary", new object[] {
                        sessionId,
                        oldScanId,
                        newScanId}, this.GetScanCompareSummaryOperationCompleted, userState);
        }
        
        private void OnGetScanCompareSummaryOperationCompleted(object arg) {
            if ((this.GetScanCompareSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScanCompareSummaryCompleted(this, new GetScanCompareSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompareScanResults", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponceScanCompareResults GetCompareScanResults(string sessionId, long oldScanId, long newScanId) {
            object[] results = this.Invoke("GetCompareScanResults", new object[] {
                        sessionId,
                        oldScanId,
                        newScanId});
            return ((CxWSResponceScanCompareResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompareScanResultsAsync(string sessionId, long oldScanId, long newScanId) {
            this.GetCompareScanResultsAsync(sessionId, oldScanId, newScanId, null);
        }
        
        /// <remarks/>
        public void GetCompareScanResultsAsync(string sessionId, long oldScanId, long newScanId, object userState) {
            if ((this.GetCompareScanResultsOperationCompleted == null)) {
                this.GetCompareScanResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompareScanResultsOperationCompleted);
            }
            this.InvokeAsync("GetCompareScanResults", new object[] {
                        sessionId,
                        oldScanId,
                        newScanId}, this.GetCompareScanResultsOperationCompleted, userState);
        }
        
        private void OnGetCompareScanResultsOperationCompleted(object arg) {
            if ((this.GetCompareScanResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompareScanResultsCompleted(this, new GetCompareScanResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetScanLogs", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseScanLog GetScanLogs(CxWSRequestScanLog cxWSRequestScanLog) {
            object[] results = this.Invoke("GetScanLogs", new object[] {
                        cxWSRequestScanLog});
            return ((CxWSResponseScanLog)(results[0]));
        }
        
        /// <remarks/>
        public void GetScanLogsAsync(CxWSRequestScanLog cxWSRequestScanLog) {
            this.GetScanLogsAsync(cxWSRequestScanLog, null);
        }
        
        /// <remarks/>
        public void GetScanLogsAsync(CxWSRequestScanLog cxWSRequestScanLog, object userState) {
            if ((this.GetScanLogsOperationCompleted == null)) {
                this.GetScanLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScanLogsOperationCompleted);
            }
            this.InvokeAsync("GetScanLogs", new object[] {
                        cxWSRequestScanLog}, this.GetScanLogsOperationCompleted, userState);
        }
        
        private void OnGetScanLogsOperationCompleted(object arg) {
            if ((this.GetScanLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScanLogsCompleted(this, new GetScanLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteScans", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseDeleteScans DeleteScans(CxWSRequestDeleteScans request) {
            object[] results = this.Invoke("DeleteScans", new object[] {
                        request});
            return ((CxWSResponseDeleteScans)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteScansAsync(CxWSRequestDeleteScans request) {
            this.DeleteScansAsync(request, null);
        }
        
        /// <remarks/>
        public void DeleteScansAsync(CxWSRequestDeleteScans request, object userState) {
            if ((this.DeleteScansOperationCompleted == null)) {
                this.DeleteScansOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteScansOperationCompleted);
            }
            this.InvokeAsync("DeleteScans", new object[] {
                        request}, this.DeleteScansOperationCompleted, userState);
        }
        
        private void OnDeleteScansOperationCompleted(object arg) {
            if ((this.DeleteScansCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteScansCompleted(this, new DeleteScansCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/LockScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse LockScan(string i_SessionID, long i_ScanID) {
            object[] results = this.Invoke("LockScan", new object[] {
                        i_SessionID,
                        i_ScanID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void LockScanAsync(string i_SessionID, long i_ScanID) {
            this.LockScanAsync(i_SessionID, i_ScanID, null);
        }
        
        /// <remarks/>
        public void LockScanAsync(string i_SessionID, long i_ScanID, object userState) {
            if ((this.LockScanOperationCompleted == null)) {
                this.LockScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLockScanOperationCompleted);
            }
            this.InvokeAsync("LockScan", new object[] {
                        i_SessionID,
                        i_ScanID}, this.LockScanOperationCompleted, userState);
        }
        
        private void OnLockScanOperationCompleted(object arg) {
            if ((this.LockScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LockScanCompleted(this, new LockScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UnlockScan", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UnlockScan(string i_SessionID, long i_ScanID) {
            object[] results = this.Invoke("UnlockScan", new object[] {
                        i_SessionID,
                        i_ScanID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UnlockScanAsync(string i_SessionID, long i_ScanID) {
            this.UnlockScanAsync(i_SessionID, i_ScanID, null);
        }
        
        /// <remarks/>
        public void UnlockScanAsync(string i_SessionID, long i_ScanID, object userState) {
            if ((this.UnlockScanOperationCompleted == null)) {
                this.UnlockScanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnlockScanOperationCompleted);
            }
            this.InvokeAsync("UnlockScan", new object[] {
                        i_SessionID,
                        i_ScanID}, this.UnlockScanOperationCompleted, userState);
        }
        
        private void OnUnlockScanOperationCompleted(object arg) {
            if ((this.UnlockScanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnlockScanCompleted(this, new UnlockScanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryDescriptionByQueryId", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseQueryDescription GetQueryDescriptionByQueryId(string sessionId, int queryId) {
            object[] results = this.Invoke("GetQueryDescriptionByQueryId", new object[] {
                        sessionId,
                        queryId});
            return ((CxWSResponseQueryDescription)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryDescriptionByQueryIdAsync(string sessionId, int queryId) {
            this.GetQueryDescriptionByQueryIdAsync(sessionId, queryId, null);
        }
        
        /// <remarks/>
        public void GetQueryDescriptionByQueryIdAsync(string sessionId, int queryId, object userState) {
            if ((this.GetQueryDescriptionByQueryIdOperationCompleted == null)) {
                this.GetQueryDescriptionByQueryIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryDescriptionByQueryIdOperationCompleted);
            }
            this.InvokeAsync("GetQueryDescriptionByQueryId", new object[] {
                        sessionId,
                        queryId}, this.GetQueryDescriptionByQueryIdOperationCompleted, userState);
        }
        
        private void OnGetQueryDescriptionByQueryIdOperationCompleted(object arg) {
            if ((this.GetQueryDescriptionByQueryIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryDescriptionByQueryIdCompleted(this, new GetQueryDescriptionByQueryIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetQueryDescription", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseQueryDescription GetQueryDescription(string sessionId, int cweID) {
            object[] results = this.Invoke("GetQueryDescription", new object[] {
                        sessionId,
                        cweID});
            return ((CxWSResponseQueryDescription)(results[0]));
        }
        
        /// <remarks/>
        public void GetQueryDescriptionAsync(string sessionId, int cweID) {
            this.GetQueryDescriptionAsync(sessionId, cweID, null);
        }
        
        /// <remarks/>
        public void GetQueryDescriptionAsync(string sessionId, int cweID, object userState) {
            if ((this.GetQueryDescriptionOperationCompleted == null)) {
                this.GetQueryDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetQueryDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetQueryDescription", new object[] {
                        sessionId,
                        cweID}, this.GetQueryDescriptionOperationCompleted, userState);
        }
        
        private void OnGetQueryDescriptionOperationCompleted(object arg) {
            if ((this.GetQueryDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetQueryDescriptionCompleted(this, new GetQueryDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultDescription", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseResultDescription GetResultDescription(string sessionID, long scanID, long pathID) {
            object[] results = this.Invoke("GetResultDescription", new object[] {
                        sessionID,
                        scanID,
                        pathID});
            return ((CxWSResponseResultDescription)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultDescriptionAsync(string sessionID, long scanID, long pathID) {
            this.GetResultDescriptionAsync(sessionID, scanID, pathID, null);
        }
        
        /// <remarks/>
        public void GetResultDescriptionAsync(string sessionID, long scanID, long pathID, object userState) {
            if ((this.GetResultDescriptionOperationCompleted == null)) {
                this.GetResultDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetResultDescription", new object[] {
                        sessionID,
                        scanID,
                        pathID}, this.GetResultDescriptionOperationCompleted, userState);
        }
        
        private void OnGetResultDescriptionOperationCompleted(object arg) {
            if ((this.GetResultDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultDescriptionCompleted(this, new GetResultDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCWEDescription", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseQueryDescription GetCWEDescription(string sessionId, int cweID) {
            object[] results = this.Invoke("GetCWEDescription", new object[] {
                        sessionId,
                        cweID});
            return ((CxWSResponseQueryDescription)(results[0]));
        }
        
        /// <remarks/>
        public void GetCWEDescriptionAsync(string sessionId, int cweID) {
            this.GetCWEDescriptionAsync(sessionId, cweID, null);
        }
        
        /// <remarks/>
        public void GetCWEDescriptionAsync(string sessionId, int cweID, object userState) {
            if ((this.GetCWEDescriptionOperationCompleted == null)) {
                this.GetCWEDescriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCWEDescriptionOperationCompleted);
            }
            this.InvokeAsync("GetCWEDescription", new object[] {
                        sessionId,
                        cweID}, this.GetCWEDescriptionOperationCompleted, userState);
        }
        
        private void OnGetCWEDescriptionOperationCompleted(object arg) {
            if ((this.GetCWEDescriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCWEDescriptionCompleted(this, new GetCWEDescriptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSourceByScanID", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSourceContent GetSourceByScanID(string sessionID, long scanID, string fileToRetreive) {
            object[] results = this.Invoke("GetSourceByScanID", new object[] {
                        sessionID,
                        scanID,
                        fileToRetreive});
            return ((CxWSResponseSourceContent)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourceByScanIDAsync(string sessionID, long scanID, string fileToRetreive) {
            this.GetSourceByScanIDAsync(sessionID, scanID, fileToRetreive, null);
        }
        
        /// <remarks/>
        public void GetSourceByScanIDAsync(string sessionID, long scanID, string fileToRetreive, object userState) {
            if ((this.GetSourceByScanIDOperationCompleted == null)) {
                this.GetSourceByScanIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourceByScanIDOperationCompleted);
            }
            this.InvokeAsync("GetSourceByScanID", new object[] {
                        sessionID,
                        scanID,
                        fileToRetreive}, this.GetSourceByScanIDOperationCompleted, userState);
        }
        
        private void OnGetSourceByScanIDOperationCompleted(object arg) {
            if ((this.GetSourceByScanIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourceByScanIDCompleted(this, new GetSourceByScanIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSourcesByScanID", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSourcesContent GetSourcesByScanID(string sessionID, long scanID, string[] filesToRetreive) {
            object[] results = this.Invoke("GetSourcesByScanID", new object[] {
                        sessionID,
                        scanID,
                        filesToRetreive});
            return ((CxWSResponseSourcesContent)(results[0]));
        }
        
        /// <remarks/>
        public void GetSourcesByScanIDAsync(string sessionID, long scanID, string[] filesToRetreive) {
            this.GetSourcesByScanIDAsync(sessionID, scanID, filesToRetreive, null);
        }
        
        /// <remarks/>
        public void GetSourcesByScanIDAsync(string sessionID, long scanID, string[] filesToRetreive, object userState) {
            if ((this.GetSourcesByScanIDOperationCompleted == null)) {
                this.GetSourcesByScanIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSourcesByScanIDOperationCompleted);
            }
            this.InvokeAsync("GetSourcesByScanID", new object[] {
                        sessionID,
                        scanID,
                        filesToRetreive}, this.GetSourcesByScanIDOperationCompleted, userState);
        }
        
        private void OnGetSourcesByScanIDOperationCompleted(object arg) {
            if ((this.GetSourcesByScanIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSourcesByScanIDCompleted(this, new GetSourcesByScanIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetResultStateList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseResultStateList GetResultStateList(string sessionID) {
            object[] results = this.Invoke("GetResultStateList", new object[] {
                        sessionID});
            return ((CxWSResponseResultStateList)(results[0]));
        }
        
        /// <remarks/>
        public void GetResultStateListAsync(string sessionID) {
            this.GetResultStateListAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetResultStateListAsync(string sessionID, object userState) {
            if ((this.GetResultStateListOperationCompleted == null)) {
                this.GetResultStateListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetResultStateListOperationCompleted);
            }
            this.InvokeAsync("GetResultStateList", new object[] {
                        sessionID}, this.GetResultStateListOperationCompleted, userState);
        }
        
        private void OnGetResultStateListOperationCompleted(object arg) {
            if ((this.GetResultStateListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetResultStateListCompleted(this, new GetResultStateListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsSMTPHostConfigured", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseBool IsSMTPHostConfigured() {
            object[] results = this.Invoke("IsSMTPHostConfigured", new object[0]);
            return ((CxWSResponseBool)(results[0]));
        }
        
        /// <remarks/>
        public void IsSMTPHostConfiguredAsync() {
            this.IsSMTPHostConfiguredAsync(null);
        }
        
        /// <remarks/>
        public void IsSMTPHostConfiguredAsync(object userState) {
            if ((this.IsSMTPHostConfiguredOperationCompleted == null)) {
                this.IsSMTPHostConfiguredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsSMTPHostConfiguredOperationCompleted);
            }
            this.InvokeAsync("IsSMTPHostConfigured", new object[0], this.IsSMTPHostConfiguredOperationCompleted, userState);
        }
        
        private void OnIsSMTPHostConfiguredOperationCompleted(object arg) {
            if ((this.IsSMTPHostConfiguredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsSMTPHostConfiguredCompleted(this, new IsSMTPHostConfiguredCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsPasswordComplexityEnabled", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseBool IsPasswordComplexityEnabled() {
            object[] results = this.Invoke("IsPasswordComplexityEnabled", new object[0]);
            return ((CxWSResponseBool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPasswordComplexityEnabledAsync() {
            this.IsPasswordComplexityEnabledAsync(null);
        }
        
        /// <remarks/>
        public void IsPasswordComplexityEnabledAsync(object userState) {
            if ((this.IsPasswordComplexityEnabledOperationCompleted == null)) {
                this.IsPasswordComplexityEnabledOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPasswordComplexityEnabledOperationCompleted);
            }
            this.InvokeAsync("IsPasswordComplexityEnabled", new object[0], this.IsPasswordComplexityEnabledOperationCompleted, userState);
        }
        
        private void OnIsPasswordComplexityEnabledOperationCompleted(object arg) {
            if ((this.IsPasswordComplexityEnabledCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPasswordComplexityEnabledCompleted(this, new IsPasswordComplexityEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsPrivateCloud", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseBool IsPrivateCloud() {
            object[] results = this.Invoke("IsPrivateCloud", new object[0]);
            return ((CxWSResponseBool)(results[0]));
        }
        
        /// <remarks/>
        public void IsPrivateCloudAsync() {
            this.IsPrivateCloudAsync(null);
        }
        
        /// <remarks/>
        public void IsPrivateCloudAsync(object userState) {
            if ((this.IsPrivateCloudOperationCompleted == null)) {
                this.IsPrivateCloudOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsPrivateCloudOperationCompleted);
            }
            this.InvokeAsync("IsPrivateCloud", new object[0], this.IsPrivateCloudOperationCompleted, userState);
        }
        
        private void OnIsPrivateCloudOperationCompleted(object arg) {
            if ((this.IsPrivateCloudCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsPrivateCloudCompleted(this, new IsPrivateCloudCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsAdminAllowedToChangeUserPassword", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse IsAdminAllowedToChangeUserPassword(string sessionID, long userID) {
            object[] results = this.Invoke("IsAdminAllowedToChangeUserPassword", new object[] {
                        sessionID,
                        userID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void IsAdminAllowedToChangeUserPasswordAsync(string sessionID, long userID) {
            this.IsAdminAllowedToChangeUserPasswordAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void IsAdminAllowedToChangeUserPasswordAsync(string sessionID, long userID, object userState) {
            if ((this.IsAdminAllowedToChangeUserPasswordOperationCompleted == null)) {
                this.IsAdminAllowedToChangeUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAdminAllowedToChangeUserPasswordOperationCompleted);
            }
            this.InvokeAsync("IsAdminAllowedToChangeUserPassword", new object[] {
                        sessionID,
                        userID}, this.IsAdminAllowedToChangeUserPasswordOperationCompleted, userState);
        }
        
        private void OnIsAdminAllowedToChangeUserPasswordOperationCompleted(object arg) {
            if ((this.IsAdminAllowedToChangeUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAdminAllowedToChangeUserPasswordCompleted(this, new IsAdminAllowedToChangeUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ForgotPassword", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse ForgotPassword(string passwordChangePageUrl, string userName, string email) {
            object[] results = this.Invoke("ForgotPassword", new object[] {
                        passwordChangePageUrl,
                        userName,
                        email});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ForgotPasswordAsync(string passwordChangePageUrl, string userName, string email) {
            this.ForgotPasswordAsync(passwordChangePageUrl, userName, email, null);
        }
        
        /// <remarks/>
        public void ForgotPasswordAsync(string passwordChangePageUrl, string userName, string email, object userState) {
            if ((this.ForgotPasswordOperationCompleted == null)) {
                this.ForgotPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForgotPasswordOperationCompleted);
            }
            this.InvokeAsync("ForgotPassword", new object[] {
                        passwordChangePageUrl,
                        userName,
                        email}, this.ForgotPasswordOperationCompleted, userState);
        }
        
        private void OnForgotPasswordOperationCompleted(object arg) {
            if ((this.ForgotPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForgotPasswordCompleted(this, new ForgotPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ResetPassword", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse ResetPassword(string sessionID, string loginUrl, long userID) {
            object[] results = this.Invoke("ResetPassword", new object[] {
                        sessionID,
                        loginUrl,
                        userID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string sessionID, string loginUrl, long userID) {
            this.ResetPasswordAsync(sessionID, loginUrl, userID, null);
        }
        
        /// <remarks/>
        public void ResetPasswordAsync(string sessionID, string loginUrl, long userID, object userState) {
            if ((this.ResetPasswordOperationCompleted == null)) {
                this.ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("ResetPassword", new object[] {
                        sessionID,
                        loginUrl,
                        userID}, this.ResetPasswordOperationCompleted, userState);
        }
        
        private void OnResetPasswordOperationCompleted(object arg) {
            if ((this.ResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetPasswordCompleted(this, new ResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CheckChangePasswordToken", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse CheckChangePasswordToken(string token) {
            object[] results = this.Invoke("CheckChangePasswordToken", new object[] {
                        token});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void CheckChangePasswordTokenAsync(string token) {
            this.CheckChangePasswordTokenAsync(token, null);
        }
        
        /// <remarks/>
        public void CheckChangePasswordTokenAsync(string token, object userState) {
            if ((this.CheckChangePasswordTokenOperationCompleted == null)) {
                this.CheckChangePasswordTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckChangePasswordTokenOperationCompleted);
            }
            this.InvokeAsync("CheckChangePasswordToken", new object[] {
                        token}, this.CheckChangePasswordTokenOperationCompleted, userState);
        }
        
        private void OnCheckChangePasswordTokenOperationCompleted(object arg) {
            if ((this.CheckChangePasswordTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckChangePasswordTokenCompleted(this, new CheckChangePasswordTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ChangePasswordWithToken", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse ChangePasswordWithToken(string token, string password) {
            object[] results = this.Invoke("ChangePasswordWithToken", new object[] {
                        token,
                        password});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordWithTokenAsync(string token, string password) {
            this.ChangePasswordWithTokenAsync(token, password, null);
        }
        
        /// <remarks/>
        public void ChangePasswordWithTokenAsync(string token, string password, object userState) {
            if ((this.ChangePasswordWithTokenOperationCompleted == null)) {
                this.ChangePasswordWithTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordWithTokenOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordWithToken", new object[] {
                        token,
                        password}, this.ChangePasswordWithTokenOperationCompleted, userState);
        }
        
        private void OnChangePasswordWithTokenOperationCompleted(object arg) {
            if ((this.ChangePasswordWithTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordWithTokenCompleted(this, new ChangePasswordWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ChangePassword", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse ChangePassword(string sessionID, string oldPsw, string newPsw) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        sessionID,
                        oldPsw,
                        newPsw});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string sessionID, string oldPsw, string newPsw) {
            this.ChangePasswordAsync(sessionID, oldPsw, newPsw, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string sessionID, string oldPsw, string newPsw, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        sessionID,
                        oldPsw,
                        newPsw}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ChangePasswordAdminToUser", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse ChangePasswordAdminToUser(string sessionID, long userID, string newPassword, string adminPassword) {
            object[] results = this.Invoke("ChangePasswordAdminToUser", new object[] {
                        sessionID,
                        userID,
                        newPassword,
                        adminPassword});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAdminToUserAsync(string sessionID, long userID, string newPassword, string adminPassword) {
            this.ChangePasswordAdminToUserAsync(sessionID, userID, newPassword, adminPassword, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAdminToUserAsync(string sessionID, long userID, string newPassword, string adminPassword, object userState) {
            if ((this.ChangePasswordAdminToUserOperationCompleted == null)) {
                this.ChangePasswordAdminToUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordAdminToUserOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordAdminToUser", new object[] {
                        sessionID,
                        userID,
                        newPassword,
                        adminPassword}, this.ChangePasswordAdminToUserOperationCompleted, userState);
        }
        
        private void OnChangePasswordAdminToUserOperationCompleted(object arg) {
            if ((this.ChangePasswordAdminToUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordAdminToUserCompleted(this, new ChangePasswordAdminToUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompanies", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseGroupList GetCompanies() {
            object[] results = this.Invoke("GetCompanies", new object[0]);
            return ((CxWSResponseGroupList)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompaniesAsync() {
            this.GetCompaniesAsync(null);
        }
        
        /// <remarks/>
        public void GetCompaniesAsync(object userState) {
            if ((this.GetCompaniesOperationCompleted == null)) {
                this.GetCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompaniesOperationCompleted);
            }
            this.InvokeAsync("GetCompanies", new object[0], this.GetCompaniesOperationCompleted, userState);
        }
        
        private void OnGetCompaniesOperationCompleted(object arg) {
            if ((this.GetCompaniesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompaniesCompleted(this, new GetCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RegisterPendingUser", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse RegisterPendingUser(WebClientPendingUser pendingUser, string pendingUsersTableUrl) {
            object[] results = this.Invoke("RegisterPendingUser", new object[] {
                        pendingUser,
                        pendingUsersTableUrl});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterPendingUserAsync(WebClientPendingUser pendingUser, string pendingUsersTableUrl) {
            this.RegisterPendingUserAsync(pendingUser, pendingUsersTableUrl, null);
        }
        
        /// <remarks/>
        public void RegisterPendingUserAsync(WebClientPendingUser pendingUser, string pendingUsersTableUrl, object userState) {
            if ((this.RegisterPendingUserOperationCompleted == null)) {
                this.RegisterPendingUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterPendingUserOperationCompleted);
            }
            this.InvokeAsync("RegisterPendingUser", new object[] {
                        pendingUser,
                        pendingUsersTableUrl}, this.RegisterPendingUserOperationCompleted, userState);
        }
        
        private void OnRegisterPendingUserOperationCompleted(object arg) {
            if ((this.RegisterPendingUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterPendingUserCompleted(this, new RegisterPendingUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetPendingUsersList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponsePendingUsersList GetPendingUsersList(string sessionID) {
            object[] results = this.Invoke("GetPendingUsersList", new object[] {
                        sessionID});
            return ((CxWSResponsePendingUsersList)(results[0]));
        }
        
        /// <remarks/>
        public void GetPendingUsersListAsync(string sessionID) {
            this.GetPendingUsersListAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetPendingUsersListAsync(string sessionID, object userState) {
            if ((this.GetPendingUsersListOperationCompleted == null)) {
                this.GetPendingUsersListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingUsersListOperationCompleted);
            }
            this.InvokeAsync("GetPendingUsersList", new object[] {
                        sessionID}, this.GetPendingUsersListOperationCompleted, userState);
        }
        
        private void OnGetPendingUsersListOperationCompleted(object arg) {
            if ((this.GetPendingUsersListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingUsersListCompleted(this, new GetPendingUsersListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeletePendingUsers", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeletePendingUsers(string sessionID, int[] userIdList) {
            object[] results = this.Invoke("DeletePendingUsers", new object[] {
                        sessionID,
                        userIdList});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePendingUsersAsync(string sessionID, int[] userIdList) {
            this.DeletePendingUsersAsync(sessionID, userIdList, null);
        }
        
        /// <remarks/>
        public void DeletePendingUsersAsync(string sessionID, int[] userIdList, object userState) {
            if ((this.DeletePendingUsersOperationCompleted == null)) {
                this.DeletePendingUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePendingUsersOperationCompleted);
            }
            this.InvokeAsync("DeletePendingUsers", new object[] {
                        sessionID,
                        userIdList}, this.DeletePendingUsersOperationCompleted, userState);
        }
        
        private void OnDeletePendingUsersOperationCompleted(object arg) {
            if ((this.DeletePendingUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePendingUsersCompleted(this, new DeletePendingUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/ApprovePendingUsers", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse ApprovePendingUsers(string sessionID, WebClientApprovedUser[] userList) {
            object[] results = this.Invoke("ApprovePendingUsers", new object[] {
                        sessionID,
                        userList});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void ApprovePendingUsersAsync(string sessionID, WebClientApprovedUser[] userList) {
            this.ApprovePendingUsersAsync(sessionID, userList, null);
        }
        
        /// <remarks/>
        public void ApprovePendingUsersAsync(string sessionID, WebClientApprovedUser[] userList, object userState) {
            if ((this.ApprovePendingUsersOperationCompleted == null)) {
                this.ApprovePendingUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApprovePendingUsersOperationCompleted);
            }
            this.InvokeAsync("ApprovePendingUsers", new object[] {
                        sessionID,
                        userList}, this.ApprovePendingUsersOperationCompleted, userState);
        }
        
        private void OnApprovePendingUsersOperationCompleted(object arg) {
            if ((this.ApprovePendingUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApprovePendingUsersCompleted(this, new ApprovePendingUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetUserProfileData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseProfileData GetUserProfileData(string sessionID) {
            object[] results = this.Invoke("GetUserProfileData", new object[] {
                        sessionID});
            return ((CxWSResponseProfileData)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserProfileDataAsync(string sessionID) {
            this.GetUserProfileDataAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetUserProfileDataAsync(string sessionID, object userState) {
            if ((this.GetUserProfileDataOperationCompleted == null)) {
                this.GetUserProfileDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserProfileDataOperationCompleted);
            }
            this.InvokeAsync("GetUserProfileData", new object[] {
                        sessionID}, this.GetUserProfileDataOperationCompleted, userState);
        }
        
        private void OnGetUserProfileDataOperationCompleted(object arg) {
            if ((this.GetUserProfileDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserProfileDataCompleted(this, new GetUserProfileDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateUserProfileData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateUserProfileData(string sessionID, ProfileData userProfileData) {
            object[] results = this.Invoke("UpdateUserProfileData", new object[] {
                        sessionID,
                        userProfileData});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserProfileDataAsync(string sessionID, ProfileData userProfileData) {
            this.UpdateUserProfileDataAsync(sessionID, userProfileData, null);
        }
        
        /// <remarks/>
        public void UpdateUserProfileDataAsync(string sessionID, ProfileData userProfileData, object userState) {
            if ((this.UpdateUserProfileDataOperationCompleted == null)) {
                this.UpdateUserProfileDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserProfileDataOperationCompleted);
            }
            this.InvokeAsync("UpdateUserProfileData", new object[] {
                        sessionID,
                        userProfileData}, this.UpdateUserProfileDataOperationCompleted, userState);
        }
        
        private void OnUpdateUserProfileDataOperationCompleted(object arg) {
            if ((this.UpdateUserProfileDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserProfileDataCompleted(this, new UpdateUserProfileDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetUserById", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSingleUserData GetUserById(string sessionID, long userId) {
            object[] results = this.Invoke("GetUserById", new object[] {
                        sessionID,
                        userId});
            return ((CxWSResponseSingleUserData)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserByIdAsync(string sessionID, long userId) {
            this.GetUserByIdAsync(sessionID, userId, null);
        }
        
        /// <remarks/>
        public void GetUserByIdAsync(string sessionID, long userId, object userState) {
            if ((this.GetUserByIdOperationCompleted == null)) {
                this.GetUserByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserByIdOperationCompleted);
            }
            this.InvokeAsync("GetUserById", new object[] {
                        sessionID,
                        userId}, this.GetUserByIdOperationCompleted, userState);
        }
        
        private void OnGetUserByIdOperationCompleted(object arg) {
            if ((this.GetUserByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserByIdCompleted(this, new GetUserByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllUsers", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseUserData GetAllUsers(string sessionID) {
            object[] results = this.Invoke("GetAllUsers", new object[] {
                        sessionID});
            return ((CxWSResponseUserData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUsersAsync(string sessionID) {
            this.GetAllUsersAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAllUsersAsync(string sessionID, object userState) {
            if ((this.GetAllUsersOperationCompleted == null)) {
                this.GetAllUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersOperationCompleted);
            }
            this.InvokeAsync("GetAllUsers", new object[] {
                        sessionID}, this.GetAllUsersOperationCompleted, userState);
        }
        
        private void OnGetAllUsersOperationCompleted(object arg) {
            if ((this.GetAllUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUsersCompleted(this, new GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllUsersInGroup", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseUserData GetAllUsersInGroup(string sessionID, string groupID, bool isRecursive) {
            object[] results = this.Invoke("GetAllUsersInGroup", new object[] {
                        sessionID,
                        groupID,
                        isRecursive});
            return ((CxWSResponseUserData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUsersInGroupAsync(string sessionID, string groupID, bool isRecursive) {
            this.GetAllUsersInGroupAsync(sessionID, groupID, isRecursive, null);
        }
        
        /// <remarks/>
        public void GetAllUsersInGroupAsync(string sessionID, string groupID, bool isRecursive, object userState) {
            if ((this.GetAllUsersInGroupOperationCompleted == null)) {
                this.GetAllUsersInGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersInGroupOperationCompleted);
            }
            this.InvokeAsync("GetAllUsersInGroup", new object[] {
                        sessionID,
                        groupID,
                        isRecursive}, this.GetAllUsersInGroupOperationCompleted, userState);
        }
        
        private void OnGetAllUsersInGroupOperationCompleted(object arg) {
            if ((this.GetAllUsersInGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUsersInGroupCompleted(this, new GetAllUsersInGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteUser", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeleteUser(string sessionID, int userID) {
            object[] results = this.Invoke("DeleteUser", new object[] {
                        sessionID,
                        userID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string sessionID, int userID) {
            this.DeleteUserAsync(sessionID, userID, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string sessionID, int userID, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        sessionID,
                        userID}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetHierarchyGroupTree", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseHierarchyGroupNodes GetHierarchyGroupTree(string sessionID) {
            object[] results = this.Invoke("GetHierarchyGroupTree", new object[] {
                        sessionID});
            return ((CxWSResponseHierarchyGroupNodes)(results[0]));
        }
        
        /// <remarks/>
        public void GetHierarchyGroupTreeAsync(string sessionID) {
            this.GetHierarchyGroupTreeAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetHierarchyGroupTreeAsync(string sessionID, object userState) {
            if ((this.GetHierarchyGroupTreeOperationCompleted == null)) {
                this.GetHierarchyGroupTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHierarchyGroupTreeOperationCompleted);
            }
            this.InvokeAsync("GetHierarchyGroupTree", new object[] {
                        sessionID}, this.GetHierarchyGroupTreeOperationCompleted, userState);
        }
        
        private void OnGetHierarchyGroupTreeOperationCompleted(object arg) {
            if ((this.GetHierarchyGroupTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHierarchyGroupTreeCompleted(this, new GetHierarchyGroupTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetChildNodes", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseHierarchyGroupNodes GetChildNodes(string sessionID, string pTeamId, int pLevel, string pTeamPath) {
            object[] results = this.Invoke("GetChildNodes", new object[] {
                        sessionID,
                        pTeamId,
                        pLevel,
                        pTeamPath});
            return ((CxWSResponseHierarchyGroupNodes)(results[0]));
        }
        
        /// <remarks/>
        public void GetChildNodesAsync(string sessionID, string pTeamId, int pLevel, string pTeamPath) {
            this.GetChildNodesAsync(sessionID, pTeamId, pLevel, pTeamPath, null);
        }
        
        /// <remarks/>
        public void GetChildNodesAsync(string sessionID, string pTeamId, int pLevel, string pTeamPath, object userState) {
            if ((this.GetChildNodesOperationCompleted == null)) {
                this.GetChildNodesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildNodesOperationCompleted);
            }
            this.InvokeAsync("GetChildNodes", new object[] {
                        sessionID,
                        pTeamId,
                        pLevel,
                        pTeamPath}, this.GetChildNodesOperationCompleted, userState);
        }
        
        private void OnGetChildNodesOperationCompleted(object arg) {
            if ((this.GetChildNodesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildNodesCompleted(this, new GetChildNodesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAncestryGroupTree", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseHierarchyGroupNodes GetAncestryGroupTree(string sessionID, string pTeamID) {
            object[] results = this.Invoke("GetAncestryGroupTree", new object[] {
                        sessionID,
                        pTeamID});
            return ((CxWSResponseHierarchyGroupNodes)(results[0]));
        }
        
        /// <remarks/>
        public void GetAncestryGroupTreeAsync(string sessionID, string pTeamID) {
            this.GetAncestryGroupTreeAsync(sessionID, pTeamID, null);
        }
        
        /// <remarks/>
        public void GetAncestryGroupTreeAsync(string sessionID, string pTeamID, object userState) {
            if ((this.GetAncestryGroupTreeOperationCompleted == null)) {
                this.GetAncestryGroupTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAncestryGroupTreeOperationCompleted);
            }
            this.InvokeAsync("GetAncestryGroupTree", new object[] {
                        sessionID,
                        pTeamID}, this.GetAncestryGroupTreeOperationCompleted, userState);
        }
        
        private void OnGetAncestryGroupTreeOperationCompleted(object arg) {
            if ((this.GetAncestryGroupTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAncestryGroupTreeCompleted(this, new GetAncestryGroupTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/SetUserActivationState", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse SetUserActivationState(string sessionID, int userID, bool activationState) {
            object[] results = this.Invoke("SetUserActivationState", new object[] {
                        sessionID,
                        userID,
                        activationState});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void SetUserActivationStateAsync(string sessionID, int userID, bool activationState) {
            this.SetUserActivationStateAsync(sessionID, userID, activationState, null);
        }
        
        /// <remarks/>
        public void SetUserActivationStateAsync(string sessionID, int userID, bool activationState, object userState) {
            if ((this.SetUserActivationStateOperationCompleted == null)) {
                this.SetUserActivationStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserActivationStateOperationCompleted);
            }
            this.InvokeAsync("SetUserActivationState", new object[] {
                        sessionID,
                        userID,
                        activationState}, this.SetUserActivationStateOperationCompleted, userState);
        }
        
        private void OnSetUserActivationStateOperationCompleted(object arg) {
            if ((this.SetUserActivationStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserActivationStateCompleted(this, new SetUserActivationStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/AddNewUser", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse AddNewUser(string sessionID, UserData userData, CxUserTypes userType) {
            object[] results = this.Invoke("AddNewUser", new object[] {
                        sessionID,
                        userData,
                        userType});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void AddNewUserAsync(string sessionID, UserData userData, CxUserTypes userType) {
            this.AddNewUserAsync(sessionID, userData, userType, null);
        }
        
        /// <remarks/>
        public void AddNewUserAsync(string sessionID, UserData userData, CxUserTypes userType, object userState) {
            if ((this.AddNewUserOperationCompleted == null)) {
                this.AddNewUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewUserOperationCompleted);
            }
            this.InvokeAsync("AddNewUser", new object[] {
                        sessionID,
                        userData,
                        userType}, this.AddNewUserOperationCompleted, userState);
        }
        
        private void OnAddNewUserOperationCompleted(object arg) {
            if ((this.AddNewUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewUserCompleted(this, new AddNewUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateUserData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateUserData(string sessionID, UserData userData) {
            object[] results = this.Invoke("UpdateUserData", new object[] {
                        sessionID,
                        userData});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserDataAsync(string sessionID, UserData userData) {
            this.UpdateUserDataAsync(sessionID, userData, null);
        }
        
        /// <remarks/>
        public void UpdateUserDataAsync(string sessionID, UserData userData, object userState) {
            if ((this.UpdateUserDataOperationCompleted == null)) {
                this.UpdateUserDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserDataOperationCompleted);
            }
            this.InvokeAsync("UpdateUserData", new object[] {
                        sessionID,
                        userData}, this.UpdateUserDataOperationCompleted, userState);
        }
        
        private void OnUpdateUserDataOperationCompleted(object arg) {
            if ((this.UpdateUserDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserDataCompleted(this, new UpdateUserDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetServerLicenseData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseServerLicenseData GetServerLicenseData(string sessionID) {
            object[] results = this.Invoke("GetServerLicenseData", new object[] {
                        sessionID});
            return ((CxWSResponseServerLicenseData)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerLicenseDataAsync(string sessionID) {
            this.GetServerLicenseDataAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetServerLicenseDataAsync(string sessionID, object userState) {
            if ((this.GetServerLicenseDataOperationCompleted == null)) {
                this.GetServerLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerLicenseDataOperationCompleted);
            }
            this.InvokeAsync("GetServerLicenseData", new object[] {
                        sessionID}, this.GetServerLicenseDataOperationCompleted, userState);
        }
        
        private void OnGetServerLicenseDataOperationCompleted(object arg) {
            if ((this.GetServerLicenseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerLicenseDataCompleted(this, new GetServerLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetUsersLicenseData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseUsersLicenseData GetUsersLicenseData(string sessionID, string groupID) {
            object[] results = this.Invoke("GetUsersLicenseData", new object[] {
                        sessionID,
                        groupID});
            return ((CxWSResponseUsersLicenseData)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersLicenseDataAsync(string sessionID, string groupID) {
            this.GetUsersLicenseDataAsync(sessionID, groupID, null);
        }
        
        /// <remarks/>
        public void GetUsersLicenseDataAsync(string sessionID, string groupID, object userState) {
            if ((this.GetUsersLicenseDataOperationCompleted == null)) {
                this.GetUsersLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersLicenseDataOperationCompleted);
            }
            this.InvokeAsync("GetUsersLicenseData", new object[] {
                        sessionID,
                        groupID}, this.GetUsersLicenseDataOperationCompleted, userState);
        }
        
        private void OnGetUsersLicenseDataOperationCompleted(object arg) {
            if ((this.GetUsersLicenseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersLicenseDataCompleted(this, new GetUsersLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompaniesLicenseData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseCompaniesLicenseData GetCompaniesLicenseData(string sessionID, string groupID) {
            object[] results = this.Invoke("GetCompaniesLicenseData", new object[] {
                        sessionID,
                        groupID});
            return ((CxWSResponseCompaniesLicenseData)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompaniesLicenseDataAsync(string sessionID, string groupID) {
            this.GetCompaniesLicenseDataAsync(sessionID, groupID, null);
        }
        
        /// <remarks/>
        public void GetCompaniesLicenseDataAsync(string sessionID, string groupID, object userState) {
            if ((this.GetCompaniesLicenseDataOperationCompleted == null)) {
                this.GetCompaniesLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompaniesLicenseDataOperationCompleted);
            }
            this.InvokeAsync("GetCompaniesLicenseData", new object[] {
                        sessionID,
                        groupID}, this.GetCompaniesLicenseDataOperationCompleted, userState);
        }
        
        private void OnGetCompaniesLicenseDataOperationCompleted(object arg) {
            if ((this.GetCompaniesLicenseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompaniesLicenseDataCompleted(this, new GetCompaniesLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetSPLicenseData", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseSPLicenseData GetSPLicenseData(string sessionID, string groupID) {
            object[] results = this.Invoke("GetSPLicenseData", new object[] {
                        sessionID,
                        groupID});
            return ((CxWSResponseSPLicenseData)(results[0]));
        }
        
        /// <remarks/>
        public void GetSPLicenseDataAsync(string sessionID, string groupID) {
            this.GetSPLicenseDataAsync(sessionID, groupID, null);
        }
        
        /// <remarks/>
        public void GetSPLicenseDataAsync(string sessionID, string groupID, object userState) {
            if ((this.GetSPLicenseDataOperationCompleted == null)) {
                this.GetSPLicenseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSPLicenseDataOperationCompleted);
            }
            this.InvokeAsync("GetSPLicenseData", new object[] {
                        sessionID,
                        groupID}, this.GetSPLicenseDataOperationCompleted, userState);
        }
        
        private void OnGetSPLicenseDataOperationCompleted(object arg) {
            if ((this.GetSPLicenseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSPLicenseDataCompleted(this, new GetSPLicenseDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateUserGroups", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateUserGroups(string sessionID, long userID, Group[] unsubscribedGroups, Group[] subscribedGroups, Role role) {
            object[] results = this.Invoke("UpdateUserGroups", new object[] {
                        sessionID,
                        userID,
                        unsubscribedGroups,
                        subscribedGroups,
                        role});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserGroupsAsync(string sessionID, long userID, Group[] unsubscribedGroups, Group[] subscribedGroups, Role role) {
            this.UpdateUserGroupsAsync(sessionID, userID, unsubscribedGroups, subscribedGroups, role, null);
        }
        
        /// <remarks/>
        public void UpdateUserGroupsAsync(string sessionID, long userID, Group[] unsubscribedGroups, Group[] subscribedGroups, Role role, object userState) {
            if ((this.UpdateUserGroupsOperationCompleted == null)) {
                this.UpdateUserGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserGroupsOperationCompleted);
            }
            this.InvokeAsync("UpdateUserGroups", new object[] {
                        sessionID,
                        userID,
                        unsubscribedGroups,
                        subscribedGroups,
                        role}, this.UpdateUserGroupsOperationCompleted, userState);
        }
        
        private void OnUpdateUserGroupsOperationCompleted(object arg) {
            if ((this.UpdateUserGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserGroupsCompleted(this, new UpdateUserGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetCompaniesList", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseGroupList GetCompaniesList() {
            object[] results = this.Invoke("GetCompaniesList", new object[0]);
            return ((CxWSResponseGroupList)(results[0]));
        }
        
        /// <remarks/>
        public void GetCompaniesListAsync() {
            this.GetCompaniesListAsync(null);
        }
        
        /// <remarks/>
        public void GetCompaniesListAsync(object userState) {
            if ((this.GetCompaniesListOperationCompleted == null)) {
                this.GetCompaniesListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCompaniesListOperationCompleted);
            }
            this.InvokeAsync("GetCompaniesList", new object[0], this.GetCompaniesListOperationCompleted, userState);
        }
        
        private void OnGetCompaniesListOperationCompleted(object arg) {
            if ((this.GetCompaniesListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCompaniesListCompleted(this, new GetCompaniesListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidUserName", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse IsValidUserName(string sessionID, string username) {
            object[] results = this.Invoke("IsValidUserName", new object[] {
                        sessionID,
                        username});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidUserNameAsync(string sessionID, string username) {
            this.IsValidUserNameAsync(sessionID, username, null);
        }
        
        /// <remarks/>
        public void IsValidUserNameAsync(string sessionID, string username, object userState) {
            if ((this.IsValidUserNameOperationCompleted == null)) {
                this.IsValidUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidUserNameOperationCompleted);
            }
            this.InvokeAsync("IsValidUserName", new object[] {
                        sessionID,
                        username}, this.IsValidUserNameOperationCompleted, userState);
        }
        
        private void OnIsValidUserNameOperationCompleted(object arg) {
            if ((this.IsValidUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidUserNameCompleted(this, new IsValidUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/IsValidEmail", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse IsValidEmail(string sessionID, string email) {
            object[] results = this.Invoke("IsValidEmail", new object[] {
                        sessionID,
                        email});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidEmailAsync(string sessionID, string email) {
            this.IsValidEmailAsync(sessionID, email, null);
        }
        
        /// <remarks/>
        public void IsValidEmailAsync(string sessionID, string email, object userState) {
            if ((this.IsValidEmailOperationCompleted == null)) {
                this.IsValidEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidEmailOperationCompleted);
            }
            this.InvokeAsync("IsValidEmail", new object[] {
                        sessionID,
                        email}, this.IsValidEmailOperationCompleted, userState);
        }
        
        private void OnIsValidEmailOperationCompleted(object arg) {
            if ((this.IsValidEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidEmailCompleted(this, new IsValidEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAvailbleDomainNames", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseNameList GetAvailbleDomainNames(string sessionID) {
            object[] results = this.Invoke("GetAvailbleDomainNames", new object[] {
                        sessionID});
            return ((CxWSResponseNameList)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailbleDomainNamesAsync(string sessionID) {
            this.GetAvailbleDomainNamesAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAvailbleDomainNamesAsync(string sessionID, object userState) {
            if ((this.GetAvailbleDomainNamesOperationCompleted == null)) {
                this.GetAvailbleDomainNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailbleDomainNamesOperationCompleted);
            }
            this.InvokeAsync("GetAvailbleDomainNames", new object[] {
                        sessionID}, this.GetAvailbleDomainNamesOperationCompleted, userState);
        }
        
        private void OnGetAvailbleDomainNamesOperationCompleted(object arg) {
            if ((this.GetAvailbleDomainNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailbleDomainNamesCompleted(this, new GetAvailbleDomainNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAvailbleUserDirectoriesNames", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseNameList GetAvailbleUserDirectoriesNames(string sessionID) {
            object[] results = this.Invoke("GetAvailbleUserDirectoriesNames", new object[] {
                        sessionID});
            return ((CxWSResponseNameList)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailbleUserDirectoriesNamesAsync(string sessionID) {
            this.GetAvailbleUserDirectoriesNamesAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAvailbleUserDirectoriesNamesAsync(string sessionID, object userState) {
            if ((this.GetAvailbleUserDirectoriesNamesOperationCompleted == null)) {
                this.GetAvailbleUserDirectoriesNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailbleUserDirectoriesNamesOperationCompleted);
            }
            this.InvokeAsync("GetAvailbleUserDirectoriesNames", new object[] {
                        sessionID}, this.GetAvailbleUserDirectoriesNamesOperationCompleted, userState);
        }
        
        private void OnGetAvailbleUserDirectoriesNamesOperationCompleted(object arg) {
            if ((this.GetAvailbleUserDirectoriesNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailbleUserDirectoriesNamesCompleted(this, new GetAvailbleUserDirectoriesNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAvailbleUserDirectories", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseUserDirectories GetAvailbleUserDirectories(string sessionID) {
            object[] results = this.Invoke("GetAvailbleUserDirectories", new object[] {
                        sessionID});
            return ((CxWSResponseUserDirectories)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailbleUserDirectoriesAsync(string sessionID) {
            this.GetAvailbleUserDirectoriesAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAvailbleUserDirectoriesAsync(string sessionID, object userState) {
            if ((this.GetAvailbleUserDirectoriesOperationCompleted == null)) {
                this.GetAvailbleUserDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailbleUserDirectoriesOperationCompleted);
            }
            this.InvokeAsync("GetAvailbleUserDirectories", new object[] {
                        sessionID}, this.GetAvailbleUserDirectoriesOperationCompleted, userState);
        }
        
        private void OnGetAvailbleUserDirectoriesOperationCompleted(object arg) {
            if ((this.GetAvailbleUserDirectoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailbleUserDirectoriesCompleted(this, new GetAvailbleUserDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllUsersFromDomain", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseDomainUserList GetAllUsersFromDomain(string sessionID, string domain, string i_SearchPattern) {
            object[] results = this.Invoke("GetAllUsersFromDomain", new object[] {
                        sessionID,
                        domain,
                        i_SearchPattern});
            return ((CxWSResponseDomainUserList)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUsersFromDomainAsync(string sessionID, string domain, string i_SearchPattern) {
            this.GetAllUsersFromDomainAsync(sessionID, domain, i_SearchPattern, null);
        }
        
        /// <remarks/>
        public void GetAllUsersFromDomainAsync(string sessionID, string domain, string i_SearchPattern, object userState) {
            if ((this.GetAllUsersFromDomainOperationCompleted == null)) {
                this.GetAllUsersFromDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersFromDomainOperationCompleted);
            }
            this.InvokeAsync("GetAllUsersFromDomain", new object[] {
                        sessionID,
                        domain,
                        i_SearchPattern}, this.GetAllUsersFromDomainOperationCompleted, userState);
        }
        
        private void OnGetAllUsersFromDomainOperationCompleted(object arg) {
            if ((this.GetAllUsersFromDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUsersFromDomainCompleted(this, new GetAllUsersFromDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllUsersFromUserDirectory", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseDomainUserList GetAllUsersFromUserDirectory(string sessionID, string domain, string i_SearchPattern, CxWSSearchPatternOption searchPatternOption) {
            object[] results = this.Invoke("GetAllUsersFromUserDirectory", new object[] {
                        sessionID,
                        domain,
                        i_SearchPattern,
                        searchPatternOption});
            return ((CxWSResponseDomainUserList)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUsersFromUserDirectoryAsync(string sessionID, string domain, string i_SearchPattern, CxWSSearchPatternOption searchPatternOption) {
            this.GetAllUsersFromUserDirectoryAsync(sessionID, domain, i_SearchPattern, searchPatternOption, null);
        }
        
        /// <remarks/>
        public void GetAllUsersFromUserDirectoryAsync(string sessionID, string domain, string i_SearchPattern, CxWSSearchPatternOption searchPatternOption, object userState) {
            if ((this.GetAllUsersFromUserDirectoryOperationCompleted == null)) {
                this.GetAllUsersFromUserDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUsersFromUserDirectoryOperationCompleted);
            }
            this.InvokeAsync("GetAllUsersFromUserDirectory", new object[] {
                        sessionID,
                        domain,
                        i_SearchPattern,
                        searchPatternOption}, this.GetAllUsersFromUserDirectoryOperationCompleted, userState);
        }
        
        private void OnGetAllUsersFromUserDirectoryOperationCompleted(object arg) {
            if ((this.GetAllUsersFromUserDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUsersFromUserDirectoryCompleted(this, new GetAllUsersFromUserDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewTeam", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse CreateNewTeam(string sessionID, string parentTeamID, string newTeamName, CxWSLdapGroupMapping[] ldapGroupMappings) {
            object[] results = this.Invoke("CreateNewTeam", new object[] {
                        sessionID,
                        parentTeamID,
                        newTeamName,
                        ldapGroupMappings});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewTeamAsync(string sessionID, string parentTeamID, string newTeamName, CxWSLdapGroupMapping[] ldapGroupMappings) {
            this.CreateNewTeamAsync(sessionID, parentTeamID, newTeamName, ldapGroupMappings, null);
        }
        
        /// <remarks/>
        public void CreateNewTeamAsync(string sessionID, string parentTeamID, string newTeamName, CxWSLdapGroupMapping[] ldapGroupMappings, object userState) {
            if ((this.CreateNewTeamOperationCompleted == null)) {
                this.CreateNewTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewTeamOperationCompleted);
            }
            this.InvokeAsync("CreateNewTeam", new object[] {
                        sessionID,
                        parentTeamID,
                        newTeamName,
                        ldapGroupMappings}, this.CreateNewTeamOperationCompleted, userState);
        }
        
        private void OnCreateNewTeamOperationCompleted(object arg) {
            if ((this.CreateNewTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewTeamCompleted(this, new CreateNewTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RenameTeam", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse RenameTeam(string sessionID, string teamID, string newTeamName) {
            object[] results = this.Invoke("RenameTeam", new object[] {
                        sessionID,
                        teamID,
                        newTeamName});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void RenameTeamAsync(string sessionID, string teamID, string newTeamName) {
            this.RenameTeamAsync(sessionID, teamID, newTeamName, null);
        }
        
        /// <remarks/>
        public void RenameTeamAsync(string sessionID, string teamID, string newTeamName, object userState) {
            if ((this.RenameTeamOperationCompleted == null)) {
                this.RenameTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameTeamOperationCompleted);
            }
            this.InvokeAsync("RenameTeam", new object[] {
                        sessionID,
                        teamID,
                        newTeamName}, this.RenameTeamOperationCompleted, userState);
        }
        
        private void OnRenameTeamOperationCompleted(object arg) {
            if ((this.RenameTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameTeamCompleted(this, new RenameTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/UpdateTeam", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse UpdateTeam(string sessionID, string teamID, string newTeamName, CxWSLdapGroupMapping[] ldapGroupMappings) {
            object[] results = this.Invoke("UpdateTeam", new object[] {
                        sessionID,
                        teamID,
                        newTeamName,
                        ldapGroupMappings});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateTeamAsync(string sessionID, string teamID, string newTeamName, CxWSLdapGroupMapping[] ldapGroupMappings) {
            this.UpdateTeamAsync(sessionID, teamID, newTeamName, ldapGroupMappings, null);
        }
        
        /// <remarks/>
        public void UpdateTeamAsync(string sessionID, string teamID, string newTeamName, CxWSLdapGroupMapping[] ldapGroupMappings, object userState) {
            if ((this.UpdateTeamOperationCompleted == null)) {
                this.UpdateTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateTeamOperationCompleted);
            }
            this.InvokeAsync("UpdateTeam", new object[] {
                        sessionID,
                        teamID,
                        newTeamName,
                        ldapGroupMappings}, this.UpdateTeamOperationCompleted, userState);
        }
        
        private void OnUpdateTeamOperationCompleted(object arg) {
            if ((this.UpdateTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateTeamCompleted(this, new UpdateTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllTeams", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTeamData GetAllTeams(string sessionID) {
            object[] results = this.Invoke("GetAllTeams", new object[] {
                        sessionID});
            return ((CxWSResponseTeamData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTeamsAsync(string sessionID) {
            this.GetAllTeamsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAllTeamsAsync(string sessionID, object userState) {
            if ((this.GetAllTeamsOperationCompleted == null)) {
                this.GetAllTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTeamsOperationCompleted);
            }
            this.InvokeAsync("GetAllTeams", new object[] {
                        sessionID}, this.GetAllTeamsOperationCompleted, userState);
        }
        
        private void OnGetAllTeamsOperationCompleted(object arg) {
            if ((this.GetAllTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTeamsCompleted(this, new GetAllTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllUserDirecTeams", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTeamData GetAllUserDirecTeams(string sessionID) {
            object[] results = this.Invoke("GetAllUserDirecTeams", new object[] {
                        sessionID});
            return ((CxWSResponseTeamData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUserDirecTeamsAsync(string sessionID) {
            this.GetAllUserDirecTeamsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAllUserDirecTeamsAsync(string sessionID, object userState) {
            if ((this.GetAllUserDirecTeamsOperationCompleted == null)) {
                this.GetAllUserDirecTeamsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserDirecTeamsOperationCompleted);
            }
            this.InvokeAsync("GetAllUserDirecTeams", new object[] {
                        sessionID}, this.GetAllUserDirecTeamsOperationCompleted, userState);
        }
        
        private void OnGetAllUserDirecTeamsOperationCompleted(object arg) {
            if ((this.GetAllUserDirecTeamsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUserDirecTeamsCompleted(this, new GetAllUserDirecTeamsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteTeam", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeleteTeam(string sessionID, string teamID) {
            object[] results = this.Invoke("DeleteTeam", new object[] {
                        sessionID,
                        teamID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTeamAsync(string sessionID, string teamID) {
            this.DeleteTeamAsync(sessionID, teamID, null);
        }
        
        /// <remarks/>
        public void DeleteTeamAsync(string sessionID, string teamID, object userState) {
            if ((this.DeleteTeamOperationCompleted == null)) {
                this.DeleteTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTeamOperationCompleted);
            }
            this.InvokeAsync("DeleteTeam", new object[] {
                        sessionID,
                        teamID}, this.DeleteTeamOperationCompleted, userState);
        }
        
        private void OnDeleteTeamOperationCompleted(object arg) {
            if ((this.DeleteTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTeamCompleted(this, new DeleteTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewCompany", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse CreateNewCompany(string sessionID, string ParentSP, string newTCompanyName, int companyManagers, int scanners, int reviewers, bool allowActions, CxWSLdapGroupMapping[] ldapGroupMappings) {
            object[] results = this.Invoke("CreateNewCompany", new object[] {
                        sessionID,
                        ParentSP,
                        newTCompanyName,
                        companyManagers,
                        scanners,
                        reviewers,
                        allowActions,
                        ldapGroupMappings});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewCompanyAsync(string sessionID, string ParentSP, string newTCompanyName, int companyManagers, int scanners, int reviewers, bool allowActions, CxWSLdapGroupMapping[] ldapGroupMappings) {
            this.CreateNewCompanyAsync(sessionID, ParentSP, newTCompanyName, companyManagers, scanners, reviewers, allowActions, ldapGroupMappings, null);
        }
        
        /// <remarks/>
        public void CreateNewCompanyAsync(string sessionID, string ParentSP, string newTCompanyName, int companyManagers, int scanners, int reviewers, bool allowActions, CxWSLdapGroupMapping[] ldapGroupMappings, object userState) {
            if ((this.CreateNewCompanyOperationCompleted == null)) {
                this.CreateNewCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewCompanyOperationCompleted);
            }
            this.InvokeAsync("CreateNewCompany", new object[] {
                        sessionID,
                        ParentSP,
                        newTCompanyName,
                        companyManagers,
                        scanners,
                        reviewers,
                        allowActions,
                        ldapGroupMappings}, this.CreateNewCompanyOperationCompleted, userState);
        }
        
        private void OnCreateNewCompanyOperationCompleted(object arg) {
            if ((this.CreateNewCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewCompanyCompleted(this, new CreateNewCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/CreateNewServiceProvider", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse CreateNewServiceProvider(string sessionID, string newSpName, int spManagersint, int companyManagers, int scanners, int reviewers, CxWSLdapGroupMapping[] ldapGroupMappings) {
            object[] results = this.Invoke("CreateNewServiceProvider", new object[] {
                        sessionID,
                        newSpName,
                        spManagersint,
                        companyManagers,
                        scanners,
                        reviewers,
                        ldapGroupMappings});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void CreateNewServiceProviderAsync(string sessionID, string newSpName, int spManagersint, int companyManagers, int scanners, int reviewers, CxWSLdapGroupMapping[] ldapGroupMappings) {
            this.CreateNewServiceProviderAsync(sessionID, newSpName, spManagersint, companyManagers, scanners, reviewers, ldapGroupMappings, null);
        }
        
        /// <remarks/>
        public void CreateNewServiceProviderAsync(string sessionID, string newSpName, int spManagersint, int companyManagers, int scanners, int reviewers, CxWSLdapGroupMapping[] ldapGroupMappings, object userState) {
            if ((this.CreateNewServiceProviderOperationCompleted == null)) {
                this.CreateNewServiceProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateNewServiceProviderOperationCompleted);
            }
            this.InvokeAsync("CreateNewServiceProvider", new object[] {
                        sessionID,
                        newSpName,
                        spManagersint,
                        companyManagers,
                        scanners,
                        reviewers,
                        ldapGroupMappings}, this.CreateNewServiceProviderOperationCompleted, userState);
        }
        
        private void OnCreateNewServiceProviderOperationCompleted(object arg) {
            if ((this.CreateNewServiceProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateNewServiceProviderCompleted(this, new CreateNewServiceProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/RenameCompany", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse RenameCompany(string sessionID, string teamID, string newTeamName) {
            object[] results = this.Invoke("RenameCompany", new object[] {
                        sessionID,
                        teamID,
                        newTeamName});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void RenameCompanyAsync(string sessionID, string teamID, string newTeamName) {
            this.RenameCompanyAsync(sessionID, teamID, newTeamName, null);
        }
        
        /// <remarks/>
        public void RenameCompanyAsync(string sessionID, string teamID, string newTeamName, object userState) {
            if ((this.RenameCompanyOperationCompleted == null)) {
                this.RenameCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameCompanyOperationCompleted);
            }
            this.InvokeAsync("RenameCompany", new object[] {
                        sessionID,
                        teamID,
                        newTeamName}, this.RenameCompanyOperationCompleted, userState);
        }
        
        private void OnRenameCompanyOperationCompleted(object arg) {
            if ((this.RenameCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameCompanyCompleted(this, new RenameCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllCompanies", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTeamData GetAllCompanies(string sessionID) {
            object[] results = this.Invoke("GetAllCompanies", new object[] {
                        sessionID});
            return ((CxWSResponseTeamData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllCompaniesAsync(string sessionID) {
            this.GetAllCompaniesAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAllCompaniesAsync(string sessionID, object userState) {
            if ((this.GetAllCompaniesOperationCompleted == null)) {
                this.GetAllCompaniesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllCompaniesOperationCompleted);
            }
            this.InvokeAsync("GetAllCompanies", new object[] {
                        sessionID}, this.GetAllCompaniesOperationCompleted, userState);
        }
        
        private void OnGetAllCompaniesOperationCompleted(object arg) {
            if ((this.GetAllCompaniesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllCompaniesCompleted(this, new GetAllCompaniesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/GetAllSPs", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSResponseTeamData GetAllSPs(string sessionID) {
            object[] results = this.Invoke("GetAllSPs", new object[] {
                        sessionID});
            return ((CxWSResponseTeamData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSPsAsync(string sessionID) {
            this.GetAllSPsAsync(sessionID, null);
        }
        
        /// <remarks/>
        public void GetAllSPsAsync(string sessionID, object userState) {
            if ((this.GetAllSPsOperationCompleted == null)) {
                this.GetAllSPsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSPsOperationCompleted);
            }
            this.InvokeAsync("GetAllSPs", new object[] {
                        sessionID}, this.GetAllSPsOperationCompleted, userState);
        }
        
        private void OnGetAllSPsOperationCompleted(object arg) {
            if ((this.GetAllSPsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSPsCompleted(this, new GetAllSPsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteCompany", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeleteCompany(string sessionID, string teamID) {
            object[] results = this.Invoke("DeleteCompany", new object[] {
                        sessionID,
                        teamID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCompanyAsync(string sessionID, string teamID) {
            this.DeleteCompanyAsync(sessionID, teamID, null);
        }
        
        /// <remarks/>
        public void DeleteCompanyAsync(string sessionID, string teamID, object userState) {
            if ((this.DeleteCompanyOperationCompleted == null)) {
                this.DeleteCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCompanyOperationCompleted);
            }
            this.InvokeAsync("DeleteCompany", new object[] {
                        sessionID,
                        teamID}, this.DeleteCompanyOperationCompleted, userState);
        }
        
        private void OnDeleteCompanyOperationCompleted(object arg) {
            if ((this.DeleteCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCompanyCompleted(this, new DeleteCompanyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://Checkmarx.com/DeleteSP", RequestNamespace="http://Checkmarx.com", ResponseNamespace="http://Checkmarx.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CxWSBasicRepsonse DeleteSP(string sessionID, string teamID) {
            object[] results = this.Invoke("DeleteSP", new object[] {
                        sessionID,
                        teamID});
            return ((CxWSBasicRepsonse)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSPAsync(string sessionID, string teamID) {
            this.DeleteSPAsync(sessionID, teamID, null);
        }
        
        /// <remarks/>
        public void DeleteSPAsync(string sessionID, string teamID, object userState) {
            if ((this.DeleteSPOperationCompleted == null)) {
                this.DeleteSPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSPOperationCompleted);
            }
            this.InvokeAsync("DeleteSP", new object[] {
                        sessionID,
                        teamID}, this.DeleteSPOperationCompleted, userState);
        }
        
        private void OnDeleteSPOperationCompleted(object arg) {
            if ((this.DeleteSPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSPCompleted(this, new DeleteSPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseDomainUserList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseUserDirectories))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseHierarchyGroupNodes))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSingleUserData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProfileData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePendingUsersList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultStateList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourcesContent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultDescription))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseQueryDescription))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseDeleteScans))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanLog))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceScanCompareResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanCompareSummary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanSummary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanSummaryExtended))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScansDisplayExtendedData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanProperties))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScansDisplayData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseDeleteProjects))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultStateUpdate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsProjectChartData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsProjectProperties))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectConfig))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectsDisplayData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectsData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseQueueRunID))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseExtendedScanStatusArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCountLines))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourceActionList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseFileSystemLayer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseConfigSetList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseGroupList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCache))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CXWSResponseResultSummary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultCollection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourceContainer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourceID))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectsScansList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLicenseExpirationDateDetails))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSDataRetentionRequestResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSDataRetentionStatusResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseTeamLdapGroupMappingData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLDAPServerGroups))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseIdNamePairList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLDAPServersConfiguration))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseJSONData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseFailedScansDisplayData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseProjectScannedDisplayData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxTeamPathsResponseResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSCxMoveTeamResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSCxVersionResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemRetrieveResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemSaveResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemMetaResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSUserPreferencesResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSReportStatusResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSProjectBranchingStatusResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSCreateReportResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseTransportedQueries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseExistsingTransportedPresetQueries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSImportQueriesRepsonse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePreset))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseQueries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseRunID))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseEngineServerId))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseEngineServers))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSaasPackage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSessionID))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLoginData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSaasLoginData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseShortQueryDescription))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePivotLayouts))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSourceContent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseExtendedScanStatus))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseBasicScanData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePivotTable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseBool))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseAssignUsers))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseUserData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseNameList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePredefinedCommands))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCustomFieldValues))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCustomFields))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultGraph))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseResultPaths))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceFileNames))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceResultPath))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceScanResults))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponceQuerisForScan))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSQueryVersionDetailsResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseQueriesCategories))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePresetDetails))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxQueryCollectionResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponsePresetList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseInstallationSettings))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWsResponseSystemSettings))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSystemLanguages))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseUsersLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCompaniesLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSPLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerManagersLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWsResponseCompanyProperties))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseTeamData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSBasicRepsonse {
        
        private bool isSuccesfullField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public bool IsSuccesfull {
            get {
                return this.isSuccesfullField;
            }
            set {
                this.isSuccesfullField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxDomainUser {
        
        private string usernameField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string emailField;
        
        private string uPNField;
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSActiveDirectoryDomainDetails {
        
        private string netbiosNameField;
        
        private string fullyQualifiedNameField;
        
        private bool isMappedToLdapField;
        
        private bool hasDomainUsersField;
        
        /// <remarks/>
        public string NetbiosName {
            get {
                return this.netbiosNameField;
            }
            set {
                this.netbiosNameField = value;
            }
        }
        
        /// <remarks/>
        public string FullyQualifiedName {
            get {
                return this.fullyQualifiedNameField;
            }
            set {
                this.fullyQualifiedNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMappedToLdap {
            get {
                return this.isMappedToLdapField;
            }
            set {
                this.isMappedToLdapField = value;
            }
        }
        
        /// <remarks/>
        public bool HasDomainUsers {
            get {
                return this.hasDomainUsersField;
            }
            set {
                this.hasDomainUsersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProfileData {
        
        private string userNameField;
        
        private string firstNameField;
        
        private int userPreferedLanguageLCIDField;
        
        private string lastNameField;
        
        private string jobTitleField;
        
        private string emailField;
        
        private string phoneField;
        
        private string cellPhoneField;
        
        private string skypeField;
        
        private string countryField;
        
        private bool auditUserField;
        
        private System.DateTime lastLoginDateField;
        
        private string userTeamsField;
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public int UserPreferedLanguageLCID {
            get {
                return this.userPreferedLanguageLCIDField;
            }
            set {
                this.userPreferedLanguageLCIDField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string JobTitle {
            get {
                return this.jobTitleField;
            }
            set {
                this.jobTitleField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string CellPhone {
            get {
                return this.cellPhoneField;
            }
            set {
                this.cellPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string Skype {
            get {
                return this.skypeField;
            }
            set {
                this.skypeField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public bool AuditUser {
            get {
                return this.auditUserField;
            }
            set {
                this.auditUserField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastLoginDate {
            get {
                return this.lastLoginDateField;
            }
            set {
                this.lastLoginDateField = value;
            }
        }
        
        /// <remarks/>
        public string UserTeams {
            get {
                return this.userTeamsField;
            }
            set {
                this.userTeamsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class WebClientApprovedUser {
        
        private int userIDField;
        
        private string userNameField;
        
        private string companyIDField;
        
        private System.DateTime expirationDateField;
        
        private string teamIdField;
        
        private string loginUrlField;
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyID {
            get {
                return this.companyIDField;
            }
            set {
                this.companyIDField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        public string TeamId {
            get {
                return this.teamIdField;
            }
            set {
                this.teamIdField = value;
            }
        }
        
        /// <remarks/>
        public string LoginUrl {
            get {
                return this.loginUrlField;
            }
            set {
                this.loginUrlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class WebClientPendingUser {
        
        private long idField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string passwordField;
        
        private string emailField;
        
        private string jobTitleField;
        
        private string userNameField;
        
        private string phoneField;
        
        private string cellPhoneField;
        
        private string skypeField;
        
        private string companyIDField;
        
        private string companyNameField;
        
        private string countryField;
        
        private Group[] groupsField;
        
        private CxDateTime createdDateField;
        
        private bool auditUserField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string JobTitle {
            get {
                return this.jobTitleField;
            }
            set {
                this.jobTitleField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string CellPhone {
            get {
                return this.cellPhoneField;
            }
            set {
                this.cellPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string Skype {
            get {
                return this.skypeField;
            }
            set {
                this.skypeField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyID {
            get {
                return this.companyIDField;
            }
            set {
                this.companyIDField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public Group[] Groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime CreatedDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public bool AuditUser {
            get {
                return this.auditUserField;
            }
            set {
                this.auditUserField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HierarchyGroupNode))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class Group {
        
        private string groupNameField;
        
        private string idField;
        
        private GroupType typeField;
        
        private string guidField;
        
        private string fullPathField;
        
        private string pathField;
        
        /// <remarks/>
        public string GroupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public GroupType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Guid {
            get {
                return this.guidField;
            }
            set {
                this.guidField = value;
            }
        }
        
        /// <remarks/>
        public string FullPath {
            get {
                return this.fullPathField;
            }
            set {
                this.fullPathField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum GroupType {
        
        /// <remarks/>
        Team,
        
        /// <remarks/>
        Company,
        
        /// <remarks/>
        SP,
        
        /// <remarks/>
        Server,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class HierarchyGroupNode : Group {
        
        private HierarchyGroupNode[] childsField;
        
        private bool membershipField;
        
        /// <remarks/>
        public HierarchyGroupNode[] Childs {
            get {
                return this.childsField;
            }
            set {
                this.childsField = value;
            }
        }
        
        /// <remarks/>
        public bool Membership {
            get {
                return this.membershipField;
            }
            set {
                this.membershipField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxDateTime {
        
        private int hourField;
        
        private int minuteField;
        
        private int secondField;
        
        private int dayField;
        
        private int monthField;
        
        private int yearField;
        
        /// <remarks/>
        public int Hour {
            get {
                return this.hourField;
            }
            set {
                this.hourField = value;
            }
        }
        
        /// <remarks/>
        public int Minute {
            get {
                return this.minuteField;
            }
            set {
                this.minuteField = value;
            }
        }
        
        /// <remarks/>
        public int Second {
            get {
                return this.secondField;
            }
            set {
                this.secondField = value;
            }
        }
        
        /// <remarks/>
        public int Day {
            get {
                return this.dayField;
            }
            set {
                this.dayField = value;
            }
        }
        
        /// <remarks/>
        public int Month {
            get {
                return this.monthField;
            }
            set {
                this.monthField = value;
            }
        }
        
        /// <remarks/>
        public int Year {
            get {
                return this.yearField;
            }
            set {
                this.yearField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ResultState {
        
        private string resultNameField;
        
        private long resultIDField;
        
        /// <remarks/>
        public string ResultName {
            get {
                return this.resultNameField;
            }
            set {
                this.resultNameField = value;
            }
        }
        
        /// <remarks/>
        public long ResultID {
            get {
                return this.resultIDField;
            }
            set {
                this.resultIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSRequestDeleteScans {
        
        private string sessionIDField;
        
        private long[] scanIDsField;
        
        private DeleteFlags flagsField;
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        public long[] ScanIDs {
            get {
                return this.scanIDsField;
            }
            set {
                this.scanIDsField = value;
            }
        }
        
        /// <remarks/>
        public DeleteFlags Flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum DeleteFlags {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        RunningScans = 2,
        
        /// <remarks/>
        OnlyAllowedProjects = 4,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSRequestScanLogUnfinishedScan))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSRequestScanLogFinishedScan))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSRequestScanLogFailedScan))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public abstract partial class CxWSRequestScanLog {
        
        private string sessionIDField;
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSRequestScanLogUnfinishedScan : CxWSRequestScanLog {
        
        private long scanRequestIdField;
        
        /// <remarks/>
        public long ScanRequestId {
            get {
                return this.scanRequestIdField;
            }
            set {
                this.scanRequestIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSRequestScanLogFinishedScan : CxWSRequestScanLog {
        
        private long scanIdField;
        
        /// <remarks/>
        public long ScanId {
            get {
                return this.scanIdField;
            }
            set {
                this.scanIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSRequestScanLogFailedScan : CxWSRequestScanLog {
        
        private long idField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWsScanCompareCount {
        
        private int newField;
        
        private int fixedField;
        
        private int reOccuredField;
        
        /// <remarks/>
        public int New {
            get {
                return this.newField;
            }
            set {
                this.newField = value;
            }
        }
        
        /// <remarks/>
        public int Fixed {
            get {
                return this.fixedField;
            }
            set {
                this.fixedField = value;
            }
        }
        
        /// <remarks/>
        public int ReOccured {
            get {
                return this.reOccuredField;
            }
            set {
                this.reOccuredField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSQueryLanguageState {
        
        private int languageIDField;
        
        private string languageNameField;
        
        private string languageHashField;
        
        private System.DateTime stateCreationDateField;
        
        /// <remarks/>
        public int LanguageID {
            get {
                return this.languageIDField;
            }
            set {
                this.languageIDField = value;
            }
        }
        
        /// <remarks/>
        public string LanguageName {
            get {
                return this.languageNameField;
            }
            set {
                this.languageNameField = value;
            }
        }
        
        /// <remarks/>
        public string LanguageHash {
            get {
                return this.languageHashField;
            }
            set {
                this.languageHashField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StateCreationDate {
            get {
                return this.stateCreationDateField;
            }
            set {
                this.stateCreationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class PartialSASTScansDTO {
        
        private string abortedMessageField;
        
        private SASTScanAbortedStatus abortedStatusField;
        
        /// <remarks/>
        public string AbortedMessage {
            get {
                return this.abortedMessageField;
            }
            set {
                this.abortedMessageField = value;
            }
        }
        
        /// <remarks/>
        public SASTScanAbortedStatus AbortedStatus {
            get {
                return this.abortedStatusField;
            }
            set {
                this.abortedStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum SASTScanAbortedStatus {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Queries,
        
        /// <remarks/>
        Stages,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class Vulerability {
        
        private string nameField;
        
        private string severityField;
        
        private long countField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ScanDisplayDataExtended))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ScanDisplayData {
        
        private long scanIDField;
        
        private bool isAllowedToDeleteField;
        
        private CxDateTime queuedDateTimeField;
        
        private int riskLevelScoreField;
        
        private CxDateTime finishedDateTimeField;
        
        private long projectIdField;
        
        private string projectNameField;
        
        private string initiatorNameField;
        
        private string teamNameField;
        
        private bool isIncrementalField;
        
        private string cxVersionField;
        
        private long lOCField;
        
        private int highSeverityResultsField;
        
        private int mediumSeverityResultsField;
        
        private int lowSeverityResultsField;
        
        private string commentsField;
        
        private ScanType scanDisplayTypeField;
        
        private string serverNameField;
        
        private string originField;
        
        private string failedLOCField;
        
        private CxDateTime statisticsCalculationDateField;
        
        private bool isPublicField;
        
        private bool isLockedField;
        
        /// <remarks/>
        public long ScanID {
            get {
                return this.scanIDField;
            }
            set {
                this.scanIDField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToDelete {
            get {
                return this.isAllowedToDeleteField;
            }
            set {
                this.isAllowedToDeleteField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime QueuedDateTime {
            get {
                return this.queuedDateTimeField;
            }
            set {
                this.queuedDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public int RiskLevelScore {
            get {
                return this.riskLevelScoreField;
            }
            set {
                this.riskLevelScoreField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime FinishedDateTime {
            get {
                return this.finishedDateTimeField;
            }
            set {
                this.finishedDateTimeField = value;
            }
        }
        
        /// <remarks/>
        public long ProjectId {
            get {
                return this.projectIdField;
            }
            set {
                this.projectIdField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public string InitiatorName {
            get {
                return this.initiatorNameField;
            }
            set {
                this.initiatorNameField = value;
            }
        }
        
        /// <remarks/>
        public string TeamName {
            get {
                return this.teamNameField;
            }
            set {
                this.teamNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsIncremental {
            get {
                return this.isIncrementalField;
            }
            set {
                this.isIncrementalField = value;
            }
        }
        
        /// <remarks/>
        public string CxVersion {
            get {
                return this.cxVersionField;
            }
            set {
                this.cxVersionField = value;
            }
        }
        
        /// <remarks/>
        public long LOC {
            get {
                return this.lOCField;
            }
            set {
                this.lOCField = value;
            }
        }
        
        /// <remarks/>
        public int HighSeverityResults {
            get {
                return this.highSeverityResultsField;
            }
            set {
                this.highSeverityResultsField = value;
            }
        }
        
        /// <remarks/>
        public int MediumSeverityResults {
            get {
                return this.mediumSeverityResultsField;
            }
            set {
                this.mediumSeverityResultsField = value;
            }
        }
        
        /// <remarks/>
        public int LowSeverityResults {
            get {
                return this.lowSeverityResultsField;
            }
            set {
                this.lowSeverityResultsField = value;
            }
        }
        
        /// <remarks/>
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        public ScanType ScanDisplayType {
            get {
                return this.scanDisplayTypeField;
            }
            set {
                this.scanDisplayTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ServerName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        public string Origin {
            get {
                return this.originField;
            }
            set {
                this.originField = value;
            }
        }
        
        /// <remarks/>
        public string FailedLOC {
            get {
                return this.failedLOCField;
            }
            set {
                this.failedLOCField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime StatisticsCalculationDate {
            get {
                return this.statisticsCalculationDateField;
            }
            set {
                this.statisticsCalculationDateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLocked {
            get {
                return this.isLockedField;
            }
            set {
                this.isLockedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum ScanType {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        ALLSCANS,
        
        /// <remarks/>
        REGULAR,
        
        /// <remarks/>
        SUBSET,
        
        /// <remarks/>
        PARTIAL,
        
        /// <remarks/>
        RUNNING,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ScanDisplayDataExtended : ScanDisplayData {
        
        private string partialScanAboartedMessageField;
        
        private ScanCompletedStatus scanCompletedStatusField;
        
        /// <remarks/>
        public string PartialScanAboartedMessage {
            get {
                return this.partialScanAboartedMessageField;
            }
            set {
                this.partialScanAboartedMessageField = value;
            }
        }
        
        /// <remarks/>
        public ScanCompletedStatus ScanCompletedStatus {
            get {
                return this.scanCompletedStatusField;
            }
            set {
                this.scanCompletedStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum ScanCompletedStatus {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Completed,
        
        /// <remarks/>
        Partial,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class UndeletedObject {
        
        private long idField;
        
        private UndeletedObjectCode errorCodeField;
        
        private string projectNameField;
        
        private string teamPathField;
        
        private double startTimeField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public UndeletedObjectCode ErrorCode {
            get {
                return this.errorCodeField;
            }
            set {
                this.errorCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public string TeamPath {
            get {
                return this.teamPathField;
            }
            set {
                this.teamPathField = value;
            }
        }
        
        /// <remarks/>
        public double StartTime {
            get {
                return this.startTimeField;
            }
            set {
                this.startTimeField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum UndeletedObjectCode {
        
        /// <remarks/>
        Authorization,
        
        /// <remarks/>
        Locked,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSRequestDeleteProjects {
        
        private string sessionIDField;
        
        private long[] projectIDsField;
        
        private DeleteFlags flagsField;
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
        
        /// <remarks/>
        public long[] ProjectIDs {
            get {
                return this.projectIDsField;
            }
            set {
                this.projectIDsField = value;
            }
        }
        
        /// <remarks/>
        public DeleteFlags Flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResultPathDisplayDetails {
        
        private long projectIdField;
        
        private string projectNameField;
        
        private long scanIdField;
        
        private CxDateTime scanDateField;
        
        private long[] pathIdsField;
        
        /// <remarks/>
        public long ProjectId {
            get {
                return this.projectIdField;
            }
            set {
                this.projectIdField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public long ScanId {
            get {
                return this.scanIdField;
            }
            set {
                this.scanIdField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime ScanDate {
            get {
                return this.scanDateField;
            }
            set {
                this.scanDateField = value;
            }
        }
        
        /// <remarks/>
        public long[] PathIds {
            get {
                return this.pathIdsField;
            }
            set {
                this.pathIdsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ResultStateData {
        
        private long scanIdField;
        
        private long pathIdField;
        
        private long projectIdField;
        
        private string remarksField;
        
        private int resultLabelTypeField;
        
        private string dataField;
        
        /// <remarks/>
        public long scanId {
            get {
                return this.scanIdField;
            }
            set {
                this.scanIdField = value;
            }
        }
        
        /// <remarks/>
        public long PathId {
            get {
                return this.pathIdField;
            }
            set {
                this.pathIdField = value;
            }
        }
        
        /// <remarks/>
        public long projectId {
            get {
                return this.projectIdField;
            }
            set {
                this.projectIdField = value;
            }
        }
        
        /// <remarks/>
        public string Remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
        
        /// <remarks/>
        public int ResultLabelType {
            get {
                return this.resultLabelTypeField;
            }
            set {
                this.resultLabelTypeField = value;
            }
        }
        
        /// <remarks/>
        public string data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ScanRiskLevel {
        
        private int quantityField;
        
        private int severityField;
        
        /// <remarks/>
        public int Quantity {
            get {
                return this.quantityField;
            }
            set {
                this.quantityField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProjectScansRiskLevel {
        
        private string labelField;
        
        private ScanRiskLevel scanRiskParamsField;
        
        /// <remarks/>
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        public ScanRiskLevel ScanRiskParams {
            get {
                return this.scanRiskParamsField;
            }
            set {
                this.scanRiskParamsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProjectScansResultSummary {
        
        private string labelField;
        
        private int highField;
        
        private int mediumField;
        
        private int lowField;
        
        private int infoField;
        
        /// <remarks/>
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        public int High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public int Medium {
            get {
                return this.mediumField;
            }
            set {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        public int Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public int Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class UserPermission {
        
        private bool isAllowedToDeleteField;
        
        private bool isAllowedToDuplicateField;
        
        private bool isAllowedToRunField;
        
        private bool isAllowedToUpdateField;
        
        /// <remarks/>
        public bool IsAllowedToDelete {
            get {
                return this.isAllowedToDeleteField;
            }
            set {
                this.isAllowedToDeleteField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToDuplicate {
            get {
                return this.isAllowedToDuplicateField;
            }
            set {
                this.isAllowedToDuplicateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToRun {
            get {
                return this.isAllowedToRunField;
            }
            set {
                this.isAllowedToRunField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToUpdate {
            get {
                return this.isAllowedToUpdateField;
            }
            set {
                this.isAllowedToUpdateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProjectDisplayData {
        
        private UserPermission permissionField;
        
        private long projectIDField;
        
        private string serviceProviderField;
        
        private string companyField;
        
        private string ownerField;
        
        private string projectNameField;
        
        private string groupField;
        
        private string presetField;
        
        private CxDateTime lastScanDateField;
        
        private int totalScansField;
        
        private bool isPublicField;
        
        private int totalOsaScansField;
        
        /// <remarks/>
        public UserPermission Permission {
            get {
                return this.permissionField;
            }
            set {
                this.permissionField = value;
            }
        }
        
        /// <remarks/>
        public long projectID {
            get {
                return this.projectIDField;
            }
            set {
                this.projectIDField = value;
            }
        }
        
        /// <remarks/>
        public string ServiceProvider {
            get {
                return this.serviceProviderField;
            }
            set {
                this.serviceProviderField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public string Group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
        
        /// <remarks/>
        public string Preset {
            get {
                return this.presetField;
            }
            set {
                this.presetField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime LastScanDate {
            get {
                return this.lastScanDateField;
            }
            set {
                this.lastScanDateField = value;
            }
        }
        
        /// <remarks/>
        public int TotalScans {
            get {
                return this.totalScansField;
            }
            set {
                this.totalScansField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        public int TotalOsaScans {
            get {
                return this.totalOsaScansField;
            }
            set {
                this.totalOsaScansField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxProjectData {
        
        private long projectIDField;
        
        private CxProjectSourceType sourceTypeField;
        
        private string companyField;
        
        private string ownerField;
        
        private string projectNameField;
        
        private string groupField;
        
        /// <remarks/>
        public long ProjectID {
            get {
                return this.projectIDField;
            }
            set {
                this.projectIDField = value;
            }
        }
        
        /// <remarks/>
        public CxProjectSourceType SourceType {
            get {
                return this.sourceTypeField;
            }
            set {
                this.sourceTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public string Group {
            get {
                return this.groupField;
            }
            set {
                this.groupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxProjectSourceType {
        
        /// <remarks/>
        LocalPath,
        
        /// <remarks/>
        UNC,
        
        /// <remarks/>
        TFS,
        
        /// <remarks/>
        SVN,
        
        /// <remarks/>
        SourceSafe,
        
        /// <remarks/>
        External,
        
        /// <remarks/>
        CVS,
        
        /// <remarks/>
        Perforce,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class DataRetentionSettings {
        
        private int numOfScansToKeepField;
        
        /// <remarks/>
        public int NumOfScansToKeep {
            get {
                return this.numOfScansToKeepField;
            }
            set {
                this.numOfScansToKeepField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSProjectCustomField {
        
        private long customFieldIdField;
        
        private string valueField;
        
        /// <remarks/>
        public long CustomFieldId {
            get {
                return this.customFieldIdField;
            }
            set {
                this.customFieldIdField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSProjectIssueTrackingSettings {
        
        private long trackingSystemIDField;
        
        private CxWSIssueTrackingParam[] paramsField;
        
        /// <remarks/>
        public long TrackingSystemID {
            get {
                return this.trackingSystemIDField;
            }
            set {
                this.trackingSystemIDField = value;
            }
        }
        
        /// <remarks/>
        public CxWSIssueTrackingParam[] Params {
            get {
                return this.paramsField;
            }
            set {
                this.paramsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingParam {
        
        private string nameField;
        
        private object valueField;
        
        private string typeField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ScanAction {
        
        private string[] parametersField;
        
        private ScanEventType triggerField;
        
        private ScanActionType actionField;
        
        /// <remarks/>
        public string[] Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
        
        /// <remarks/>
        public ScanEventType Trigger {
            get {
                return this.triggerField;
            }
            set {
                this.triggerField = value;
            }
        }
        
        /// <remarks/>
        public ScanActionType Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum ScanEventType {
        
        /// <remarks/>
        BeforeScanStarts,
        
        /// <remarks/>
        AfterScanSucceeds,
        
        /// <remarks/>
        OnScanFailure,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum ScanActionType {
        
        /// <remarks/>
        EmailNotification,
        
        /// <remarks/>
        PostScanAction,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ScanActionSettings {
        
        private ScanAction[] scanActionListField;
        
        /// <remarks/>
        public ScanAction[] ScanActionList {
            get {
                return this.scanActionListField;
            }
            set {
                this.scanActionListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ScheduleSettings {
        
        private ScheduleType scheduleField;
        
        private DayOfWeek[] scheduledDaysField;
        
        private CxDateTime timeField;
        
        private CxDateTime startSchedulingPeriodField;
        
        private CxDateTime endSchedulingPeriodField;
        
        private int schedulingFrequencyField;
        
        /// <remarks/>
        public ScheduleType Schedule {
            get {
                return this.scheduleField;
            }
            set {
                this.scheduleField = value;
            }
        }
        
        /// <remarks/>
        public DayOfWeek[] ScheduledDays {
            get {
                return this.scheduledDaysField;
            }
            set {
                this.scheduledDaysField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime StartSchedulingPeriod {
            get {
                return this.startSchedulingPeriodField;
            }
            set {
                this.startSchedulingPeriodField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime EndSchedulingPeriod {
            get {
                return this.endSchedulingPeriodField;
            }
            set {
                this.endSchedulingPeriodField = value;
            }
        }
        
        /// <remarks/>
        public int SchedulingFrequency {
            get {
                return this.schedulingFrequencyField;
            }
            set {
                this.schedulingFrequencyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum ScheduleType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Now,
        
        /// <remarks/>
        Weekly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum DayOfWeek {
        
        /// <remarks/>
        Sunday,
        
        /// <remarks/>
        Monday,
        
        /// <remarks/>
        Tuesday,
        
        /// <remarks/>
        Wednesday,
        
        /// <remarks/>
        Thursday,
        
        /// <remarks/>
        Friday,
        
        /// <remarks/>
        Saturday,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProjectConfiguration {
        
        private ProjectSettings projectSettingsField;
        
        private SourceCodeSettings sourceCodeSettingsField;
        
        private ScheduleSettings scheduleSettingsField;
        
        private ScanActionSettings scanActionSettingsField;
        
        private CxWSProjectIssueTrackingSettings projectIssueTrackingSettingsField;
        
        private CxWSProjectCustomField[] customFieldsField;
        
        private DataRetentionSettings dataRetentionSettingsField;
        
        /// <remarks/>
        public ProjectSettings ProjectSettings {
            get {
                return this.projectSettingsField;
            }
            set {
                this.projectSettingsField = value;
            }
        }
        
        /// <remarks/>
        public SourceCodeSettings SourceCodeSettings {
            get {
                return this.sourceCodeSettingsField;
            }
            set {
                this.sourceCodeSettingsField = value;
            }
        }
        
        /// <remarks/>
        public ScheduleSettings ScheduleSettings {
            get {
                return this.scheduleSettingsField;
            }
            set {
                this.scheduleSettingsField = value;
            }
        }
        
        /// <remarks/>
        public ScanActionSettings ScanActionSettings {
            get {
                return this.scanActionSettingsField;
            }
            set {
                this.scanActionSettingsField = value;
            }
        }
        
        /// <remarks/>
        public CxWSProjectIssueTrackingSettings ProjectIssueTrackingSettings {
            get {
                return this.projectIssueTrackingSettingsField;
            }
            set {
                this.projectIssueTrackingSettingsField = value;
            }
        }
        
        /// <remarks/>
        public CxWSProjectCustomField[] CustomFields {
            get {
                return this.customFieldsField;
            }
            set {
                this.customFieldsField = value;
            }
        }
        
        /// <remarks/>
        public DataRetentionSettings DataRetentionSettings {
            get {
                return this.dataRetentionSettingsField;
            }
            set {
                this.dataRetentionSettingsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProjectSettings {
        
        private long projectIDField;
        
        private string projectNameField;
        
        private long presetIDField;
        
        private long taskIdField;
        
        private string associatedGroupIDField;
        
        private long scanConfigurationIDField;
        
        private string descriptionField;
        
        private string ownerField;
        
        private bool isPublicField;
        
        private ProjectSharedLocation openSourceSettingsField;
        
        private ProjectOrigin openSourceAnalysisOriginField;
        
        /// <remarks/>
        public long projectID {
            get {
                return this.projectIDField;
            }
            set {
                this.projectIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public long PresetID {
            get {
                return this.presetIDField;
            }
            set {
                this.presetIDField = value;
            }
        }
        
        /// <remarks/>
        public long TaskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public string AssociatedGroupID {
            get {
                return this.associatedGroupIDField;
            }
            set {
                this.associatedGroupIDField = value;
            }
        }
        
        /// <remarks/>
        public long ScanConfigurationID {
            get {
                return this.scanConfigurationIDField;
            }
            set {
                this.scanConfigurationIDField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        public ProjectSharedLocation OpenSourceSettings {
            get {
                return this.openSourceSettingsField;
            }
            set {
                this.openSourceSettingsField = value;
            }
        }
        
        /// <remarks/>
        public ProjectOrigin OpenSourceAnalysisOrigin {
            get {
                return this.openSourceAnalysisOriginField;
            }
            set {
                this.openSourceAnalysisOriginField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProjectSharedLocation {
        
        private string[] pathField;
        
        private Credentials credentialsField;
        
        /// <remarks/>
        public string[] Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public Credentials Credentials {
            get {
                return this.credentialsField;
            }
            set {
                this.credentialsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class Credentials {
        
        private string userField;
        
        private string passField;
        
        /// <remarks/>
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public string Pass {
            get {
                return this.passField;
            }
            set {
                this.passField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum ProjectOrigin {
        
        /// <remarks/>
        LocalPath,
        
        /// <remarks/>
        SharedPath,
        
        /// <remarks/>
        TFS,
        
        /// <remarks/>
        External,
        
        /// <remarks/>
        SVN,
        
        /// <remarks/>
        CVS,
        
        /// <remarks/>
        GIT,
        
        /// <remarks/>
        Perforce,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class SourceCodeSettings {
        
        private SourceLocationType sourceOriginField;
        
        private Credentials userCredentialsField;
        
        private ScanPath[] pathListField;
        
        private SourceControlSettings sourceControlSettingField;
        
        private LocalCodeContainer packagedCodeField;
        
        private string sourcePullingActionField;
        
        private SourceFilterPatterns sourceFilterListsField;
        
        /// <remarks/>
        public SourceLocationType SourceOrigin {
            get {
                return this.sourceOriginField;
            }
            set {
                this.sourceOriginField = value;
            }
        }
        
        /// <remarks/>
        public Credentials UserCredentials {
            get {
                return this.userCredentialsField;
            }
            set {
                this.userCredentialsField = value;
            }
        }
        
        /// <remarks/>
        public ScanPath[] PathList {
            get {
                return this.pathListField;
            }
            set {
                this.pathListField = value;
            }
        }
        
        /// <remarks/>
        public SourceControlSettings SourceControlSetting {
            get {
                return this.sourceControlSettingField;
            }
            set {
                this.sourceControlSettingField = value;
            }
        }
        
        /// <remarks/>
        public LocalCodeContainer PackagedCode {
            get {
                return this.packagedCodeField;
            }
            set {
                this.packagedCodeField = value;
            }
        }
        
        /// <remarks/>
        public string SourcePullingAction {
            get {
                return this.sourcePullingActionField;
            }
            set {
                this.sourcePullingActionField = value;
            }
        }
        
        /// <remarks/>
        public SourceFilterPatterns SourceFilterLists {
            get {
                return this.sourceFilterListsField;
            }
            set {
                this.sourceFilterListsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum SourceLocationType {
        
        /// <remarks/>
        Local,
        
        /// <remarks/>
        Shared,
        
        /// <remarks/>
        SourceControl,
        
        /// <remarks/>
        SourcePulling,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ScanPath {
        
        private string pathField;
        
        private bool includeSubTreeField;
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public bool IncludeSubTree {
            get {
                return this.includeSubTreeField;
            }
            set {
                this.includeSubTreeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class SourceControlSettings {
        
        private int portField;
        
        private bool useSSLField;
        
        private bool useSSHField;
        
        private string serverNameField;
        
        private RepositoryType repositoryField;
        
        private Credentials userCredentialsField;
        
        private SourceControlProtocolType protocolField;
        
        private string repositoryNameField;
        
        private string protocolParametersField;
        
        private string gITBranchField;
        
        private GitLsRemoteViewType gitLsViewTypeField;
        
        private string sSHPublicKeyField;
        
        private string sSHPrivateKeyField;
        
        private GitHubIntegrationSettings gitHubSettingsField;
        
        private CxWSPerforceBrowsingMode perforceBrowsingModeField;
        
        /// <remarks/>
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        public bool UseSSL {
            get {
                return this.useSSLField;
            }
            set {
                this.useSSLField = value;
            }
        }
        
        /// <remarks/>
        public bool UseSSH {
            get {
                return this.useSSHField;
            }
            set {
                this.useSSHField = value;
            }
        }
        
        /// <remarks/>
        public string ServerName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        public RepositoryType Repository {
            get {
                return this.repositoryField;
            }
            set {
                this.repositoryField = value;
            }
        }
        
        /// <remarks/>
        public Credentials UserCredentials {
            get {
                return this.userCredentialsField;
            }
            set {
                this.userCredentialsField = value;
            }
        }
        
        /// <remarks/>
        public SourceControlProtocolType Protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <remarks/>
        public string RepositoryName {
            get {
                return this.repositoryNameField;
            }
            set {
                this.repositoryNameField = value;
            }
        }
        
        /// <remarks/>
        public string ProtocolParameters {
            get {
                return this.protocolParametersField;
            }
            set {
                this.protocolParametersField = value;
            }
        }
        
        /// <remarks/>
        public string GITBranch {
            get {
                return this.gITBranchField;
            }
            set {
                this.gITBranchField = value;
            }
        }
        
        /// <remarks/>
        public GitLsRemoteViewType GitLsViewType {
            get {
                return this.gitLsViewTypeField;
            }
            set {
                this.gitLsViewTypeField = value;
            }
        }
        
        /// <remarks/>
        public string SSHPublicKey {
            get {
                return this.sSHPublicKeyField;
            }
            set {
                this.sSHPublicKeyField = value;
            }
        }
        
        /// <remarks/>
        public string SSHPrivateKey {
            get {
                return this.sSHPrivateKeyField;
            }
            set {
                this.sSHPrivateKeyField = value;
            }
        }
        
        /// <remarks/>
        public GitHubIntegrationSettings GitHubSettings {
            get {
                return this.gitHubSettingsField;
            }
            set {
                this.gitHubSettingsField = value;
            }
        }
        
        /// <remarks/>
        public CxWSPerforceBrowsingMode PerforceBrowsingMode {
            get {
                return this.perforceBrowsingModeField;
            }
            set {
                this.perforceBrowsingModeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum RepositoryType {
        
        /// <remarks/>
        TFS,
        
        /// <remarks/>
        SVN,
        
        /// <remarks/>
        CVS,
        
        /// <remarks/>
        GIT,
        
        /// <remarks/>
        Perforce,
        
        /// <remarks/>
        NONE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum SourceControlProtocolType {
        
        /// <remarks/>
        WindowsAuthentication,
        
        /// <remarks/>
        SSL,
        
        /// <remarks/>
        SSH,
        
        /// <remarks/>
        PasswordServer,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum GitLsRemoteViewType {
        
        /// <remarks/>
        TAGS,
        
        /// <remarks/>
        HEADS,
        
        /// <remarks/>
        TAGS_AND_HEADS,
        
        /// <remarks/>
        ALL,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class GitHubIntegrationSettings {
        
        private Credentials contributorCredentialsField;
        
        private Credentials ownerCredentialsField;
        
        private int eventsThresholdField;
        
        /// <remarks/>
        public Credentials ContributorCredentials {
            get {
                return this.contributorCredentialsField;
            }
            set {
                this.contributorCredentialsField = value;
            }
        }
        
        /// <remarks/>
        public Credentials OwnerCredentials {
            get {
                return this.ownerCredentialsField;
            }
            set {
                this.ownerCredentialsField = value;
            }
        }
        
        /// <remarks/>
        public int EventsThreshold {
            get {
                return this.eventsThresholdField;
            }
            set {
                this.eventsThresholdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSPerforceBrowsingMode {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Depot,
        
        /// <remarks/>
        Workspace,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class LocalCodeContainer {
        
        private byte[] zippedFileField;
        
        private string fileNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ZippedFile {
            get {
                return this.zippedFileField;
            }
            set {
                this.zippedFileField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class SourceFilterPatterns {
        
        private string excludeFilesPatternsField;
        
        private string excludeFoldersPatternsField;
        
        /// <remarks/>
        public string ExcludeFilesPatterns {
            get {
                return this.excludeFilesPatternsField;
            }
            set {
                this.excludeFilesPatternsField = value;
            }
        }
        
        /// <remarks/>
        public string ExcludeFoldersPatterns {
            get {
                return this.excludeFoldersPatternsField;
            }
            set {
                this.excludeFoldersPatternsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class Action {
        
        private string actionNameField;
        
        /// <remarks/>
        public string ActionName {
            get {
                return this.actionNameField;
            }
            set {
                this.actionNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ConfigurationSet {
        
        private string configSetNameField;
        
        private long idField;
        
        /// <remarks/>
        public string ConfigSetName {
            get {
                return this.configSetNameField;
            }
            set {
                this.configSetNameField = value;
            }
        }
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResultSummary {
        
        private long queryIdField;
        
        private string queryNameField;
        
        private string queryGroupNameField;
        
        private long countField;
        
        private int severityField;
        
        private long cweField;
        
        /// <remarks/>
        public long QueryId {
            get {
                return this.queryIdField;
            }
            set {
                this.queryIdField = value;
            }
        }
        
        /// <remarks/>
        public string QueryName {
            get {
                return this.queryNameField;
            }
            set {
                this.queryNameField = value;
            }
        }
        
        /// <remarks/>
        public string QueryGroupName {
            get {
                return this.queryGroupNameField;
            }
            set {
                this.queryGroupNameField = value;
            }
        }
        
        /// <remarks/>
        public long Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public long Cwe {
            get {
                return this.cweField;
            }
            set {
                this.cweField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class AuditScanResult {
        
        private long queryIdField;
        
        private string queryNameField;
        
        private string querySourceField;
        
        private int severityField;
        
        private string queryGroupNameField;
        
        private long cWEField;
        
        private long queryVersionCodeField;
        
        private string[] debugMessagesField;
        
        private string[] compilationMessagesField;
        
        private CxWSResultPath[] pathPerResultField;
        
        /// <remarks/>
        public long QueryId {
            get {
                return this.queryIdField;
            }
            set {
                this.queryIdField = value;
            }
        }
        
        /// <remarks/>
        public string QueryName {
            get {
                return this.queryNameField;
            }
            set {
                this.queryNameField = value;
            }
        }
        
        /// <remarks/>
        public string QuerySource {
            get {
                return this.querySourceField;
            }
            set {
                this.querySourceField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string QueryGroupName {
            get {
                return this.queryGroupNameField;
            }
            set {
                this.queryGroupNameField = value;
            }
        }
        
        /// <remarks/>
        public long CWE {
            get {
                return this.cWEField;
            }
            set {
                this.cWEField = value;
            }
        }
        
        /// <remarks/>
        public long QueryVersionCode {
            get {
                return this.queryVersionCodeField;
            }
            set {
                this.queryVersionCodeField = value;
            }
        }
        
        /// <remarks/>
        public string[] DebugMessages {
            get {
                return this.debugMessagesField;
            }
            set {
                this.debugMessagesField = value;
            }
        }
        
        /// <remarks/>
        public string[] CompilationMessages {
            get {
                return this.compilationMessagesField;
            }
            set {
                this.compilationMessagesField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResultPath[] PathPerResult {
            get {
                return this.pathPerResultField;
            }
            set {
                this.pathPerResultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResultPath {
        
        private long similarityIdField;
        
        private long pathIdField;
        
        private string commentField;
        
        private int stateField;
        
        private int severityField;
        
        private string assignedUserField;
        
        private CxWSPathNode[] nodesField;
        
        /// <remarks/>
        public long SimilarityId {
            get {
                return this.similarityIdField;
            }
            set {
                this.similarityIdField = value;
            }
        }
        
        /// <remarks/>
        public long PathId {
            get {
                return this.pathIdField;
            }
            set {
                this.pathIdField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public int State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string AssignedUser {
            get {
                return this.assignedUserField;
            }
            set {
                this.assignedUserField = value;
            }
        }
        
        /// <remarks/>
        public CxWSPathNode[] Nodes {
            get {
                return this.nodesField;
            }
            set {
                this.nodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSPathNode {
        
        private int columnField;
        
        private string fullNameField;
        
        private string fileNameField;
        
        private int lengthField;
        
        private int lineField;
        
        private string nameField;
        
        private int dOM_IdField;
        
        private int methodLineField;
        
        private int pathNodeIdField;
        
        /// <remarks/>
        public int Column {
            get {
                return this.columnField;
            }
            set {
                this.columnField = value;
            }
        }
        
        /// <remarks/>
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public int Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        public int Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int DOM_Id {
            get {
                return this.dOM_IdField;
            }
            set {
                this.dOM_IdField = value;
            }
        }
        
        /// <remarks/>
        public int MethodLine {
            get {
                return this.methodLineField;
            }
            set {
                this.methodLineField = value;
            }
        }
        
        /// <remarks/>
        public int PathNodeId {
            get {
                return this.pathNodeIdField;
            }
            set {
                this.pathNodeIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class AuditResultsCollection {
        
        private AuditScanResult[] resultsField;
        
        private long failedLOCField;
        
        /// <remarks/>
        public AuditScanResult[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
        
        /// <remarks/>
        public long FailedLOC {
            get {
                return this.failedLOCField;
            }
            set {
                this.failedLOCField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProjectBasicSettings {
        
        private string projectNameField;
        
        private string associatedGroupIDField;
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public string AssociatedGroupID {
            get {
                return this.associatedGroupIDField;
            }
            set {
                this.associatedGroupIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseBasicProjectData {
        
        private string nameField;
        
        private long idField;
        
        private CxWSResponseBasicScanData[] scansField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResponseBasicScanData[] scans {
            get {
                return this.scansField;
            }
            set {
                this.scansField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseBasicScanData : CxWSBasicRepsonse {
        
        private string nameField;
        
        private long idField;
        
        private string sourceIdField;
        
        private string commentField;
        
        private long resultIdField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string SourceId {
            get {
                return this.sourceIdField;
            }
            set {
                this.sourceIdField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSDataRetentionRequest {
        
        private int idField;
        
        private System.DateTime requestDateField;
        
        private System.Nullable<System.DateTime> requestEndDateField;
        
        private string initiatorNameField;
        
        private System.Nullable<System.DateTime> requestTimeLimitationField;
        
        private CxDataRetentionStatus stageField;
        
        private System.Nullable<int> currentProgressField;
        
        private System.Nullable<int> totalProgressField;
        
        private string stageErrorField;
        
        private bool isDoneField;
        
        private CxDataRetentionConfiguration originalConfigurationField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime RequestDate {
            get {
                return this.requestDateField;
            }
            set {
                this.requestDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> RequestEndDate {
            get {
                return this.requestEndDateField;
            }
            set {
                this.requestEndDateField = value;
            }
        }
        
        /// <remarks/>
        public string InitiatorName {
            get {
                return this.initiatorNameField;
            }
            set {
                this.initiatorNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> RequestTimeLimitation {
            get {
                return this.requestTimeLimitationField;
            }
            set {
                this.requestTimeLimitationField = value;
            }
        }
        
        /// <remarks/>
        public CxDataRetentionStatus Stage {
            get {
                return this.stageField;
            }
            set {
                this.stageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> CurrentProgress {
            get {
                return this.currentProgressField;
            }
            set {
                this.currentProgressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TotalProgress {
            get {
                return this.totalProgressField;
            }
            set {
                this.totalProgressField = value;
            }
        }
        
        /// <remarks/>
        public string StageError {
            get {
                return this.stageErrorField;
            }
            set {
                this.stageErrorField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDone {
            get {
                return this.isDoneField;
            }
            set {
                this.isDoneField = value;
            }
        }
        
        /// <remarks/>
        public CxDataRetentionConfiguration OriginalConfiguration {
            get {
                return this.originalConfigurationField;
            }
            set {
                this.originalConfigurationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxDataRetentionStatus {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Cleanup,
        
        /// <remarks/>
        Deletion,
        
        /// <remarks/>
        Stopping,
        
        /// <remarks/>
        Stopped,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        Finished,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxDataRetentionConfiguration {
        
        private CxDataRetentionType dataRetentionTypeField;
        
        private int numOfScansToPreserveField;
        
        private long startDateField;
        
        private long endDateField;
        
        private System.Nullable<long> durationLimitInHoursField;
        
        /// <remarks/>
        public CxDataRetentionType DataRetentionType {
            get {
                return this.dataRetentionTypeField;
            }
            set {
                this.dataRetentionTypeField = value;
            }
        }
        
        /// <remarks/>
        public int NumOfScansToPreserve {
            get {
                return this.numOfScansToPreserveField;
            }
            set {
                this.numOfScansToPreserveField = value;
            }
        }
        
        /// <remarks/>
        public long StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public long EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> DurationLimitInHours {
            get {
                return this.durationLimitInHoursField;
            }
            set {
                this.durationLimitInHoursField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxDataRetentionType {
        
        /// <remarks/>
        NumOfScansToPreserve,
        
        /// <remarks/>
        DatesRange,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIdNamePair {
        
        private int idField;
        
        private string nameField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSLdapDomainMappingSettings {
        
        private bool isMappedToDomainField;
        
        private string domainNetbiosNameField;
        
        private string domainFQnameField;
        
        /// <remarks/>
        public bool IsMappedToDomain {
            get {
                return this.isMappedToDomainField;
            }
            set {
                this.isMappedToDomainField = value;
            }
        }
        
        /// <remarks/>
        public string DomainNetbiosName {
            get {
                return this.domainNetbiosNameField;
            }
            set {
                this.domainNetbiosNameField = value;
            }
        }
        
        /// <remarks/>
        public string DomainFQname {
            get {
                return this.domainFQnameField;
            }
            set {
                this.domainFQnameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSLdapAdvancedRoleMapping {
        
        private string scannerWithoutRoleAttributesGroupDnListField;
        
        private string scannerWithNotExploitableGroupDnListField;
        
        private string scannerWithDeleteGroupDnListField;
        
        private string scannerWithNotExploitableAndDeleteGroupDnListField;
        
        private string reviewerWithoutRoleAttributesGroupDnListField;
        
        private string reviewerWithSeverityStatusChangeGroupDnListField;
        
        /// <remarks/>
        public string ScannerWithoutRoleAttributesGroupDnList {
            get {
                return this.scannerWithoutRoleAttributesGroupDnListField;
            }
            set {
                this.scannerWithoutRoleAttributesGroupDnListField = value;
            }
        }
        
        /// <remarks/>
        public string ScannerWithNotExploitableGroupDnList {
            get {
                return this.scannerWithNotExploitableGroupDnListField;
            }
            set {
                this.scannerWithNotExploitableGroupDnListField = value;
            }
        }
        
        /// <remarks/>
        public string ScannerWithDeleteGroupDnList {
            get {
                return this.scannerWithDeleteGroupDnListField;
            }
            set {
                this.scannerWithDeleteGroupDnListField = value;
            }
        }
        
        /// <remarks/>
        public string ScannerWithNotExploitableAndDeleteGroupDnList {
            get {
                return this.scannerWithNotExploitableAndDeleteGroupDnListField;
            }
            set {
                this.scannerWithNotExploitableAndDeleteGroupDnListField = value;
            }
        }
        
        /// <remarks/>
        public string ReviewerWithoutRoleAttributesGroupDnList {
            get {
                return this.reviewerWithoutRoleAttributesGroupDnListField;
            }
            set {
                this.reviewerWithoutRoleAttributesGroupDnListField = value;
            }
        }
        
        /// <remarks/>
        public string ReviewerWithSeverityStatusChangeGroupDnList {
            get {
                return this.reviewerWithSeverityStatusChangeGroupDnListField;
            }
            set {
                this.reviewerWithSeverityStatusChangeGroupDnListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSLdapRoleMapping {
        
        private System.Nullable<long> defaultRoleIdField;
        
        private bool advancedRoleMappingEnabledField;
        
        private bool defaultRoleApplyNotExploitableField;
        
        private bool defaultRoleDeleteProjectsAndScansField;
        
        private bool defaultRoleAllowStatusSeverityChangesField;
        
        private CxWSLdapAdvancedRoleMapping wsLdapAdvancedRoleMappingField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<long> DefaultRoleId {
            get {
                return this.defaultRoleIdField;
            }
            set {
                this.defaultRoleIdField = value;
            }
        }
        
        /// <remarks/>
        public bool AdvancedRoleMappingEnabled {
            get {
                return this.advancedRoleMappingEnabledField;
            }
            set {
                this.advancedRoleMappingEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultRoleApplyNotExploitable {
            get {
                return this.defaultRoleApplyNotExploitableField;
            }
            set {
                this.defaultRoleApplyNotExploitableField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultRoleDeleteProjectsAndScans {
            get {
                return this.defaultRoleDeleteProjectsAndScansField;
            }
            set {
                this.defaultRoleDeleteProjectsAndScansField = value;
            }
        }
        
        /// <remarks/>
        public bool DefaultRoleAllowStatusSeverityChanges {
            get {
                return this.defaultRoleAllowStatusSeverityChangesField;
            }
            set {
                this.defaultRoleAllowStatusSeverityChangesField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapAdvancedRoleMapping WsLdapAdvancedRoleMapping {
            get {
                return this.wsLdapAdvancedRoleMappingField;
            }
            set {
                this.wsLdapAdvancedRoleMappingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSLdapServerSyncSettings {
        
        private bool enabledField;
        
        private string additionalGroupDNField;
        
        private string groupObjectClassField;
        
        private string groupObjectFilterField;
        
        private string groupIdAttributeField;
        
        private string groupNameAttributeField;
        
        private string groupMembersAttributeField;
        
        private string userMemberShipAttributeField;
        
        private CxWSLdapRoleMapping ldapRoleMappingField;
        
        /// <remarks/>
        public bool Enabled {
            get {
                return this.enabledField;
            }
            set {
                this.enabledField = value;
            }
        }
        
        /// <remarks/>
        public string AdditionalGroupDN {
            get {
                return this.additionalGroupDNField;
            }
            set {
                this.additionalGroupDNField = value;
            }
        }
        
        /// <remarks/>
        public string GroupObjectClass {
            get {
                return this.groupObjectClassField;
            }
            set {
                this.groupObjectClassField = value;
            }
        }
        
        /// <remarks/>
        public string GroupObjectFilter {
            get {
                return this.groupObjectFilterField;
            }
            set {
                this.groupObjectFilterField = value;
            }
        }
        
        /// <remarks/>
        public string GroupIdAttribute {
            get {
                return this.groupIdAttributeField;
            }
            set {
                this.groupIdAttributeField = value;
            }
        }
        
        /// <remarks/>
        public string GroupNameAttribute {
            get {
                return this.groupNameAttributeField;
            }
            set {
                this.groupNameAttributeField = value;
            }
        }
        
        /// <remarks/>
        public string GroupMembersAttribute {
            get {
                return this.groupMembersAttributeField;
            }
            set {
                this.groupMembersAttributeField = value;
            }
        }
        
        /// <remarks/>
        public string UserMemberShipAttribute {
            get {
                return this.userMemberShipAttributeField;
            }
            set {
                this.userMemberShipAttributeField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapRoleMapping LdapRoleMapping {
            get {
                return this.ldapRoleMappingField;
            }
            set {
                this.ldapRoleMappingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSLdapServerConfiguration {
        
        private int idField;
        
        private string nameField;
        
        private CxWSLdapDirectoryType directoryTypeField;
        
        private CxWSLdapServerConfigurationAction actionField;
        
        private string hostNameField;
        
        private int portField;
        
        private bool useSSLField;
        
        private bool verifySslCertificateField;
        
        private string usernameField;
        
        private string passwordField;
        
        private string baseDnField;
        
        private string additionalUserDnField;
        
        private string userObjectClassField;
        
        private string userObjectFilterField;
        
        private string usernameAttributeField;
        
        private string userRdnAttributeField;
        
        private string firstNameAttributeField;
        
        private string lastNameAttributeField;
        
        private string emailAttributeField;
        
        private CxWSLdapServerSyncSettings syncSettingsField;
        
        private CxWSLdapDomainMappingSettings domainMapSettingsField;
        
        /// <remarks/>
        public int Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapDirectoryType DirectoryType {
            get {
                return this.directoryTypeField;
            }
            set {
                this.directoryTypeField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapServerConfigurationAction Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        /// <remarks/>
        public string HostName {
            get {
                return this.hostNameField;
            }
            set {
                this.hostNameField = value;
            }
        }
        
        /// <remarks/>
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
            }
        }
        
        /// <remarks/>
        public bool UseSSL {
            get {
                return this.useSSLField;
            }
            set {
                this.useSSLField = value;
            }
        }
        
        /// <remarks/>
        public bool VerifySslCertificate {
            get {
                return this.verifySslCertificateField;
            }
            set {
                this.verifySslCertificateField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string BaseDn {
            get {
                return this.baseDnField;
            }
            set {
                this.baseDnField = value;
            }
        }
        
        /// <remarks/>
        public string AdditionalUserDn {
            get {
                return this.additionalUserDnField;
            }
            set {
                this.additionalUserDnField = value;
            }
        }
        
        /// <remarks/>
        public string UserObjectClass {
            get {
                return this.userObjectClassField;
            }
            set {
                this.userObjectClassField = value;
            }
        }
        
        /// <remarks/>
        public string UserObjectFilter {
            get {
                return this.userObjectFilterField;
            }
            set {
                this.userObjectFilterField = value;
            }
        }
        
        /// <remarks/>
        public string UsernameAttribute {
            get {
                return this.usernameAttributeField;
            }
            set {
                this.usernameAttributeField = value;
            }
        }
        
        /// <remarks/>
        public string UserRdnAttribute {
            get {
                return this.userRdnAttributeField;
            }
            set {
                this.userRdnAttributeField = value;
            }
        }
        
        /// <remarks/>
        public string FirstNameAttribute {
            get {
                return this.firstNameAttributeField;
            }
            set {
                this.firstNameAttributeField = value;
            }
        }
        
        /// <remarks/>
        public string LastNameAttribute {
            get {
                return this.lastNameAttributeField;
            }
            set {
                this.lastNameAttributeField = value;
            }
        }
        
        /// <remarks/>
        public string EmailAttribute {
            get {
                return this.emailAttributeField;
            }
            set {
                this.emailAttributeField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapServerSyncSettings SyncSettings {
            get {
                return this.syncSettingsField;
            }
            set {
                this.syncSettingsField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapDomainMappingSettings DomainMapSettings {
            get {
                return this.domainMapSettingsField;
            }
            set {
                this.domainMapSettingsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSLdapDirectoryType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        ActiveDirectory,
        
        /// <remarks/>
        OpenLDAP,
        
        /// <remarks/>
        CustomLDAPServer,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSLdapServerConfigurationAction {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Create,
        
        /// <remarks/>
        Update,
        
        /// <remarks/>
        Delete,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class FailedScansDisplayData {
        
        private long idField;
        
        private long scanRequestIdField;
        
        private long projectIdField;
        
        private string projectNameField;
        
        private long taskIdField;
        
        private long taskScanIdField;
        
        private long configurationIdField;
        
        private long presetIdField;
        
        private bool isIncrementalField;
        
        private string runIdField;
        
        private long createdOnField;
        
        private long updatedOnField;
        
        private long queuedOnField;
        
        private long engineStartedOnField;
        
        private long engineFinishedOnField;
        
        private long completedOnField;
        
        private string sourceLocationPathField;
        
        private string sourceIdField;
        
        private int lOCField;
        
        private int languageField;
        
        private bool partialResultsField;
        
        private string commentsField;
        
        private long serverIdField;
        
        private string initiatorField;
        
        private string detailsField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public long ScanRequestId {
            get {
                return this.scanRequestIdField;
            }
            set {
                this.scanRequestIdField = value;
            }
        }
        
        /// <remarks/>
        public long ProjectId {
            get {
                return this.projectIdField;
            }
            set {
                this.projectIdField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public long TaskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public long TaskScanId {
            get {
                return this.taskScanIdField;
            }
            set {
                this.taskScanIdField = value;
            }
        }
        
        /// <remarks/>
        public long ConfigurationId {
            get {
                return this.configurationIdField;
            }
            set {
                this.configurationIdField = value;
            }
        }
        
        /// <remarks/>
        public long PresetId {
            get {
                return this.presetIdField;
            }
            set {
                this.presetIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsIncremental {
            get {
                return this.isIncrementalField;
            }
            set {
                this.isIncrementalField = value;
            }
        }
        
        /// <remarks/>
        public string RunId {
            get {
                return this.runIdField;
            }
            set {
                this.runIdField = value;
            }
        }
        
        /// <remarks/>
        public long CreatedOn {
            get {
                return this.createdOnField;
            }
            set {
                this.createdOnField = value;
            }
        }
        
        /// <remarks/>
        public long UpdatedOn {
            get {
                return this.updatedOnField;
            }
            set {
                this.updatedOnField = value;
            }
        }
        
        /// <remarks/>
        public long QueuedOn {
            get {
                return this.queuedOnField;
            }
            set {
                this.queuedOnField = value;
            }
        }
        
        /// <remarks/>
        public long EngineStartedOn {
            get {
                return this.engineStartedOnField;
            }
            set {
                this.engineStartedOnField = value;
            }
        }
        
        /// <remarks/>
        public long EngineFinishedOn {
            get {
                return this.engineFinishedOnField;
            }
            set {
                this.engineFinishedOnField = value;
            }
        }
        
        /// <remarks/>
        public long CompletedOn {
            get {
                return this.completedOnField;
            }
            set {
                this.completedOnField = value;
            }
        }
        
        /// <remarks/>
        public string SourceLocationPath {
            get {
                return this.sourceLocationPathField;
            }
            set {
                this.sourceLocationPathField = value;
            }
        }
        
        /// <remarks/>
        public string SourceId {
            get {
                return this.sourceIdField;
            }
            set {
                this.sourceIdField = value;
            }
        }
        
        /// <remarks/>
        public int LOC {
            get {
                return this.lOCField;
            }
            set {
                this.lOCField = value;
            }
        }
        
        /// <remarks/>
        public int Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public bool PartialResults {
            get {
                return this.partialResultsField;
            }
            set {
                this.partialResultsField = value;
            }
        }
        
        /// <remarks/>
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        public long ServerId {
            get {
                return this.serverIdField;
            }
            set {
                this.serverIdField = value;
            }
        }
        
        /// <remarks/>
        public string Initiator {
            get {
                return this.initiatorField;
            }
            set {
                this.initiatorField = value;
            }
        }
        
        /// <remarks/>
        public string Details {
            get {
                return this.detailsField;
            }
            set {
                this.detailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class ProjectScannedDisplayData {
        
        private long projectIDField;
        
        private string projectNameField;
        
        private long lastScanIDField;
        
        private long lastScanDateField;
        
        private string teamNameField;
        
        private int riskLevelScoreField;
        
        private long lOCField;
        
        private int highVulnerabilitiesField;
        
        private int mediumVulnerabilitiesField;
        
        private int lowVulnerabilitiesField;
        
        private int infoVulnerabilitiesField;
        
        private int totalVulnerabilitiesField;
        
        private long queueTimeField;
        
        private long scanTimeField;
        
        private string failedLOCField;
        
        private long statisticsCalculationDateField;
        
        /// <remarks/>
        public long ProjectID {
            get {
                return this.projectIDField;
            }
            set {
                this.projectIDField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public long LastScanID {
            get {
                return this.lastScanIDField;
            }
            set {
                this.lastScanIDField = value;
            }
        }
        
        /// <remarks/>
        public long LastScanDate {
            get {
                return this.lastScanDateField;
            }
            set {
                this.lastScanDateField = value;
            }
        }
        
        /// <remarks/>
        public string TeamName {
            get {
                return this.teamNameField;
            }
            set {
                this.teamNameField = value;
            }
        }
        
        /// <remarks/>
        public int RiskLevelScore {
            get {
                return this.riskLevelScoreField;
            }
            set {
                this.riskLevelScoreField = value;
            }
        }
        
        /// <remarks/>
        public long LOC {
            get {
                return this.lOCField;
            }
            set {
                this.lOCField = value;
            }
        }
        
        /// <remarks/>
        public int HighVulnerabilities {
            get {
                return this.highVulnerabilitiesField;
            }
            set {
                this.highVulnerabilitiesField = value;
            }
        }
        
        /// <remarks/>
        public int MediumVulnerabilities {
            get {
                return this.mediumVulnerabilitiesField;
            }
            set {
                this.mediumVulnerabilitiesField = value;
            }
        }
        
        /// <remarks/>
        public int LowVulnerabilities {
            get {
                return this.lowVulnerabilitiesField;
            }
            set {
                this.lowVulnerabilitiesField = value;
            }
        }
        
        /// <remarks/>
        public int InfoVulnerabilities {
            get {
                return this.infoVulnerabilitiesField;
            }
            set {
                this.infoVulnerabilitiesField = value;
            }
        }
        
        /// <remarks/>
        public int TotalVulnerabilities {
            get {
                return this.totalVulnerabilitiesField;
            }
            set {
                this.totalVulnerabilitiesField = value;
            }
        }
        
        /// <remarks/>
        public long QueueTime {
            get {
                return this.queueTimeField;
            }
            set {
                this.queueTimeField = value;
            }
        }
        
        /// <remarks/>
        public long ScanTime {
            get {
                return this.scanTimeField;
            }
            set {
                this.scanTimeField = value;
            }
        }
        
        /// <remarks/>
        public string FailedLOC {
            get {
                return this.failedLOCField;
            }
            set {
                this.failedLOCField = value;
            }
        }
        
        /// <remarks/>
        public long StatisticsCalculationDate {
            get {
                return this.statisticsCalculationDateField;
            }
            set {
                this.statisticsCalculationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSJIRAIssueCreateMeta))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public abstract partial class CxWSIssueTrackingSystemMeta {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSJIRAIssueCreateMeta : CxWSIssueTrackingSystemMeta {
        
        private CxWSJIRAProjectMeta[] projectsField;
        
        /// <remarks/>
        public CxWSJIRAProjectMeta[] Projects {
            get {
                return this.projectsField;
            }
            set {
                this.projectsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSJIRAProjectMeta {
        
        private string idField;
        
        private string keyField;
        
        private string nameField;
        
        private CxWSJIRAIssueType[] issueTypesField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public CxWSJIRAIssueType[] IssueTypes {
            get {
                return this.issueTypesField;
            }
            set {
                this.issueTypesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSJIRAIssueType {
        
        private string idField;
        
        private string nameField;
        
        private bool subtaskField;
        
        private CxWSJIRAFields[] fieldsField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool Subtask {
            get {
                return this.subtaskField;
            }
            set {
                this.subtaskField = value;
            }
        }
        
        /// <remarks/>
        public CxWSJIRAFields[] Fields {
            get {
                return this.fieldsField;
            }
            set {
                this.fieldsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSJIRAFields {
        
        private string jiraFieldNameField;
        
        private object[] defaultValuesField;
        
        private string nameField;
        
        private bool requiredField;
        
        private CxWSJIRASchema schemaField;
        
        private CxWSJIRAAllowedValues[] allowedValuesField;
        
        /// <remarks/>
        public string JiraFieldName {
            get {
                return this.jiraFieldNameField;
            }
            set {
                this.jiraFieldNameField = value;
            }
        }
        
        /// <remarks/>
        public object[] DefaultValues {
            get {
                return this.defaultValuesField;
            }
            set {
                this.defaultValuesField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool Required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        public CxWSJIRASchema Schema {
            get {
                return this.schemaField;
            }
            set {
                this.schemaField = value;
            }
        }
        
        /// <remarks/>
        public CxWSJIRAAllowedValues[] AllowedValues {
            get {
                return this.allowedValuesField;
            }
            set {
                this.allowedValuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSJIRASchema {
        
        private string systemField;
        
        private string typeField;
        
        private string itemsField;
        
        private string customField;
        
        /// <remarks/>
        public string System {
            get {
                return this.systemField;
            }
            set {
                this.systemField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        /// <remarks/>
        public string Custom {
            get {
                return this.customField;
            }
            set {
                this.customField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSJIRAAllowedValues {
        
        private string idField;
        
        private string valueField;
        
        private string nameField;
        
        /// <remarks/>
        public string Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSJIRATrackingSystem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public abstract partial class CxWSIssueTrackingSystem {
        
        private CxWSIssueTrackingType systemTypeField;
        
        private long idField;
        
        private string nameField;
        
        private string serverURLField;
        
        private string usernameField;
        
        private string passwordField;
        
        /// <remarks/>
        public CxWSIssueTrackingType SystemType {
            get {
                return this.systemTypeField;
            }
            set {
                this.systemTypeField = value;
            }
        }
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ServerURL {
            get {
                return this.serverURLField;
            }
            set {
                this.serverURLField = value;
            }
        }
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSIssueTrackingType {
        
        /// <remarks/>
        JIRA,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSJIRATrackingSystem : CxWSIssueTrackingSystem {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingMetaRequestParam {
        
        private string keyField;
        
        private object valueField;
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public object Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemSaveRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemDeleteRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemRetrieveRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemValidateConnectRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemMetaRequest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemCreateIssueRequest))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public abstract partial class CxWSIssueTrackingSystemRequest {
        
        private string sessionIDField;
        
        /// <remarks/>
        public string SessionID {
            get {
                return this.sessionIDField;
            }
            set {
                this.sessionIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemSaveRequest : CxWSIssueTrackingSystemRequest {
        
        private CxWSIssueTrackingSystem trackingSystemField;
        
        /// <remarks/>
        public CxWSIssueTrackingSystem TrackingSystem {
            get {
                return this.trackingSystemField;
            }
            set {
                this.trackingSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemDeleteRequest : CxWSIssueTrackingSystemRequest {
        
        private long[] iDsField;
        
        /// <remarks/>
        public long[] IDs {
            get {
                return this.iDsField;
            }
            set {
                this.iDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemRetrieveRequest : CxWSIssueTrackingSystemRequest {
        
        private long[] iDsField;
        
        /// <remarks/>
        public long[] IDs {
            get {
                return this.iDsField;
            }
            set {
                this.iDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemValidateConnectRequest : CxWSIssueTrackingSystemRequest {
        
        private CxWSIssueTrackingSystem trackingSystemField;
        
        /// <remarks/>
        public CxWSIssueTrackingSystem TrackingSystem {
            get {
                return this.trackingSystemField;
            }
            set {
                this.trackingSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemMetaRequest : CxWSIssueTrackingSystemRequest {
        
        private long trackingSystemIDField;
        
        private CxWSIssueTrackingMetaRequestParam[] paramsField;
        
        /// <remarks/>
        public long TrackingSystemID {
            get {
                return this.trackingSystemIDField;
            }
            set {
                this.trackingSystemIDField = value;
            }
        }
        
        /// <remarks/>
        public CxWSIssueTrackingMetaRequestParam[] Params {
            get {
                return this.paramsField;
            }
            set {
                this.paramsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemCreateIssueRequest : CxWSIssueTrackingSystemRequest {
        
        private long trackingSystemIDField;
        
        private long scanIDField;
        
        private long[] resultIDsField;
        
        private CxWSIssueTrackingParam[] paramsField;
        
        /// <remarks/>
        public long TrackingSystemID {
            get {
                return this.trackingSystemIDField;
            }
            set {
                this.trackingSystemIDField = value;
            }
        }
        
        /// <remarks/>
        public long ScanID {
            get {
                return this.scanIDField;
            }
            set {
                this.scanIDField = value;
            }
        }
        
        /// <remarks/>
        public long[] ResultIDs {
            get {
                return this.resultIDsField;
            }
            set {
                this.resultIDsField = value;
            }
        }
        
        /// <remarks/>
        public CxWSIssueTrackingParam[] Params {
            get {
                return this.paramsField;
            }
            set {
                this.paramsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxUserReportPreferences))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public abstract partial class CxUserPreferences {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxUserReportPreferences : CxUserPreferences {
        
        private bool link2OnlineResultsField;
        
        private bool teamField;
        
        private bool checkmarxVersionField;
        
        private bool scanCommentsField;
        
        private bool scanTypeField;
        
        private bool sourceOriginField;
        
        private bool scanDensityField;
        
        private bool tableOfContentsField;
        
        private bool executiveSummaryField;
        
        private bool displayCategoriesField;
        
        private bool displayLanguageHashNumberField;
        
        private bool scannedQueriesField;
        
        private bool scannedFilesField;
        
        private bool assignedToField;
        
        private bool commentsField;
        
        private bool link2OnlineField;
        
        private bool resultDescriptionField;
        
        private bool onlyExecutiveSummaryField;
        
        private int resultsPerQueryLimitField;
        
        private CxReportVulnerabilityDescription vulnerabilityDescriptionField;
        
        private CxReportSnippetsMode snippetsModeField;
        
        /// <remarks/>
        public bool Link2OnlineResults {
            get {
                return this.link2OnlineResultsField;
            }
            set {
                this.link2OnlineResultsField = value;
            }
        }
        
        /// <remarks/>
        public bool Team {
            get {
                return this.teamField;
            }
            set {
                this.teamField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckmarxVersion {
            get {
                return this.checkmarxVersionField;
            }
            set {
                this.checkmarxVersionField = value;
            }
        }
        
        /// <remarks/>
        public bool ScanComments {
            get {
                return this.scanCommentsField;
            }
            set {
                this.scanCommentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ScanType {
            get {
                return this.scanTypeField;
            }
            set {
                this.scanTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool SourceOrigin {
            get {
                return this.sourceOriginField;
            }
            set {
                this.sourceOriginField = value;
            }
        }
        
        /// <remarks/>
        public bool ScanDensity {
            get {
                return this.scanDensityField;
            }
            set {
                this.scanDensityField = value;
            }
        }
        
        /// <remarks/>
        public bool TableOfContents {
            get {
                return this.tableOfContentsField;
            }
            set {
                this.tableOfContentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ExecutiveSummary {
            get {
                return this.executiveSummaryField;
            }
            set {
                this.executiveSummaryField = value;
            }
        }
        
        /// <remarks/>
        public bool DisplayCategories {
            get {
                return this.displayCategoriesField;
            }
            set {
                this.displayCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public bool DisplayLanguageHashNumber {
            get {
                return this.displayLanguageHashNumberField;
            }
            set {
                this.displayLanguageHashNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool ScannedQueries {
            get {
                return this.scannedQueriesField;
            }
            set {
                this.scannedQueriesField = value;
            }
        }
        
        /// <remarks/>
        public bool ScannedFiles {
            get {
                return this.scannedFilesField;
            }
            set {
                this.scannedFilesField = value;
            }
        }
        
        /// <remarks/>
        public bool AssignedTo {
            get {
                return this.assignedToField;
            }
            set {
                this.assignedToField = value;
            }
        }
        
        /// <remarks/>
        public bool Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        public bool Link2Online {
            get {
                return this.link2OnlineField;
            }
            set {
                this.link2OnlineField = value;
            }
        }
        
        /// <remarks/>
        public bool ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool OnlyExecutiveSummary {
            get {
                return this.onlyExecutiveSummaryField;
            }
            set {
                this.onlyExecutiveSummaryField = value;
            }
        }
        
        /// <remarks/>
        public int ResultsPerQueryLimit {
            get {
                return this.resultsPerQueryLimitField;
            }
            set {
                this.resultsPerQueryLimitField = value;
            }
        }
        
        /// <remarks/>
        public CxReportVulnerabilityDescription VulnerabilityDescription {
            get {
                return this.vulnerabilityDescriptionField;
            }
            set {
                this.vulnerabilityDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public CxReportSnippetsMode SnippetsMode {
            get {
                return this.snippetsModeField;
            }
            set {
                this.snippetsModeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxReportVulnerabilityDescription {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Embeded,
        
        /// <remarks/>
        Online,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxReportSnippetsMode {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        SourceAndDestination,
        
        /// <remarks/>
        Full,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResultDisplayOptions {
        
        private bool assignedToField;
        
        private bool commentsField;
        
        private bool link2OnlineField;
        
        private bool resultDescriptionField;
        
        private CxWSSnippetsModeDisplayOptions snippetsModeField;
        
        /// <remarks/>
        public bool AssignedTo {
            get {
                return this.assignedToField;
            }
            set {
                this.assignedToField = value;
            }
        }
        
        /// <remarks/>
        public bool Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        public bool Link2Online {
            get {
                return this.link2OnlineField;
            }
            set {
                this.link2OnlineField = value;
            }
        }
        
        /// <remarks/>
        public bool ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public CxWSSnippetsModeDisplayOptions SnippetsMode {
            get {
                return this.snippetsModeField;
            }
            set {
                this.snippetsModeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSSnippetsModeDisplayOptions {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        SourceAndDestination,
        
        /// <remarks/>
        Full,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSGeneralDisplayOptions {
        
        private bool onlyExecutiveSummaryField;
        
        private bool tableOfContentsField;
        
        private bool executiveSummaryField;
        
        private bool displayCategoriesField;
        
        private bool displayLanguageHashNumberField;
        
        private bool scannedQueriesField;
        
        private bool scannedFilesField;
        
        private CxWSVulnerabilitiesDisplayOptions vulnerabilitiesDescriptionField;
        
        /// <remarks/>
        public bool OnlyExecutiveSummary {
            get {
                return this.onlyExecutiveSummaryField;
            }
            set {
                this.onlyExecutiveSummaryField = value;
            }
        }
        
        /// <remarks/>
        public bool TableOfContents {
            get {
                return this.tableOfContentsField;
            }
            set {
                this.tableOfContentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ExecutiveSummary {
            get {
                return this.executiveSummaryField;
            }
            set {
                this.executiveSummaryField = value;
            }
        }
        
        /// <remarks/>
        public bool DisplayCategories {
            get {
                return this.displayCategoriesField;
            }
            set {
                this.displayCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public bool DisplayLanguageHashNumber {
            get {
                return this.displayLanguageHashNumberField;
            }
            set {
                this.displayLanguageHashNumberField = value;
            }
        }
        
        /// <remarks/>
        public bool ScannedQueries {
            get {
                return this.scannedQueriesField;
            }
            set {
                this.scannedQueriesField = value;
            }
        }
        
        /// <remarks/>
        public bool ScannedFiles {
            get {
                return this.scannedFilesField;
            }
            set {
                this.scannedFilesField = value;
            }
        }
        
        /// <remarks/>
        public CxWSVulnerabilitiesDisplayOptions VulnerabilitiesDescription {
            get {
                return this.vulnerabilitiesDescriptionField;
            }
            set {
                this.vulnerabilitiesDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSVulnerabilitiesDisplayOptions {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Attached2Appendix,
        
        /// <remarks/>
        Linked2Online,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSHeaderDisplayOptions {
        
        private bool link2OnlineResultsField;
        
        private bool teamField;
        
        private bool checkmarxVersionField;
        
        private bool scanCommentsField;
        
        private bool scanTypeField;
        
        private bool sourceOriginField;
        
        private bool scanDensityField;
        
        /// <remarks/>
        public bool Link2OnlineResults {
            get {
                return this.link2OnlineResultsField;
            }
            set {
                this.link2OnlineResultsField = value;
            }
        }
        
        /// <remarks/>
        public bool Team {
            get {
                return this.teamField;
            }
            set {
                this.teamField = value;
            }
        }
        
        /// <remarks/>
        public bool CheckmarxVersion {
            get {
                return this.checkmarxVersionField;
            }
            set {
                this.checkmarxVersionField = value;
            }
        }
        
        /// <remarks/>
        public bool ScanComments {
            get {
                return this.scanCommentsField;
            }
            set {
                this.scanCommentsField = value;
            }
        }
        
        /// <remarks/>
        public bool ScanType {
            get {
                return this.scanTypeField;
            }
            set {
                this.scanTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool SourceOrigin {
            get {
                return this.sourceOriginField;
            }
            set {
                this.sourceOriginField = value;
            }
        }
        
        /// <remarks/>
        public bool ScanDensity {
            get {
                return this.scanDensityField;
            }
            set {
                this.scanDensityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResultsPerVulnerabilityFilter {
        
        private bool allField;
        
        private int maximimumField;
        
        /// <remarks/>
        public bool All {
            get {
                return this.allField;
            }
            set {
                this.allField = value;
            }
        }
        
        /// <remarks/>
        public int Maximimum {
            get {
                return this.maximimumField;
            }
            set {
                this.maximimumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResultsAssignedToFilter {
        
        private bool allField;
        
        private long[] iDsField;
        
        private string[] usernamesField;
        
        /// <remarks/>
        public bool All {
            get {
                return this.allField;
            }
            set {
                this.allField = value;
            }
        }
        
        /// <remarks/>
        public long[] IDs {
            get {
                return this.iDsField;
            }
            set {
                this.iDsField = value;
            }
        }
        
        /// <remarks/>
        public string[] Usernames {
            get {
                return this.usernamesField;
            }
            set {
                this.usernamesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSDisplayCategoriesFilter {
        
        private bool allField;
        
        private long[] iDsField;
        
        /// <remarks/>
        public bool All {
            get {
                return this.allField;
            }
            set {
                this.allField = value;
            }
        }
        
        /// <remarks/>
        public long[] IDs {
            get {
                return this.iDsField;
            }
            set {
                this.iDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResultsStateFilter {
        
        private bool allField;
        
        private long[] iDsField;
        
        /// <remarks/>
        public bool All {
            get {
                return this.allField;
            }
            set {
                this.allField = value;
            }
        }
        
        /// <remarks/>
        public long[] IDs {
            get {
                return this.iDsField;
            }
            set {
                this.iDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResultsSeverityFilter {
        
        private bool allField;
        
        private bool highField;
        
        private bool mediumField;
        
        private bool lowField;
        
        private bool infoField;
        
        /// <remarks/>
        public bool All {
            get {
                return this.allField;
            }
            set {
                this.allField = value;
            }
        }
        
        /// <remarks/>
        public bool High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public bool Medium {
            get {
                return this.mediumField;
            }
            set {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        public bool Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public bool Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSQueriesFilter {
        
        private bool allField;
        
        private long[] iDsField;
        
        /// <remarks/>
        public bool All {
            get {
                return this.allField;
            }
            set {
                this.allField = value;
            }
        }
        
        /// <remarks/>
        public long[] IDs {
            get {
                return this.iDsField;
            }
            set {
                this.iDsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSReportDisplayData {
        
        private CxWSQueriesFilter queriesField;
        
        private CxWSResultsSeverityFilter resultsSeverityField;
        
        private CxWSResultsStateFilter resultsStateField;
        
        private CxWSDisplayCategoriesFilter displayCategoriesField;
        
        private CxWSResultsAssignedToFilter resultsAssigedToField;
        
        private CxWSResultsPerVulnerabilityFilter resultsPerVulnerabilityField;
        
        private CxWSHeaderDisplayOptions headerOptionsField;
        
        private CxWSGeneralDisplayOptions generalOptionField;
        
        private CxWSResultDisplayOptions resultsDisplayOptionField;
        
        /// <remarks/>
        public CxWSQueriesFilter Queries {
            get {
                return this.queriesField;
            }
            set {
                this.queriesField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResultsSeverityFilter ResultsSeverity {
            get {
                return this.resultsSeverityField;
            }
            set {
                this.resultsSeverityField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResultsStateFilter ResultsState {
            get {
                return this.resultsStateField;
            }
            set {
                this.resultsStateField = value;
            }
        }
        
        /// <remarks/>
        public CxWSDisplayCategoriesFilter DisplayCategories {
            get {
                return this.displayCategoriesField;
            }
            set {
                this.displayCategoriesField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResultsAssignedToFilter ResultsAssigedTo {
            get {
                return this.resultsAssigedToField;
            }
            set {
                this.resultsAssigedToField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResultsPerVulnerabilityFilter ResultsPerVulnerability {
            get {
                return this.resultsPerVulnerabilityField;
            }
            set {
                this.resultsPerVulnerabilityField = value;
            }
        }
        
        /// <remarks/>
        public CxWSHeaderDisplayOptions HeaderOptions {
            get {
                return this.headerOptionsField;
            }
            set {
                this.headerOptionsField = value;
            }
        }
        
        /// <remarks/>
        public CxWSGeneralDisplayOptions GeneralOption {
            get {
                return this.generalOptionField;
            }
            set {
                this.generalOptionField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResultDisplayOptions ResultsDisplayOption {
            get {
                return this.resultsDisplayOptionField;
            }
            set {
                this.resultsDisplayOptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSFilteredReportRequest))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSReportRequest {
        
        private CxWSReportType typeField;
        
        private long scanIDField;
        
        /// <remarks/>
        public CxWSReportType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public long ScanID {
            get {
                return this.scanIDField;
            }
            set {
                this.scanIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSReportType {
        
        /// <remarks/>
        PDF,
        
        /// <remarks/>
        RTF,
        
        /// <remarks/>
        CSV,
        
        /// <remarks/>
        XML,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSFilteredReportRequest : CxWSReportRequest {
        
        private CxWSReportDisplayData displayDataField;
        
        /// <remarks/>
        public CxWSReportDisplayData DisplayData {
            get {
                return this.displayDataField;
            }
            set {
                this.displayDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSTransportedQuery {
        
        private long queryIdField;
        
        private string nameField;
        
        private long packageIdField;
        
        private long cweField;
        
        private bool isExecutableField;
        
        private int severityField;
        
        private string languageNameField;
        
        private string packageTypeNameField;
        
        private string groupNameField;
        
        private string sourceField;
        
        private string engineMetadataField;
        
        /// <remarks/>
        public long QueryId {
            get {
                return this.queryIdField;
            }
            set {
                this.queryIdField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long PackageId {
            get {
                return this.packageIdField;
            }
            set {
                this.packageIdField = value;
            }
        }
        
        /// <remarks/>
        public long Cwe {
            get {
                return this.cweField;
            }
            set {
                this.cweField = value;
            }
        }
        
        /// <remarks/>
        public bool IsExecutable {
            get {
                return this.isExecutableField;
            }
            set {
                this.isExecutableField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string LanguageName {
            get {
                return this.languageNameField;
            }
            set {
                this.languageNameField = value;
            }
        }
        
        /// <remarks/>
        public string PackageTypeName {
            get {
                return this.packageTypeNameField;
            }
            set {
                this.packageTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public string GroupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public string EngineMetadata {
            get {
                return this.engineMetadataField;
            }
            set {
                this.engineMetadataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CliScanArgs {
        
        private ProjectSettings prjSettingsField;
        
        private SourceCodeSettings srcCodeSettingsField;
        
        private bool isPrivateScanField;
        
        private bool isIncrementalField;
        
        private string commentField;
        
        private bool ignoreScanWithUnchangedCodeField;
        
        private CxClientType clientOriginField;
        
        /// <remarks/>
        public ProjectSettings PrjSettings {
            get {
                return this.prjSettingsField;
            }
            set {
                this.prjSettingsField = value;
            }
        }
        
        /// <remarks/>
        public SourceCodeSettings SrcCodeSettings {
            get {
                return this.srcCodeSettingsField;
            }
            set {
                this.srcCodeSettingsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPrivateScan {
            get {
                return this.isPrivateScanField;
            }
            set {
                this.isPrivateScanField = value;
            }
        }
        
        /// <remarks/>
        public bool IsIncremental {
            get {
                return this.isIncrementalField;
            }
            set {
                this.isIncrementalField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public bool IgnoreScanWithUnchangedCode {
            get {
                return this.ignoreScanWithUnchangedCodeField;
            }
            set {
                this.ignoreScanWithUnchangedCodeField = value;
            }
        }
        
        /// <remarks/>
        public CxClientType ClientOrigin {
            get {
                return this.clientOriginField;
            }
            set {
                this.clientOriginField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxClientType {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        WebPortal,
        
        /// <remarks/>
        CLI,
        
        /// <remarks/>
        Eclipse,
        
        /// <remarks/>
        VS,
        
        /// <remarks/>
        InteliJ,
        
        /// <remarks/>
        Audit,
        
        /// <remarks/>
        SDK,
        
        /// <remarks/>
        Jenkins,
        
        /// <remarks/>
        TFSBuild,
        
        /// <remarks/>
        Importer,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        Sonar,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxEngineServer {
        
        private long idField;
        
        private string uriField;
        
        private int maxScansField;
        
        private string serverNameField;
        
        private int maxScanLocField;
        
        private int minScanLocField;
        
        /// <remarks/>
        public long id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string uri {
            get {
                return this.uriField;
            }
            set {
                this.uriField = value;
            }
        }
        
        /// <remarks/>
        public int maxScans {
            get {
                return this.maxScansField;
            }
            set {
                this.maxScansField = value;
            }
        }
        
        /// <remarks/>
        public string serverName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        public int maxScanLoc {
            get {
                return this.maxScanLocField;
            }
            set {
                this.maxScanLocField = value;
            }
        }
        
        /// <remarks/>
        public int minScanLoc {
            get {
                return this.minScanLocField;
            }
            set {
                this.minScanLocField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class EmailForSalesData {
        
        private string nameField;
        
        private string emailField;
        
        private string companyField;
        
        private string phoneField;
        
        private string emailBodyField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string EmailBody {
            get {
                return this.emailBodyField;
            }
            set {
                this.emailBodyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class SaasPackage {
        
        private long idField;
        
        private string nameField;
        
        private long usersField;
        
        private int languagesField;
        
        private long lOCField;
        
        private int presetsNumberField;
        
        private long[] presetsIdsField;
        
        private bool freeField;
        
        private bool sourceControlEnabledField;
        
        private bool createPDFEnabledField;
        
        private bool onlineViewerEnabledField;
        
        private bool pluginsEnabledField;
        
        private bool systemField;
        
        private int scansToDisplayField;
        
        private bool is_DeprecatedField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long Users {
            get {
                return this.usersField;
            }
            set {
                this.usersField = value;
            }
        }
        
        /// <remarks/>
        public int Languages {
            get {
                return this.languagesField;
            }
            set {
                this.languagesField = value;
            }
        }
        
        /// <remarks/>
        public long LOC {
            get {
                return this.lOCField;
            }
            set {
                this.lOCField = value;
            }
        }
        
        /// <remarks/>
        public int PresetsNumber {
            get {
                return this.presetsNumberField;
            }
            set {
                this.presetsNumberField = value;
            }
        }
        
        /// <remarks/>
        public long[] PresetsIds {
            get {
                return this.presetsIdsField;
            }
            set {
                this.presetsIdsField = value;
            }
        }
        
        /// <remarks/>
        public bool Free {
            get {
                return this.freeField;
            }
            set {
                this.freeField = value;
            }
        }
        
        /// <remarks/>
        public bool SourceControlEnabled {
            get {
                return this.sourceControlEnabledField;
            }
            set {
                this.sourceControlEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool CreatePDFEnabled {
            get {
                return this.createPDFEnabledField;
            }
            set {
                this.createPDFEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool OnlineViewerEnabled {
            get {
                return this.onlineViewerEnabledField;
            }
            set {
                this.onlineViewerEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool PluginsEnabled {
            get {
                return this.pluginsEnabledField;
            }
            set {
                this.pluginsEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool System {
            get {
                return this.systemField;
            }
            set {
                this.systemField = value;
            }
        }
        
        /// <remarks/>
        public int ScansToDisplay {
            get {
                return this.scansToDisplayField;
            }
            set {
                this.scansToDisplayField = value;
            }
        }
        
        /// <remarks/>
        public bool Is_Deprecated {
            get {
                return this.is_DeprecatedField;
            }
            set {
                this.is_DeprecatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class SaasPendingUser {
        
        private long idField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string passwordField;
        
        private string userNameField;
        
        private string phoneField;
        
        private string companyNameField;
        
        private string industryField;
        
        private string activationTokenField;
        
        private long languagesField;
        
        private long packageIdField;
        
        private CxDateTime createdDateField;
        
        private bool isActivatedField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public string Industry {
            get {
                return this.industryField;
            }
            set {
                this.industryField = value;
            }
        }
        
        /// <remarks/>
        public string ActivationToken {
            get {
                return this.activationTokenField;
            }
            set {
                this.activationTokenField = value;
            }
        }
        
        /// <remarks/>
        public long Languages {
            get {
                return this.languagesField;
            }
            set {
                this.languagesField = value;
            }
        }
        
        /// <remarks/>
        public long PackageId {
            get {
                return this.packageIdField;
            }
            set {
                this.packageIdField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime CreatedDate {
            get {
                return this.createdDateField;
            }
            set {
                this.createdDateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsActivated {
            get {
                return this.isActivatedField;
            }
            set {
                this.isActivatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxPivotLayout {
        
        private long idField;
        
        private string nameField;
        
        private long ownerField;
        
        private string serializedDataField;
        
        private string chartTypeField;
        
        private bool isSystemField;
        
        private string owner_TeamField;
        
        private bool isPublicField;
        
        private long viewIdField;
        
        private string[] teamsField;
        
        private PivotClientBaseParam[] criteriaField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string SerializedData {
            get {
                return this.serializedDataField;
            }
            set {
                this.serializedDataField = value;
            }
        }
        
        /// <remarks/>
        public string ChartType {
            get {
                return this.chartTypeField;
            }
            set {
                this.chartTypeField = value;
            }
        }
        
        /// <remarks/>
        public bool IsSystem {
            get {
                return this.isSystemField;
            }
            set {
                this.isSystemField = value;
            }
        }
        
        /// <remarks/>
        public string Owner_Team {
            get {
                return this.owner_TeamField;
            }
            set {
                this.owner_TeamField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        public long ViewId {
            get {
                return this.viewIdField;
            }
            set {
                this.viewIdField = value;
            }
        }
        
        /// <remarks/>
        public string[] Teams {
            get {
                return this.teamsField;
            }
            set {
                this.teamsField = value;
            }
        }
        
        /// <remarks/>
        public PivotClientBaseParam[] Criteria {
            get {
                return this.criteriaField;
            }
            set {
                this.criteriaField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PivotClientDateRangeParam))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PivotClientExploitabilityParam))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public abstract partial class PivotClientBaseParam {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class PivotClientDateRangeParam : PivotClientBaseParam {
        
        private PivotClientDateRanges rangeTypeField;
        
        private CxDateTime dateFromField;
        
        private CxDateTime dateToField;
        
        /// <remarks/>
        public PivotClientDateRanges RangeType {
            get {
                return this.rangeTypeField;
            }
            set {
                this.rangeTypeField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime DateFrom {
            get {
                return this.dateFromField;
            }
            set {
                this.dateFromField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime DateTo {
            get {
                return this.dateToField;
            }
            set {
                this.dateToField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum PivotClientDateRanges {
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        PAST_DAY,
        
        /// <remarks/>
        PAST_WEEK,
        
        /// <remarks/>
        PAST_MONTH,
        
        /// <remarks/>
        PAST_3_MONTH,
        
        /// <remarks/>
        PAST_YEAR,
        
        /// <remarks/>
        CUSTOM,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class PivotClientExploitabilityParam : PivotClientBaseParam {
        
        private bool includeNotExploitableField;
        
        /// <remarks/>
        public bool IncludeNotExploitable {
            get {
                return this.includeNotExploitableField;
            }
            set {
                this.includeNotExploitableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxPivotDataRequest {
        
        private PivotViewClientType viewNameField;
        
        private PivotClientBaseParam[] criteriaField;
        
        /// <remarks/>
        public PivotViewClientType ViewName {
            get {
                return this.viewNameField;
            }
            set {
                this.viewNameField = value;
            }
        }
        
        /// <remarks/>
        public PivotClientBaseParam[] Criteria {
            get {
                return this.criteriaField;
            }
            set {
                this.criteriaField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum PivotViewClientType {
        
        /// <remarks/>
        AllProjectScans,
        
        /// <remarks/>
        LastMonthProjectScans,
        
        /// <remarks/>
        ProjectsLastScan,
        
        /// <remarks/>
        LastWeekOWASPTop10,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxPivotRow {
        
        private object[] dataField;
        
        /// <remarks/>
        public object[] Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxPivotColumn {
        
        private string nameField;
        
        private string dataTypeNameField;
        
        private string displayNameField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string DataTypeName {
            get {
                return this.dataTypeNameField;
            }
            set {
                this.dataTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxPivotTable {
        
        private CxPivotColumn[] columnsField;
        
        private CxPivotRow[] rowsField;
        
        /// <remarks/>
        public CxPivotColumn[] Columns {
            get {
                return this.columnsField;
            }
            set {
                this.columnsField = value;
            }
        }
        
        /// <remarks/>
        public CxPivotRow[] Rows {
            get {
                return this.rowsField;
            }
            set {
                this.rowsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class AssignUser {
        
        private long idField;
        
        private string userNameField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string emailField;
        
        private int userPreferedLanguageLCIDField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public int UserPreferedLanguageLCID {
            get {
                return this.userPreferedLanguageLCIDField;
            }
            set {
                this.userPreferedLanguageLCIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSEnableCRUDAction {
        
        private CxWSCrudEnum typeField;
        
        private bool enableField;
        
        /// <remarks/>
        public CxWSCrudEnum Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public bool Enable {
            get {
                return this.enableField;
            }
            set {
                this.enableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSCrudEnum {
        
        /// <remarks/>
        Create,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Update,
        
        /// <remarks/>
        View,
        
        /// <remarks/>
        Run,
        
        /// <remarks/>
        Investigate,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSItemAndCRUD {
        
        private CxWSItemTypeEnum typeField;
        
        private CxWSEnableCRUDAction[] cRUDActionListField;
        
        /// <remarks/>
        public CxWSItemTypeEnum Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public CxWSEnableCRUDAction[] CRUDActionList {
            get {
                return this.cRUDActionListField;
            }
            set {
                this.cRUDActionListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSItemTypeEnum {
        
        /// <remarks/>
        Project,
        
        /// <remarks/>
        Task,
        
        /// <remarks/>
        Scan,
        
        /// <remarks/>
        Preset,
        
        /// <remarks/>
        Configuration,
        
        /// <remarks/>
        Users,
        
        /// <remarks/>
        Roles,
        
        /// <remarks/>
        Other,
        
        /// <remarks/>
        SystemSettings,
        
        /// <remarks/>
        Ignore_Path,
        
        /// <remarks/>
        ResultComment,
        
        /// <remarks/>
        ResultSeverity,
        
        /// <remarks/>
        ResultStatus,
        
        /// <remarks/>
        AuditUser,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSRoleWithUserPrivileges))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class Role {
        
        private string nameField;
        
        private string idField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSRoleWithUserPrivileges : Role {
        
        private CxWSItemAndCRUD[] itemsCRUDField;
        
        /// <remarks/>
        public CxWSItemAndCRUD[] ItemsCRUD {
            get {
                return this.itemsCRUDField;
            }
            set {
                this.itemsCRUDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UserData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class WebClientUser {
        
        private long idField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private int userPreferedLanguageLCIDField;
        
        private string passwordField;
        
        private string jobTitleField;
        
        private string emailField;
        
        private string userNameField;
        
        private string uPNField;
        
        private string phoneField;
        
        private string cellPhoneField;
        
        private string skypeField;
        
        private string companyIDField;
        
        private string companyNameField;
        
        private string willExpireAfterDaysField;
        
        private string countryField;
        
        private System.DateTime dateCreatedField;
        
        private bool auditUserField;
        
        private Group[] groupListField;
        
        private System.DateTime lastLoginDateField;
        
        private bool limitAccessByIPAddressField;
        
        private string[] allowedIPsField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public int UserPreferedLanguageLCID {
            get {
                return this.userPreferedLanguageLCIDField;
            }
            set {
                this.userPreferedLanguageLCIDField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        public string JobTitle {
            get {
                return this.jobTitleField;
            }
            set {
                this.jobTitleField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string UPN {
            get {
                return this.uPNField;
            }
            set {
                this.uPNField = value;
            }
        }
        
        /// <remarks/>
        public string Phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        public string CellPhone {
            get {
                return this.cellPhoneField;
            }
            set {
                this.cellPhoneField = value;
            }
        }
        
        /// <remarks/>
        public string Skype {
            get {
                return this.skypeField;
            }
            set {
                this.skypeField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyID {
            get {
                return this.companyIDField;
            }
            set {
                this.companyIDField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public string willExpireAfterDays {
            get {
                return this.willExpireAfterDaysField;
            }
            set {
                this.willExpireAfterDaysField = value;
            }
        }
        
        /// <remarks/>
        public string country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DateCreated {
            get {
                return this.dateCreatedField;
            }
            set {
                this.dateCreatedField = value;
            }
        }
        
        /// <remarks/>
        public bool AuditUser {
            get {
                return this.auditUserField;
            }
            set {
                this.auditUserField = value;
            }
        }
        
        /// <remarks/>
        public Group[] GroupList {
            get {
                return this.groupListField;
            }
            set {
                this.groupListField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastLoginDate {
            get {
                return this.lastLoginDateField;
            }
            set {
                this.lastLoginDateField = value;
            }
        }
        
        /// <remarks/>
        public bool LimitAccessByIPAddress {
            get {
                return this.limitAccessByIPAddressField;
            }
            set {
                this.limitAccessByIPAddressField = value;
            }
        }
        
        /// <remarks/>
        public string[] AllowedIPs {
            get {
                return this.allowedIPsField;
            }
            set {
                this.allowedIPsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class UserData : WebClientUser {
        
        private bool isActiveField;
        
        private Role roleDataField;
        
        /// <remarks/>
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        public Role RoleData {
            get {
                return this.roleDataField;
            }
            set {
                this.roleDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSCustomField {
        
        private long idField;
        
        private string nameField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSEdge {
        
        private CxWSNode startNodeField;
        
        private CxWSNode endNodeField;
        
        /// <remarks/>
        public CxWSNode StartNode {
            get {
                return this.startNodeField;
            }
            set {
                this.startNodeField = value;
            }
        }
        
        /// <remarks/>
        public CxWSNode EndNode {
            get {
                return this.endNodeField;
            }
            set {
                this.endNodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSNode {
        
        private long nodeIdField;
        
        private long dOM_IdField;
        
        private int stateField;
        
        private long[] pathIdsField;
        
        private string nameField;
        
        private string fullNameField;
        
        private string fileNameField;
        
        private bool isBFLField;
        
        private int columnField;
        
        private int lineField;
        
        private int lengthField;
        
        /// <remarks/>
        public long NodeId {
            get {
                return this.nodeIdField;
            }
            set {
                this.nodeIdField = value;
            }
        }
        
        /// <remarks/>
        public long DOM_Id {
            get {
                return this.dOM_IdField;
            }
            set {
                this.dOM_IdField = value;
            }
        }
        
        /// <remarks/>
        public int State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public long[] PathIds {
            get {
                return this.pathIdsField;
            }
            set {
                this.pathIdsField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string FullName {
            get {
                return this.fullNameField;
            }
            set {
                this.fullNameField = value;
            }
        }
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public bool isBFL {
            get {
                return this.isBFLField;
            }
            set {
                this.isBFLField = value;
            }
        }
        
        /// <remarks/>
        public int Column {
            get {
                return this.columnField;
            }
            set {
                this.columnField = value;
            }
        }
        
        /// <remarks/>
        public int Line {
            get {
                return this.lineField;
            }
            set {
                this.lineField = value;
            }
        }
        
        /// <remarks/>
        public int Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSSingleResultCompareData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSSingleResultData {
        
        private long queryIdField;
        
        private long pathIdField;
        
        private string sourceFolderField;
        
        private string sourceFileField;
        
        private long sourceLineField;
        
        private string sourceObjectField;
        
        private string destFolderField;
        
        private string destFileField;
        
        private long destLineField;
        
        private int numberOfNodesField;
        
        private string destObjectField;
        
        private string commentField;
        
        private int stateField;
        
        private int severityField;
        
        private string assignedUserField;
        
        private System.Nullable<int> confidenceLevelField;
        
        private CompareStatusType resultStatusField;
        
        private string issueTicketIDField;
        
        private long queryVersionCodeField;
        
        /// <remarks/>
        public long QueryId {
            get {
                return this.queryIdField;
            }
            set {
                this.queryIdField = value;
            }
        }
        
        /// <remarks/>
        public long PathId {
            get {
                return this.pathIdField;
            }
            set {
                this.pathIdField = value;
            }
        }
        
        /// <remarks/>
        public string SourceFolder {
            get {
                return this.sourceFolderField;
            }
            set {
                this.sourceFolderField = value;
            }
        }
        
        /// <remarks/>
        public string SourceFile {
            get {
                return this.sourceFileField;
            }
            set {
                this.sourceFileField = value;
            }
        }
        
        /// <remarks/>
        public long SourceLine {
            get {
                return this.sourceLineField;
            }
            set {
                this.sourceLineField = value;
            }
        }
        
        /// <remarks/>
        public string SourceObject {
            get {
                return this.sourceObjectField;
            }
            set {
                this.sourceObjectField = value;
            }
        }
        
        /// <remarks/>
        public string DestFolder {
            get {
                return this.destFolderField;
            }
            set {
                this.destFolderField = value;
            }
        }
        
        /// <remarks/>
        public string DestFile {
            get {
                return this.destFileField;
            }
            set {
                this.destFileField = value;
            }
        }
        
        /// <remarks/>
        public long DestLine {
            get {
                return this.destLineField;
            }
            set {
                this.destLineField = value;
            }
        }
        
        /// <remarks/>
        public int NumberOfNodes {
            get {
                return this.numberOfNodesField;
            }
            set {
                this.numberOfNodesField = value;
            }
        }
        
        /// <remarks/>
        public string DestObject {
            get {
                return this.destObjectField;
            }
            set {
                this.destObjectField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public int State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public string AssignedUser {
            get {
                return this.assignedUserField;
            }
            set {
                this.assignedUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> ConfidenceLevel {
            get {
                return this.confidenceLevelField;
            }
            set {
                this.confidenceLevelField = value;
            }
        }
        
        /// <remarks/>
        public CompareStatusType ResultStatus {
            get {
                return this.resultStatusField;
            }
            set {
                this.resultStatusField = value;
            }
        }
        
        /// <remarks/>
        public string IssueTicketID {
            get {
                return this.issueTicketIDField;
            }
            set {
                this.issueTicketIDField = value;
            }
        }
        
        /// <remarks/>
        public long QueryVersionCode {
            get {
                return this.queryVersionCodeField;
            }
            set {
                this.queryVersionCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="CxDataTypes.xsd")]
    public enum CompareStatusType {
        
        /// <remarks/>
        Fixed,
        
        /// <remarks/>
        Reoccured,
        
        /// <remarks/>
        New,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSSingleResultCompareData : CxWSSingleResultData {
        
        private long scanIdField;
        
        private long comparedToScanIdField;
        
        private long comparedToScanPathIdField;
        
        private string queryNameField;
        
        /// <remarks/>
        public long ScanId {
            get {
                return this.scanIdField;
            }
            set {
                this.scanIdField = value;
            }
        }
        
        /// <remarks/>
        public long ComparedToScanId {
            get {
                return this.comparedToScanIdField;
            }
            set {
                this.comparedToScanIdField = value;
            }
        }
        
        /// <remarks/>
        public long ComparedToScanPathId {
            get {
                return this.comparedToScanPathIdField;
            }
            set {
                this.comparedToScanPathIdField = value;
            }
        }
        
        /// <remarks/>
        public string QueryName {
            get {
                return this.queryNameField;
            }
            set {
                this.queryNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSQueryVulnerabilityData {
        
        private CxQueryCategory[] categoriesField;
        
        private long queryIdField;
        
        private string queryNameField;
        
        private long groupIdField;
        
        private string groupNameField;
        
        private int severityField;
        
        private long cWEField;
        
        private int amountOfResultsField;
        
        private string languageNameField;
        
        private long queryVersionCodeField;
        
        /// <remarks/>
        public CxQueryCategory[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public long QueryId {
            get {
                return this.queryIdField;
            }
            set {
                this.queryIdField = value;
            }
        }
        
        /// <remarks/>
        public string QueryName {
            get {
                return this.queryNameField;
            }
            set {
                this.queryNameField = value;
            }
        }
        
        /// <remarks/>
        public long GroupId {
            get {
                return this.groupIdField;
            }
            set {
                this.groupIdField = value;
            }
        }
        
        /// <remarks/>
        public string GroupName {
            get {
                return this.groupNameField;
            }
            set {
                this.groupNameField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public long CWE {
            get {
                return this.cWEField;
            }
            set {
                this.cWEField = value;
            }
        }
        
        /// <remarks/>
        public int AmountOfResults {
            get {
                return this.amountOfResultsField;
            }
            set {
                this.amountOfResultsField = value;
            }
        }
        
        /// <remarks/>
        public string LanguageName {
            get {
                return this.languageNameField;
            }
            set {
                this.languageNameField = value;
            }
        }
        
        /// <remarks/>
        public long QueryVersionCode {
            get {
                return this.queryVersionCodeField;
            }
            set {
                this.queryVersionCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxQueryCategory {
        
        private long idField;
        
        private string categoryNameField;
        
        private CxCategoryType categoryTypeField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string CategoryName {
            get {
                return this.categoryNameField;
            }
            set {
                this.categoryNameField = value;
            }
        }
        
        /// <remarks/>
        public CxCategoryType CategoryType {
            get {
                return this.categoryTypeField;
            }
            set {
                this.categoryTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxCategoryType {
        
        private long idField;
        
        private string nameField;
        
        private int orderField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int Order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSQueryVersionDetails {
        
        private string queryPathField;
        
        private string querySourceField;
        
        /// <remarks/>
        public string QueryPath {
            get {
                return this.queryPathField;
            }
            set {
                this.queryPathField = value;
            }
        }
        
        /// <remarks/>
        public string QuerySource {
            get {
                return this.querySourceField;
            }
            set {
                this.querySourceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxPresetDetails {
        
        private long[] queryIdsField;
        
        private long idField;
        
        private string nameField;
        
        private string owningteamField;
        
        private bool isPublicField;
        
        private string ownerField;
        
        private bool isUserAllowToUpdateField;
        
        private bool isUserAllowToDeleteField;
        
        private bool isDuplicateField;
        
        /// <remarks/>
        public long[] queryIds {
            get {
                return this.queryIdsField;
            }
            set {
                this.queryIdsField = value;
            }
        }
        
        /// <remarks/>
        public long id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string owningteam {
            get {
                return this.owningteamField;
            }
            set {
                this.owningteamField = value;
            }
        }
        
        /// <remarks/>
        public bool isPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        public string owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public bool isUserAllowToUpdate {
            get {
                return this.isUserAllowToUpdateField;
            }
            set {
                this.isUserAllowToUpdateField = value;
            }
        }
        
        /// <remarks/>
        public bool isUserAllowToDelete {
            get {
                return this.isUserAllowToDeleteField;
            }
            set {
                this.isUserAllowToDeleteField = value;
            }
        }
        
        /// <remarks/>
        public bool IsDuplicate {
            get {
                return this.isDuplicateField;
            }
            set {
                this.isDuplicateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSQuery {
        
        private string nameField;
        
        private long queryIdField;
        
        private string sourceField;
        
        private long cweField;
        
        private bool isExecutableField;
        
        private bool isEncryptedField;
        
        private int severityField;
        
        private long packageIdField;
        
        private QueryStatus statusField;
        
        private CxWSQueryType typeField;
        
        private CxQueryCategory[] categoriesField;
        
        private int cxDescriptionIDField;
        
        private long queryVersionCodeField;
        
        private string engineMetadataField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long QueryId {
            get {
                return this.queryIdField;
            }
            set {
                this.queryIdField = value;
            }
        }
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public long Cwe {
            get {
                return this.cweField;
            }
            set {
                this.cweField = value;
            }
        }
        
        /// <remarks/>
        public bool IsExecutable {
            get {
                return this.isExecutableField;
            }
            set {
                this.isExecutableField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEncrypted {
            get {
                return this.isEncryptedField;
            }
            set {
                this.isEncryptedField = value;
            }
        }
        
        /// <remarks/>
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        public long PackageId {
            get {
                return this.packageIdField;
            }
            set {
                this.packageIdField = value;
            }
        }
        
        /// <remarks/>
        public QueryStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public CxWSQueryType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public CxQueryCategory[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public int CxDescriptionID {
            get {
                return this.cxDescriptionIDField;
            }
            set {
                this.cxDescriptionIDField = value;
            }
        }
        
        /// <remarks/>
        public long QueryVersionCode {
            get {
                return this.queryVersionCodeField;
            }
            set {
                this.queryVersionCodeField = value;
            }
        }
        
        /// <remarks/>
        public string EngineMetadata {
            get {
                return this.engineMetadataField;
            }
            set {
                this.engineMetadataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum QueryStatus {
        
        /// <remarks/>
        Original,
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Edited,
        
        /// <remarks/>
        Deleted,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSQueryType {
        
        /// <remarks/>
        Draft,
        
        /// <remarks/>
        Regular,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSQueryGroup {
        
        private string nameField;
        
        private int[] impactsField;
        
        private long packageIdField;
        
        private CxWSQuery[] queriesField;
        
        private bool isReadOnlyField;
        
        private bool isEncryptedField;
        
        private string descriptionField;
        
        private int languageField;
        
        private string languageNameField;
        
        private string packageTypeNameField;
        
        private long projectIdField;
        
        private CxWSPackageTypeEnum packageTypeField;
        
        private string packageFullNameField;
        
        private System.Guid owningTeamField;
        
        private QueryStatus statusField;
        
        private string languageStateHashField;
        
        private System.DateTime languageStateDateField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int[] Impacts {
            get {
                return this.impactsField;
            }
            set {
                this.impactsField = value;
            }
        }
        
        /// <remarks/>
        public long PackageId {
            get {
                return this.packageIdField;
            }
            set {
                this.packageIdField = value;
            }
        }
        
        /// <remarks/>
        public CxWSQuery[] Queries {
            get {
                return this.queriesField;
            }
            set {
                this.queriesField = value;
            }
        }
        
        /// <remarks/>
        public bool IsReadOnly {
            get {
                return this.isReadOnlyField;
            }
            set {
                this.isReadOnlyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEncrypted {
            get {
                return this.isEncryptedField;
            }
            set {
                this.isEncryptedField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public int Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public string LanguageName {
            get {
                return this.languageNameField;
            }
            set {
                this.languageNameField = value;
            }
        }
        
        /// <remarks/>
        public string PackageTypeName {
            get {
                return this.packageTypeNameField;
            }
            set {
                this.packageTypeNameField = value;
            }
        }
        
        /// <remarks/>
        public long ProjectId {
            get {
                return this.projectIdField;
            }
            set {
                this.projectIdField = value;
            }
        }
        
        /// <remarks/>
        public CxWSPackageTypeEnum PackageType {
            get {
                return this.packageTypeField;
            }
            set {
                this.packageTypeField = value;
            }
        }
        
        /// <remarks/>
        public string PackageFullName {
            get {
                return this.packageFullNameField;
            }
            set {
                this.packageFullNameField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid OwningTeam {
            get {
                return this.owningTeamField;
            }
            set {
                this.owningTeamField = value;
            }
        }
        
        /// <remarks/>
        public QueryStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string LanguageStateHash {
            get {
                return this.languageStateHashField;
            }
            set {
                this.languageStateHashField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LanguageStateDate {
            get {
                return this.languageStateDateField;
            }
            set {
                this.languageStateDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSPackageTypeEnum {
        
        /// <remarks/>
        Cx,
        
        /// <remarks/>
        Corporate,
        
        /// <remarks/>
        Project,
        
        /// <remarks/>
        Team,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class Preset {
        
        private string presetNameField;
        
        private long idField;
        
        private string owningUserField;
        
        private bool isUserAllowToUpdateField;
        
        private bool isUserAllowToDeleteField;
        
        /// <remarks/>
        public string PresetName {
            get {
                return this.presetNameField;
            }
            set {
                this.presetNameField = value;
            }
        }
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string owningUser {
            get {
                return this.owningUserField;
            }
            set {
                this.owningUserField = value;
            }
        }
        
        /// <remarks/>
        public bool isUserAllowToUpdate {
            get {
                return this.isUserAllowToUpdateField;
            }
            set {
                this.isUserAllowToUpdateField = value;
            }
        }
        
        /// <remarks/>
        public bool isUserAllowToDelete {
            get {
                return this.isUserAllowToDeleteField;
            }
            set {
                this.isUserAllowToDeleteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class InstallationSetting {
        
        private string nameField;
        
        private string idField;
        
        private string dNSNameField;
        
        private string ipField;
        
        private string stateField;
        
        private string versionField;
        
        private string hotfixField;
        
        private string instllationPathField;
        
        private bool isInstalledField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string DNSName {
            get {
                return this.dNSNameField;
            }
            set {
                this.dNSNameField = value;
            }
        }
        
        /// <remarks/>
        public string IP {
            get {
                return this.ipField;
            }
            set {
                this.ipField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string Hotfix {
            get {
                return this.hotfixField;
            }
            set {
                this.hotfixField = value;
            }
        }
        
        /// <remarks/>
        public string InstllationPath {
            get {
                return this.instllationPathField;
            }
            set {
                this.instllationPathField = value;
            }
        }
        
        /// <remarks/>
        public bool IsInstalled {
            get {
                return this.isInstalledField;
            }
            set {
                this.isInstalledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxPredefinedCommand {
        
        private string nameField;
        
        private string commandField;
        
        private CxPredefinedCommandType commandTypeField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Command {
            get {
                return this.commandField;
            }
            set {
                this.commandField = value;
            }
        }
        
        /// <remarks/>
        public CxPredefinedCommandType CommandType {
            get {
                return this.commandTypeField;
            }
            set {
                this.commandTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxPredefinedCommandType {
        
        /// <remarks/>
        SourceControlCommand,
        
        /// <remarks/>
        PostScan,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class SystemSettings {
        
        private string reportFolderField;
        
        private string resultFolderField;
        
        private string executablesFolderField;
        
        private string sMTPHostField;
        
        private int sMTPPortField;
        
        private string eMailFromAddressField;
        
        private string sMTPUserNameField;
        
        private string sMTPPasswordField;
        
        private bool sMTPUseDefaultCredentialsField;
        
        private bool smtpOverSslField;
        
        private string sMTPEncryptionField;
        
        private int maxScansField;
        
        private int completedScanShowTimeInMinField;
        
        private CxPredefinedCommand[] commandsField;
        
        private string webServerField;
        
        private int defaultLanguageField;
        
        private bool allowAutoSignInField;
        
        private int defaultGitHubEventThresholdField;
        
        private bool notifyLicenseExpirationField;
        
        private string gitExePathField;
        
        private string perforceExePathField;
        
        /// <remarks/>
        public string ReportFolder {
            get {
                return this.reportFolderField;
            }
            set {
                this.reportFolderField = value;
            }
        }
        
        /// <remarks/>
        public string ResultFolder {
            get {
                return this.resultFolderField;
            }
            set {
                this.resultFolderField = value;
            }
        }
        
        /// <remarks/>
        public string ExecutablesFolder {
            get {
                return this.executablesFolderField;
            }
            set {
                this.executablesFolderField = value;
            }
        }
        
        /// <remarks/>
        public string SMTPHost {
            get {
                return this.sMTPHostField;
            }
            set {
                this.sMTPHostField = value;
            }
        }
        
        /// <remarks/>
        public int SMTPPort {
            get {
                return this.sMTPPortField;
            }
            set {
                this.sMTPPortField = value;
            }
        }
        
        /// <remarks/>
        public string EMailFromAddress {
            get {
                return this.eMailFromAddressField;
            }
            set {
                this.eMailFromAddressField = value;
            }
        }
        
        /// <remarks/>
        public string SMTPUserName {
            get {
                return this.sMTPUserNameField;
            }
            set {
                this.sMTPUserNameField = value;
            }
        }
        
        /// <remarks/>
        public string SMTPPassword {
            get {
                return this.sMTPPasswordField;
            }
            set {
                this.sMTPPasswordField = value;
            }
        }
        
        /// <remarks/>
        public bool SMTPUseDefaultCredentials {
            get {
                return this.sMTPUseDefaultCredentialsField;
            }
            set {
                this.sMTPUseDefaultCredentialsField = value;
            }
        }
        
        /// <remarks/>
        public bool SmtpOverSsl {
            get {
                return this.smtpOverSslField;
            }
            set {
                this.smtpOverSslField = value;
            }
        }
        
        /// <remarks/>
        public string SMTPEncryption {
            get {
                return this.sMTPEncryptionField;
            }
            set {
                this.sMTPEncryptionField = value;
            }
        }
        
        /// <remarks/>
        public int MaxScans {
            get {
                return this.maxScansField;
            }
            set {
                this.maxScansField = value;
            }
        }
        
        /// <remarks/>
        public int CompletedScanShowTimeInMin {
            get {
                return this.completedScanShowTimeInMinField;
            }
            set {
                this.completedScanShowTimeInMinField = value;
            }
        }
        
        /// <remarks/>
        public CxPredefinedCommand[] commands {
            get {
                return this.commandsField;
            }
            set {
                this.commandsField = value;
            }
        }
        
        /// <remarks/>
        public string WebServer {
            get {
                return this.webServerField;
            }
            set {
                this.webServerField = value;
            }
        }
        
        /// <remarks/>
        public int DefaultLanguage {
            get {
                return this.defaultLanguageField;
            }
            set {
                this.defaultLanguageField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowAutoSignIn {
            get {
                return this.allowAutoSignInField;
            }
            set {
                this.allowAutoSignInField = value;
            }
        }
        
        /// <remarks/>
        public int DefaultGitHubEventThreshold {
            get {
                return this.defaultGitHubEventThresholdField;
            }
            set {
                this.defaultGitHubEventThresholdField = value;
            }
        }
        
        /// <remarks/>
        public bool NotifyLicenseExpiration {
            get {
                return this.notifyLicenseExpirationField;
            }
            set {
                this.notifyLicenseExpirationField = value;
            }
        }
        
        /// <remarks/>
        public string GitExePath {
            get {
                return this.gitExePathField;
            }
            set {
                this.gitExePathField = value;
            }
        }
        
        /// <remarks/>
        public string PerforceExePath {
            get {
                return this.perforceExePathField;
            }
            set {
                this.perforceExePathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class SystemLanguage {
        
        private int languageLCIDField;
        
        private bool isDefaultField;
        
        /// <remarks/>
        public int languageLCID {
            get {
                return this.languageLCIDField;
            }
            set {
                this.languageLCIDField = value;
            }
        }
        
        /// <remarks/>
        public bool isDefault {
            get {
                return this.isDefaultField;
            }
            set {
                this.isDefaultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class SupportedLanguage {
        
        private string languageField;
        
        private bool isSupportedField;
        
        /// <remarks/>
        public string language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        public bool isSupported {
            get {
                return this.isSupportedField;
            }
            set {
                this.isSupportedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxPermission {
        
        private long idField;
        
        private bool viewPreScanActionsField;
        
        private bool viewPostScanActionsField;
        
        /// <remarks/>
        public long Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool ViewPreScanActions {
            get {
                return this.viewPreScanActionsField;
            }
            set {
                this.viewPreScanActionsField = value;
            }
        }
        
        /// <remarks/>
        public bool ViewPostScanActions {
            get {
                return this.viewPostScanActionsField;
            }
            set {
                this.viewPostScanActionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSLdapGroup {
        
        private string dnField;
        
        private string nameField;
        
        /// <remarks/>
        public string DN {
            get {
                return this.dnField;
            }
            set {
                this.dnField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSLdapGroupMapping {
        
        private int ldapServerIdField;
        
        private CxWSLdapGroup ldapGroupField;
        
        /// <remarks/>
        public int LdapServerId {
            get {
                return this.ldapServerIdField;
            }
            set {
                this.ldapServerIdField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapGroup LdapGroup {
            get {
                return this.ldapGroupField;
            }
            set {
                this.ldapGroupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class TeamData {
        
        private Group teamField;
        
        private Group companyField;
        
        private Group serviceProviderField;
        
        private CxWSLdapGroupMapping[] ldapGroupMappingsField;
        
        /// <remarks/>
        public Group Team {
            get {
                return this.teamField;
            }
            set {
                this.teamField = value;
            }
        }
        
        /// <remarks/>
        public Group Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        public Group ServiceProvider {
            get {
                return this.serviceProviderField;
            }
            set {
                this.serviceProviderField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapGroupMapping[] LdapGroupMappings {
            get {
                return this.ldapGroupMappingsField;
            }
            set {
                this.ldapGroupMappingsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseDomainUserList : CxWSBasicRepsonse {
        
        private CxDomainUser[] userListField;
        
        /// <remarks/>
        public CxDomainUser[] UserList {
            get {
                return this.userListField;
            }
            set {
                this.userListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseUserDirectories : CxWSBasicRepsonse {
        
        private CxWSActiveDirectoryDomainDetails[] domainsField;
        
        /// <remarks/>
        public CxWSActiveDirectoryDomainDetails[] Domains {
            get {
                return this.domainsField;
            }
            set {
                this.domainsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseHierarchyGroupNodes : CxWSBasicRepsonse {
        
        private HierarchyGroupNode[] hierarchyGroupNodesField;
        
        /// <remarks/>
        public HierarchyGroupNode[] HierarchyGroupNodes {
            get {
                return this.hierarchyGroupNodesField;
            }
            set {
                this.hierarchyGroupNodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSingleUserData : CxWSBasicRepsonse {
        
        private UserData userDataField;
        
        /// <remarks/>
        public UserData UserData {
            get {
                return this.userDataField;
            }
            set {
                this.userDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseProfileData : CxWSBasicRepsonse {
        
        private ProfileData profileDataField;
        
        /// <remarks/>
        public ProfileData ProfileData {
            get {
                return this.profileDataField;
            }
            set {
                this.profileDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsePendingUsersList : CxWSBasicRepsonse {
        
        private WebClientPendingUser[] pendingUsersListField;
        
        /// <remarks/>
        public WebClientPendingUser[] pendingUsersList {
            get {
                return this.pendingUsersListField;
            }
            set {
                this.pendingUsersListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseResultStateList : CxWSBasicRepsonse {
        
        private ResultState[] resultStateListField;
        
        /// <remarks/>
        public ResultState[] ResultStateList {
            get {
                return this.resultStateListField;
            }
            set {
                this.resultStateListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSourcesContent : CxWSBasicRepsonse {
        
        private CxWSResponseSourceContent[] cxWSResponseSourcesContentField;
        
        private string encodeField;
        
        /// <remarks/>
        public CxWSResponseSourceContent[] cxWSResponseSourcesContent {
            get {
                return this.cxWSResponseSourcesContentField;
            }
            set {
                this.cxWSResponseSourcesContentField = value;
            }
        }
        
        /// <remarks/>
        public string Encode {
            get {
                return this.encodeField;
            }
            set {
                this.encodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSourceContent : CxWSBasicRepsonse {
        
        private string sourceField;
        
        private string encodeField;
        
        /// <remarks/>
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        public string Encode {
            get {
                return this.encodeField;
            }
            set {
                this.encodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseResultDescription : CxWSBasicRepsonse {
        
        private string resultDescriptionField;
        
        /// <remarks/>
        public string ResultDescription {
            get {
                return this.resultDescriptionField;
            }
            set {
                this.resultDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseQueryDescription : CxWSBasicRepsonse {
        
        private string queryDescriptionField;
        
        /// <remarks/>
        public string QueryDescription {
            get {
                return this.queryDescriptionField;
            }
            set {
                this.queryDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseDeleteScans : CxWSBasicRepsonse {
        
        private bool isConfirmationField;
        
        private DeleteFlags flagsField;
        
        private UndeletedObject[] undeletedScansField;
        
        private int numOfDeletedScansField;
        
        /// <remarks/>
        public bool IsConfirmation {
            get {
                return this.isConfirmationField;
            }
            set {
                this.isConfirmationField = value;
            }
        }
        
        /// <remarks/>
        public DeleteFlags Flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
        
        /// <remarks/>
        public UndeletedObject[] UndeletedScans {
            get {
                return this.undeletedScansField;
            }
            set {
                this.undeletedScansField = value;
            }
        }
        
        /// <remarks/>
        public int NumOfDeletedScans {
            get {
                return this.numOfDeletedScansField;
            }
            set {
                this.numOfDeletedScansField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScanLog : CxWSBasicRepsonse {
        
        private byte[] scanLogField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ScanLog {
            get {
                return this.scanLogField;
            }
            set {
                this.scanLogField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponceScanCompareResults : CxWSBasicRepsonse {
        
        private CxWSSingleResultCompareData[] resultsField;
        
        /// <remarks/>
        public CxWSSingleResultCompareData[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScanCompareSummary : CxWSBasicRepsonse {
        
        private CxWsScanCompareCount totalField;
        
        private CxWsScanCompareCount highField;
        
        private CxWsScanCompareCount mediumField;
        
        private CxWsScanCompareCount lowField;
        
        private CxWsScanCompareCount infoField;
        
        /// <remarks/>
        public CxWsScanCompareCount Total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
        
        /// <remarks/>
        public CxWsScanCompareCount High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public CxWsScanCompareCount Medium {
            get {
                return this.mediumField;
            }
            set {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        public CxWsScanCompareCount Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public CxWsScanCompareCount Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseScanSummaryExtended))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScanSummary : CxWSBasicRepsonse {
        
        private CxDateTime startedField;
        
        private CxDateTime finishedField;
        
        private int scanRiskField;
        
        private string presetField;
        
        private string pathField;
        
        private string commentField;
        
        private long lOCField;
        
        private long filesCountField;
        
        private int highField;
        
        private int mediumField;
        
        private int lowField;
        
        private int infoField;
        
        private int scanRiskSeverityField;
        
        private int scanRiskQuantityField;
        
        private bool isIncrementalField;
        
        private ScanType scanTypeField;
        
        private CxWSQueryLanguageState[] scanLanguageStateCollectionField;
        
        private CxDateTime engineStartField;
        
        private CxDateTime engineFinishField;
        
        private CxDateTime scanQueuedField;
        
        private long totalScanTimeField;
        
        private CxDateTime statisticsCalculationDateField;
        
        private string projectNameField;
        
        private string teamNameField;
        
        /// <remarks/>
        public CxDateTime Started {
            get {
                return this.startedField;
            }
            set {
                this.startedField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime Finished {
            get {
                return this.finishedField;
            }
            set {
                this.finishedField = value;
            }
        }
        
        /// <remarks/>
        public int ScanRisk {
            get {
                return this.scanRiskField;
            }
            set {
                this.scanRiskField = value;
            }
        }
        
        /// <remarks/>
        public string Preset {
            get {
                return this.presetField;
            }
            set {
                this.presetField = value;
            }
        }
        
        /// <remarks/>
        public string Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public long LOC {
            get {
                return this.lOCField;
            }
            set {
                this.lOCField = value;
            }
        }
        
        /// <remarks/>
        public long FilesCount {
            get {
                return this.filesCountField;
            }
            set {
                this.filesCountField = value;
            }
        }
        
        /// <remarks/>
        public int High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public int Medium {
            get {
                return this.mediumField;
            }
            set {
                this.mediumField = value;
            }
        }
        
        /// <remarks/>
        public int Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public int Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
        
        /// <remarks/>
        public int ScanRiskSeverity {
            get {
                return this.scanRiskSeverityField;
            }
            set {
                this.scanRiskSeverityField = value;
            }
        }
        
        /// <remarks/>
        public int ScanRiskQuantity {
            get {
                return this.scanRiskQuantityField;
            }
            set {
                this.scanRiskQuantityField = value;
            }
        }
        
        /// <remarks/>
        public bool IsIncremental {
            get {
                return this.isIncrementalField;
            }
            set {
                this.isIncrementalField = value;
            }
        }
        
        /// <remarks/>
        public ScanType ScanType {
            get {
                return this.scanTypeField;
            }
            set {
                this.scanTypeField = value;
            }
        }
        
        /// <remarks/>
        public CxWSQueryLanguageState[] ScanLanguageStateCollection {
            get {
                return this.scanLanguageStateCollectionField;
            }
            set {
                this.scanLanguageStateCollectionField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime EngineStart {
            get {
                return this.engineStartField;
            }
            set {
                this.engineStartField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime EngineFinish {
            get {
                return this.engineFinishField;
            }
            set {
                this.engineFinishField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime ScanQueued {
            get {
                return this.scanQueuedField;
            }
            set {
                this.scanQueuedField = value;
            }
        }
        
        /// <remarks/>
        public long TotalScanTime {
            get {
                return this.totalScanTimeField;
            }
            set {
                this.totalScanTimeField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime StatisticsCalculationDate {
            get {
                return this.statisticsCalculationDateField;
            }
            set {
                this.statisticsCalculationDateField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public string TeamName {
            get {
                return this.teamNameField;
            }
            set {
                this.teamNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScanSummaryExtended : CxWSResponseScanSummary {
        
        private ScanCompletedStatus scanCompletedStatusField;
        
        private PartialSASTScansDTO[] partialSASTScansField;
        
        /// <remarks/>
        public ScanCompletedStatus ScanCompletedStatus {
            get {
                return this.scanCompletedStatusField;
            }
            set {
                this.scanCompletedStatusField = value;
            }
        }
        
        /// <remarks/>
        public PartialSASTScansDTO[] PartialSASTScans {
            get {
                return this.partialSASTScansField;
            }
            set {
                this.partialSASTScansField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScansDisplayExtendedData : CxWSBasicRepsonse {
        
        private ScanDisplayDataExtended[] scanListField;
        
        /// <remarks/>
        public ScanDisplayDataExtended[] ScanList {
            get {
                return this.scanListField;
            }
            set {
                this.scanListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScanProperties : CxWSBasicRepsonse {
        
        private Vulerability[] top5VulnesField;
        
        private ScanRiskLevel scanRiskParamsField;
        
        private string commentField;
        
        private CxDateTime statisticsCalculationDateField;
        
        /// <remarks/>
        public Vulerability[] Top5Vulnes {
            get {
                return this.top5VulnesField;
            }
            set {
                this.top5VulnesField = value;
            }
        }
        
        /// <remarks/>
        public ScanRiskLevel ScanRiskParams {
            get {
                return this.scanRiskParamsField;
            }
            set {
                this.scanRiskParamsField = value;
            }
        }
        
        /// <remarks/>
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime StatisticsCalculationDate {
            get {
                return this.statisticsCalculationDateField;
            }
            set {
                this.statisticsCalculationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScansDisplayData : CxWSBasicRepsonse {
        
        private ScanDisplayData[] scanListField;
        
        /// <remarks/>
        public ScanDisplayData[] ScanList {
            get {
                return this.scanListField;
            }
            set {
                this.scanListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseDeleteProjects : CxWSBasicRepsonse {
        
        private bool isConfirmationField;
        
        private DeleteFlags flagsField;
        
        private UndeletedObject[] undeletedProjectsField;
        
        private int numOfDeletedProjectsField;
        
        /// <remarks/>
        public bool IsConfirmation {
            get {
                return this.isConfirmationField;
            }
            set {
                this.isConfirmationField = value;
            }
        }
        
        /// <remarks/>
        public DeleteFlags Flags {
            get {
                return this.flagsField;
            }
            set {
                this.flagsField = value;
            }
        }
        
        /// <remarks/>
        public UndeletedObject[] UndeletedProjects {
            get {
                return this.undeletedProjectsField;
            }
            set {
                this.undeletedProjectsField = value;
            }
        }
        
        /// <remarks/>
        public int NumOfDeletedProjects {
            get {
                return this.numOfDeletedProjectsField;
            }
            set {
                this.numOfDeletedProjectsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseResultStateUpdate : CxWSBasicRepsonse {
        
        private bool pathInfluenceExistsField;
        
        private bool updatedResultStateField;
        
        private CxWSResultPathDisplayDetails[] influencedPathsDetailsField;
        
        /// <remarks/>
        public bool PathInfluenceExists {
            get {
                return this.pathInfluenceExistsField;
            }
            set {
                this.pathInfluenceExistsField = value;
            }
        }
        
        /// <remarks/>
        public bool UpdatedResultState {
            get {
                return this.updatedResultStateField;
            }
            set {
                this.updatedResultStateField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResultPathDisplayDetails[] InfluencedPathsDetails {
            get {
                return this.influencedPathsDetailsField;
            }
            set {
                this.influencedPathsDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsProjectChartData : CxWSBasicRepsonse {
        
        private ProjectScansRiskLevel[] scansRiskLevelListField;
        
        private ProjectScansResultSummary[] scanResultSummaryListField;
        
        private CxDateTime lastStatisticsCalcDateField;
        
        /// <remarks/>
        public ProjectScansRiskLevel[] ScansRiskLevelList {
            get {
                return this.scansRiskLevelListField;
            }
            set {
                this.scansRiskLevelListField = value;
            }
        }
        
        /// <remarks/>
        public ProjectScansResultSummary[] ScanResultSummaryList {
            get {
                return this.scanResultSummaryListField;
            }
            set {
                this.scanResultSummaryListField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime LastStatisticsCalcDate {
            get {
                return this.lastStatisticsCalcDateField;
            }
            set {
                this.lastStatisticsCalcDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsProjectProperties : CxWSBasicRepsonse {
        
        private CxWSResponseProjectConfig projectConfigField;
        
        private CxWSResponsProjectChartData projectChartDataField;
        
        /// <remarks/>
        public CxWSResponseProjectConfig ProjectConfig {
            get {
                return this.projectConfigField;
            }
            set {
                this.projectConfigField = value;
            }
        }
        
        /// <remarks/>
        public CxWSResponsProjectChartData ProjectChartData {
            get {
                return this.projectChartDataField;
            }
            set {
                this.projectChartDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseProjectConfig : CxWSBasicRepsonse {
        
        private ProjectConfiguration projectConfigField;
        
        private UserPermission permissionField;
        
        /// <remarks/>
        public ProjectConfiguration ProjectConfig {
            get {
                return this.projectConfigField;
            }
            set {
                this.projectConfigField = value;
            }
        }
        
        /// <remarks/>
        public UserPermission Permission {
            get {
                return this.permissionField;
            }
            set {
                this.permissionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseProjectsDisplayData : CxWSBasicRepsonse {
        
        private ProjectDisplayData[] projectListField;
        
        /// <remarks/>
        public ProjectDisplayData[] projectList {
            get {
                return this.projectListField;
            }
            set {
                this.projectListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseProjectsData : CxWSBasicRepsonse {
        
        private CxProjectData[] projectsListField;
        
        /// <remarks/>
        public CxProjectData[] ProjectsList {
            get {
                return this.projectsListField;
            }
            set {
                this.projectsListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseQueueRunID : CxWSBasicRepsonse {
        
        private string runIdField;
        
        /// <remarks/>
        public string RunId {
            get {
                return this.runIdField;
            }
            set {
                this.runIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseExtendedScanStatusArray : CxWSBasicRepsonse {
        
        private CxWSResponseExtendedScanStatus[] statusArrField;
        
        /// <remarks/>
        public CxWSResponseExtendedScanStatus[] statusArr {
            get {
                return this.statusArrField;
            }
            set {
                this.statusArrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseExtendedScanStatus : CxWSResponseScanStatus {
        
        private bool isIncrementalField;
        
        /// <remarks/>
        public bool IsIncremental {
            get {
                return this.isIncrementalField;
            }
            set {
                this.isIncrementalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseExtendedScanStatus))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScanStatus : CxWSBasicRepsonse {
        
        private int currentStageField;
        
        private int queuePositionField;
        
        private int totalPercentField;
        
        private int currentStagePercentField;
        
        private string ownerField;
        
        private string stageNameField;
        
        private string stageMessageField;
        
        private string stepMessageField;
        
        private string stepDetailsField;
        
        private long resultIdField;
        
        private long scanIdField;
        
        private long projectIdField;
        
        private long taskIdField;
        
        private string taskNameField;
        
        private string projectNameField;
        
        private string runIdField;
        
        private string sourceIdField;
        
        private long lOCField;
        
        private CxDateTime timeScheduledField;
        
        private CxDateTime elapsedTimeField;
        
        private CxDateTime timeFinishedField;
        
        private CxDateTime timeBeginWorkingField;
        
        private CurrentStatusEnum currentStatusField;
        
        private string serverNameField;
        
        private string originField;
        
        private bool isPublicField;
        
        private bool partialResultsField;
        
        /// <remarks/>
        public int CurrentStage {
            get {
                return this.currentStageField;
            }
            set {
                this.currentStageField = value;
            }
        }
        
        /// <remarks/>
        public int QueuePosition {
            get {
                return this.queuePositionField;
            }
            set {
                this.queuePositionField = value;
            }
        }
        
        /// <remarks/>
        public int TotalPercent {
            get {
                return this.totalPercentField;
            }
            set {
                this.totalPercentField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentStagePercent {
            get {
                return this.currentStagePercentField;
            }
            set {
                this.currentStagePercentField = value;
            }
        }
        
        /// <remarks/>
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        public string StageName {
            get {
                return this.stageNameField;
            }
            set {
                this.stageNameField = value;
            }
        }
        
        /// <remarks/>
        public string StageMessage {
            get {
                return this.stageMessageField;
            }
            set {
                this.stageMessageField = value;
            }
        }
        
        /// <remarks/>
        public string StepMessage {
            get {
                return this.stepMessageField;
            }
            set {
                this.stepMessageField = value;
            }
        }
        
        /// <remarks/>
        public string StepDetails {
            get {
                return this.stepDetailsField;
            }
            set {
                this.stepDetailsField = value;
            }
        }
        
        /// <remarks/>
        public long ResultId {
            get {
                return this.resultIdField;
            }
            set {
                this.resultIdField = value;
            }
        }
        
        /// <remarks/>
        public long ScanId {
            get {
                return this.scanIdField;
            }
            set {
                this.scanIdField = value;
            }
        }
        
        /// <remarks/>
        public long ProjectId {
            get {
                return this.projectIdField;
            }
            set {
                this.projectIdField = value;
            }
        }
        
        /// <remarks/>
        public long TaskId {
            get {
                return this.taskIdField;
            }
            set {
                this.taskIdField = value;
            }
        }
        
        /// <remarks/>
        public string TaskName {
            get {
                return this.taskNameField;
            }
            set {
                this.taskNameField = value;
            }
        }
        
        /// <remarks/>
        public string ProjectName {
            get {
                return this.projectNameField;
            }
            set {
                this.projectNameField = value;
            }
        }
        
        /// <remarks/>
        public string RunId {
            get {
                return this.runIdField;
            }
            set {
                this.runIdField = value;
            }
        }
        
        /// <remarks/>
        public string SourceId {
            get {
                return this.sourceIdField;
            }
            set {
                this.sourceIdField = value;
            }
        }
        
        /// <remarks/>
        public long LOC {
            get {
                return this.lOCField;
            }
            set {
                this.lOCField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime TimeScheduled {
            get {
                return this.timeScheduledField;
            }
            set {
                this.timeScheduledField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime ElapsedTime {
            get {
                return this.elapsedTimeField;
            }
            set {
                this.elapsedTimeField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime TimeFinished {
            get {
                return this.timeFinishedField;
            }
            set {
                this.timeFinishedField = value;
            }
        }
        
        /// <remarks/>
        public CxDateTime TimeBeginWorking {
            get {
                return this.timeBeginWorkingField;
            }
            set {
                this.timeBeginWorkingField = value;
            }
        }
        
        /// <remarks/>
        public CurrentStatusEnum CurrentStatus {
            get {
                return this.currentStatusField;
            }
            set {
                this.currentStatusField = value;
            }
        }
        
        /// <remarks/>
        public string ServerName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
            }
        }
        
        /// <remarks/>
        public string Origin {
            get {
                return this.originField;
            }
            set {
                this.originField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPublic {
            get {
                return this.isPublicField;
            }
            set {
                this.isPublicField = value;
            }
        }
        
        /// <remarks/>
        public bool PartialResults {
            get {
                return this.partialResultsField;
            }
            set {
                this.partialResultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CurrentStatusEnum {
        
        /// <remarks/>
        Queued,
        
        /// <remarks/>
        Working,
        
        /// <remarks/>
        Finished,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        Canceled,
        
        /// <remarks/>
        Deleted,
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        Unzipping,
        
        /// <remarks/>
        WaitingToProcess,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseCountLines : CxWSBasicRepsonse {
        
        private int numOfLinesField;
        
        /// <remarks/>
        public int NumOfLines {
            get {
                return this.numOfLinesField;
            }
            set {
                this.numOfLinesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSourceActionList : CxWSBasicRepsonse {
        
        private Action[] actionListField;
        
        /// <remarks/>
        public Action[] ActionList {
            get {
                return this.actionListField;
            }
            set {
                this.actionListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseFileSystemLayer : CxWSBasicRepsonse {
        
        private string[] folderListField;
        
        /// <remarks/>
        public string[] FolderList {
            get {
                return this.folderListField;
            }
            set {
                this.folderListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseConfigSetList : CxWSBasicRepsonse {
        
        private ConfigurationSet[] configSetListField;
        
        /// <remarks/>
        public ConfigurationSet[] ConfigSetList {
            get {
                return this.configSetListField;
            }
            set {
                this.configSetListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseGroupList : CxWSBasicRepsonse {
        
        private Group[] groupListField;
        
        /// <remarks/>
        public Group[] GroupList {
            get {
                return this.groupListField;
            }
            set {
                this.groupListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseCache : CxWSBasicRepsonse {
        
        private byte[] cacheField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Cache {
            get {
                return this.cacheField;
            }
            set {
                this.cacheField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CXWSResponseResultSummary : CxWSBasicRepsonse {
        
        private CxWSResultSummary[] summaryListField;
        
        /// <remarks/>
        public CxWSResultSummary[] SummaryList {
            get {
                return this.summaryListField;
            }
            set {
                this.summaryListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseResultCollection : CxWSBasicRepsonse {
        
        private AuditResultsCollection resultCollectionField;
        
        /// <remarks/>
        public AuditResultsCollection ResultCollection {
            get {
                return this.resultCollectionField;
            }
            set {
                this.resultCollectionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSourceContainer : CxWSBasicRepsonse {
        
        private LocalCodeContainer sourceCodeContainerField;
        
        /// <remarks/>
        public LocalCodeContainer sourceCodeContainer {
            get {
                return this.sourceCodeContainerField;
            }
            set {
                this.sourceCodeContainerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSourceID : CxWSBasicRepsonse {
        
        private long projectIDField;
        
        private string sourceIDField;
        
        /// <remarks/>
        public long ProjectID {
            get {
                return this.projectIDField;
            }
            set {
                this.projectIDField = value;
            }
        }
        
        /// <remarks/>
        public string SourceID {
            get {
                return this.sourceIDField;
            }
            set {
                this.sourceIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseProjectsScansList : CxWSBasicRepsonse {
        
        private CxWSResponseBasicProjectData[] projectsField;
        
        /// <remarks/>
        public CxWSResponseBasicProjectData[] projects {
            get {
                return this.projectsField;
            }
            set {
                this.projectsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseLicenseExpirationDateDetails : CxWSBasicRepsonse {
        
        private string licenseExpirationDateField;
        
        private bool shouldDisplayExpirationDateField;
        
        /// <remarks/>
        public string LicenseExpirationDate {
            get {
                return this.licenseExpirationDateField;
            }
            set {
                this.licenseExpirationDateField = value;
            }
        }
        
        /// <remarks/>
        public bool ShouldDisplayExpirationDate {
            get {
                return this.shouldDisplayExpirationDateField;
            }
            set {
                this.shouldDisplayExpirationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSDataRetentionRequestResponse : CxWSBasicRepsonse {
        
        private CxWSDataRetentionRequest dataRetentionRequestField;
        
        /// <remarks/>
        public CxWSDataRetentionRequest DataRetentionRequest {
            get {
                return this.dataRetentionRequestField;
            }
            set {
                this.dataRetentionRequestField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSDataRetentionStatusResponse : CxWSBasicRepsonse {
        
        private CxDataRetentionStatus statusField;
        
        private System.Nullable<int> currentProgressField;
        
        private System.Nullable<int> totalProgressField;
        
        private string stageErrorField;
        
        /// <remarks/>
        public CxDataRetentionStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> CurrentProgress {
            get {
                return this.currentProgressField;
            }
            set {
                this.currentProgressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> TotalProgress {
            get {
                return this.totalProgressField;
            }
            set {
                this.totalProgressField = value;
            }
        }
        
        /// <remarks/>
        public string StageError {
            get {
                return this.stageErrorField;
            }
            set {
                this.stageErrorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseTeamLdapGroupMappingData : CxWSBasicRepsonse {
        
        private string teamIdField;
        
        private CxWSLdapGroupMapping[] ldapGroupsField;
        
        /// <remarks/>
        public string TeamId {
            get {
                return this.teamIdField;
            }
            set {
                this.teamIdField = value;
            }
        }
        
        /// <remarks/>
        public CxWSLdapGroupMapping[] LdapGroups {
            get {
                return this.ldapGroupsField;
            }
            set {
                this.ldapGroupsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseLDAPServerGroups : CxWSBasicRepsonse {
        
        private CxWSLdapGroup[] groupsField;
        
        /// <remarks/>
        public CxWSLdapGroup[] Groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseIdNamePairList : CxWSBasicRepsonse {
        
        private CxWSIdNamePair[] itemsField;
        
        /// <remarks/>
        public CxWSIdNamePair[] Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseLDAPServersConfiguration : CxWSBasicRepsonse {
        
        private CxWSLdapServerConfiguration[] serverConfigsField;
        
        /// <remarks/>
        public CxWSLdapServerConfiguration[] serverConfigs {
            get {
                return this.serverConfigsField;
            }
            set {
                this.serverConfigsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseJSONData : CxWSBasicRepsonse {
        
        private string jSONDataField;
        
        /// <remarks/>
        public string JSONData {
            get {
                return this.jSONDataField;
            }
            set {
                this.jSONDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseFailedScansDisplayData : CxWSBasicRepsonse {
        
        private FailedScansDisplayData[] failedScansListField;
        
        /// <remarks/>
        public FailedScansDisplayData[] FailedScansList {
            get {
                return this.failedScansListField;
            }
            set {
                this.failedScansListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseProjectScannedDisplayData : CxWSBasicRepsonse {
        
        private ProjectScannedDisplayData[] projectScannedListField;
        
        /// <remarks/>
        public ProjectScannedDisplayData[] ProjectScannedList {
            get {
                return this.projectScannedListField;
            }
            set {
                this.projectScannedListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxTeamPathsResponseResponse : CxWSBasicRepsonse {
        
        private string sourceTeamFullPathField;
        
        private string destinationTeamFullPathField;
        
        /// <remarks/>
        public string sourceTeamFullPath {
            get {
                return this.sourceTeamFullPathField;
            }
            set {
                this.sourceTeamFullPathField = value;
            }
        }
        
        /// <remarks/>
        public string destinationTeamFullPath {
            get {
                return this.destinationTeamFullPathField;
            }
            set {
                this.destinationTeamFullPathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSCxMoveTeamResponse : CxWSBasicRepsonse {
        
        private string messageField;
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSCxVersionResponse : CxWSBasicRepsonse {
        
        private string versionField;
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemRetrieveResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemSaveResponse))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSIssueTrackingSystemMetaResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemResponse : CxWSBasicRepsonse {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemRetrieveResponse : CxWSIssueTrackingSystemResponse {
        
        private CxWSIssueTrackingSystem[] trackingSystemsField;
        
        /// <remarks/>
        public CxWSIssueTrackingSystem[] TrackingSystems {
            get {
                return this.trackingSystemsField;
            }
            set {
                this.trackingSystemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemSaveResponse : CxWSIssueTrackingSystemResponse {
        
        private CxWSIssueTrackingSystem trackingSystemField;
        
        /// <remarks/>
        public CxWSIssueTrackingSystem TrackingSystem {
            get {
                return this.trackingSystemField;
            }
            set {
                this.trackingSystemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSIssueTrackingSystemMetaResponse : CxWSIssueTrackingSystemResponse {
        
        private CxWSIssueTrackingSystemMeta metaDataField;
        
        /// <remarks/>
        public CxWSIssueTrackingSystemMeta MetaData {
            get {
                return this.metaDataField;
            }
            set {
                this.metaDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSUserPreferencesResponse : CxWSBasicRepsonse {
        
        private CxUserPreferences[] preferencesField;
        
        /// <remarks/>
        public CxUserPreferences[] Preferences {
            get {
                return this.preferencesField;
            }
            set {
                this.preferencesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseScanResults : CxWSBasicRepsonse {
        
        private byte[] scanResultsField;
        
        private bool containsAllResultsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ScanResults {
            get {
                return this.scanResultsField;
            }
            set {
                this.scanResultsField = value;
            }
        }
        
        /// <remarks/>
        public bool containsAllResults {
            get {
                return this.containsAllResultsField;
            }
            set {
                this.containsAllResultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSProjectBranchingStatusResponse))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSReportStatusResponse : CxWSBasicRepsonse {
        
        private bool isReadyField;
        
        private bool isFailedField;
        
        /// <remarks/>
        public bool IsReady {
            get {
                return this.isReadyField;
            }
            set {
                this.isReadyField = value;
            }
        }
        
        /// <remarks/>
        public bool IsFailed {
            get {
                return this.isFailedField;
            }
            set {
                this.isFailedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSProjectBranchingStatusResponse : CxWSReportStatusResponse {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSCreateReportResponse : CxWSBasicRepsonse {
        
        private long idField;
        
        /// <remarks/>
        public long ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseExistsingTransportedPresetQueries))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseTransportedQueries : CxWSBasicRepsonse {
        
        private CxWSTransportedQuery[] queriesField;
        
        /// <remarks/>
        public CxWSTransportedQuery[] Queries {
            get {
                return this.queriesField;
            }
            set {
                this.queriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseExistsingTransportedPresetQueries : CxWSResponseTransportedQueries {
        
        private bool presetNameExistsField;
        
        private string presetNameField;
        
        /// <remarks/>
        public bool PresetNameExists {
            get {
                return this.presetNameExistsField;
            }
            set {
                this.presetNameExistsField = value;
            }
        }
        
        /// <remarks/>
        public string PresetName {
            get {
                return this.presetNameField;
            }
            set {
                this.presetNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSImportQueriesRepsonse : CxWSBasicRepsonse {
        
        private long requestIdField;
        
        private ImportQueryStatus importQueryStatusField;
        
        /// <remarks/>
        public long requestId {
            get {
                return this.requestIdField;
            }
            set {
                this.requestIdField = value;
            }
        }
        
        /// <remarks/>
        public ImportQueryStatus importQueryStatus {
            get {
                return this.importQueryStatusField;
            }
            set {
                this.importQueryStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum ImportQueryStatus {
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        OnProgress,
        
        /// <remarks/>
        Failed,
        
        /// <remarks/>
        Succeeded,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsePreset : CxWSBasicRepsonse {
        
        private byte[] presetField;
        
        private string[] overridenCorpQueryNamesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Preset {
            get {
                return this.presetField;
            }
            set {
                this.presetField = value;
            }
        }
        
        /// <remarks/>
        public string[] OverridenCorpQueryNames {
            get {
                return this.overridenCorpQueryNamesField;
            }
            set {
                this.overridenCorpQueryNamesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseQueries : CxWSBasicRepsonse {
        
        private byte[] queriesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Queries {
            get {
                return this.queriesField;
            }
            set {
                this.queriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseRunID : CxWSBasicRepsonse {
        
        private long projectIDField;
        
        private string runIdField;
        
        /// <remarks/>
        public long ProjectID {
            get {
                return this.projectIDField;
            }
            set {
                this.projectIDField = value;
            }
        }
        
        /// <remarks/>
        public string RunId {
            get {
                return this.runIdField;
            }
            set {
                this.runIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseEngineServerId : CxWSBasicRepsonse {
        
        private long idField;
        
        private bool isContinuousRangeField;
        
        private string continuousRangeWarningMessageField;
        
        /// <remarks/>
        public long id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public bool isContinuousRange {
            get {
                return this.isContinuousRangeField;
            }
            set {
                this.isContinuousRangeField = value;
            }
        }
        
        /// <remarks/>
        public string continuousRangeWarningMessage {
            get {
                return this.continuousRangeWarningMessageField;
            }
            set {
                this.continuousRangeWarningMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseEngineServers : CxWSBasicRepsonse {
        
        private CxEngineServer[] listField;
        
        /// <remarks/>
        public CxEngineServer[] list {
            get {
                return this.listField;
            }
            set {
                this.listField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSaasPackage : CxWSBasicRepsonse {
        
        private SaasPackage[] packagesField;
        
        /// <remarks/>
        public SaasPackage[] packages {
            get {
                return this.packagesField;
            }
            set {
                this.packagesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseLoginData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSaasLoginData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSessionID : CxWSBasicRepsonse {
        
        private string sessionIdField;
        
        /// <remarks/>
        public string SessionId {
            get {
                return this.sessionIdField;
            }
            set {
                this.sessionIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSaasLoginData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseLoginData : CxWSResponseSessionID {
        
        private string familyNameField;
        
        private string firstNameField;
        
        private string userNameField;
        
        private string emailField;
        
        private long userIDField;
        
        private int userPreferedLanguageLCIDField;
        
        private bool isAllowedToCreateProjectField;
        
        private bool isAllowedToChangeProjectField;
        
        private bool isAllowedToManageUsersField;
        
        private bool isAllowedToViewCompaniesField;
        
        private bool isAllowedToManageCompaniesField;
        
        private bool isAllowedToManageServerField;
        
        private bool isAllowedToViewInstallationDataField;
        
        private bool isAllowedToViewSpField;
        
        private bool isAllowedToManageSpField;
        
        private bool isScannerField;
        
        private bool isAuditorField;
        
        private bool isAllowedToManagePresetsField;
        
        private bool isAllowedToManagePredefinedCommandField;
        
        private bool isAllowedToManagePostScanActionField;
        
        private bool isAllowedToModifyResultDetailsField;
        
        private bool enableIncrementalScanField;
        
        private bool showSaaSPackageNotificationAndErrorsField;
        
        private bool showSaaSPackageDetailsField;
        
        private bool isAdviseChangePasswordField;
        
        private bool isAllowedToManageITSServersField;
        
        private bool allowedToChangeNotExploitableField;
        
        private bool isAllowedToDeleteScansField;
        
        /// <remarks/>
        public string FamilyName {
            get {
                return this.familyNameField;
            }
            set {
                this.familyNameField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public long UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserPreferedLanguageLCID {
            get {
                return this.userPreferedLanguageLCIDField;
            }
            set {
                this.userPreferedLanguageLCIDField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToCreateProject {
            get {
                return this.isAllowedToCreateProjectField;
            }
            set {
                this.isAllowedToCreateProjectField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToChangeProject {
            get {
                return this.isAllowedToChangeProjectField;
            }
            set {
                this.isAllowedToChangeProjectField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToManageUsers {
            get {
                return this.isAllowedToManageUsersField;
            }
            set {
                this.isAllowedToManageUsersField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToViewCompanies {
            get {
                return this.isAllowedToViewCompaniesField;
            }
            set {
                this.isAllowedToViewCompaniesField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToManageCompanies {
            get {
                return this.isAllowedToManageCompaniesField;
            }
            set {
                this.isAllowedToManageCompaniesField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToManageServer {
            get {
                return this.isAllowedToManageServerField;
            }
            set {
                this.isAllowedToManageServerField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToViewInstallationData {
            get {
                return this.isAllowedToViewInstallationDataField;
            }
            set {
                this.isAllowedToViewInstallationDataField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToViewSp {
            get {
                return this.isAllowedToViewSpField;
            }
            set {
                this.isAllowedToViewSpField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToManageSp {
            get {
                return this.isAllowedToManageSpField;
            }
            set {
                this.isAllowedToManageSpField = value;
            }
        }
        
        /// <remarks/>
        public bool IsScanner {
            get {
                return this.isScannerField;
            }
            set {
                this.isScannerField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAuditor {
            get {
                return this.isAuditorField;
            }
            set {
                this.isAuditorField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToManagePresets {
            get {
                return this.isAllowedToManagePresetsField;
            }
            set {
                this.isAllowedToManagePresetsField = value;
            }
        }
        
        /// <remarks/>
        public bool isAllowedToManagePredefinedCommand {
            get {
                return this.isAllowedToManagePredefinedCommandField;
            }
            set {
                this.isAllowedToManagePredefinedCommandField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToManagePostScanAction {
            get {
                return this.isAllowedToManagePostScanActionField;
            }
            set {
                this.isAllowedToManagePostScanActionField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToModifyResultDetails {
            get {
                return this.isAllowedToModifyResultDetailsField;
            }
            set {
                this.isAllowedToModifyResultDetailsField = value;
            }
        }
        
        /// <remarks/>
        public bool EnableIncrementalScan {
            get {
                return this.enableIncrementalScanField;
            }
            set {
                this.enableIncrementalScanField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowSaaSPackageNotificationAndErrors {
            get {
                return this.showSaaSPackageNotificationAndErrorsField;
            }
            set {
                this.showSaaSPackageNotificationAndErrorsField = value;
            }
        }
        
        /// <remarks/>
        public bool ShowSaaSPackageDetails {
            get {
                return this.showSaaSPackageDetailsField;
            }
            set {
                this.showSaaSPackageDetailsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAdviseChangePassword {
            get {
                return this.isAdviseChangePasswordField;
            }
            set {
                this.isAdviseChangePasswordField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToManageITSServers {
            get {
                return this.isAllowedToManageITSServersField;
            }
            set {
                this.isAllowedToManageITSServersField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowedToChangeNotExploitable {
            get {
                return this.allowedToChangeNotExploitableField;
            }
            set {
                this.allowedToChangeNotExploitableField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToDeleteScans {
            get {
                return this.isAllowedToDeleteScansField;
            }
            set {
                this.isAllowedToDeleteScansField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSaasLoginData : CxWSResponseLoginData {
        
        private bool isAllowedToUseSourceControlField;
        
        private bool isAllowedToCreatePDFField;
        
        private bool isAllowedToUseOnlineViewerField;
        
        private bool isAllowedToUsePluginsField;
        
        private bool isAllowedToViewResultStateField;
        
        private bool isAllowedToEditResultStateField;
        
        private bool isAllowedToViewResultSeverityField;
        
        private bool isAllowedToEditResultSeverityField;
        
        private bool isAllowedToViewAssignToField;
        
        private bool isAllowedToEditAssignToField;
        
        private bool isAllowedToViewCommentsField;
        
        private bool isAllowedToEditCommentsField;
        
        /// <remarks/>
        public bool IsAllowedToUseSourceControl {
            get {
                return this.isAllowedToUseSourceControlField;
            }
            set {
                this.isAllowedToUseSourceControlField = value;
            }
        }
        
        /// <remarks/>
        public bool isAllowedToCreatePDF {
            get {
                return this.isAllowedToCreatePDFField;
            }
            set {
                this.isAllowedToCreatePDFField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToUseOnlineViewer {
            get {
                return this.isAllowedToUseOnlineViewerField;
            }
            set {
                this.isAllowedToUseOnlineViewerField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToUsePlugins {
            get {
                return this.isAllowedToUsePluginsField;
            }
            set {
                this.isAllowedToUsePluginsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToViewResultState {
            get {
                return this.isAllowedToViewResultStateField;
            }
            set {
                this.isAllowedToViewResultStateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToEditResultState {
            get {
                return this.isAllowedToEditResultStateField;
            }
            set {
                this.isAllowedToEditResultStateField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToViewResultSeverity {
            get {
                return this.isAllowedToViewResultSeverityField;
            }
            set {
                this.isAllowedToViewResultSeverityField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToEditResultSeverity {
            get {
                return this.isAllowedToEditResultSeverityField;
            }
            set {
                this.isAllowedToEditResultSeverityField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToViewAssignTo {
            get {
                return this.isAllowedToViewAssignToField;
            }
            set {
                this.isAllowedToViewAssignToField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToEditAssignTo {
            get {
                return this.isAllowedToEditAssignToField;
            }
            set {
                this.isAllowedToEditAssignToField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToViewComments {
            get {
                return this.isAllowedToViewCommentsField;
            }
            set {
                this.isAllowedToViewCommentsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsAllowedToEditComments {
            get {
                return this.isAllowedToEditCommentsField;
            }
            set {
                this.isAllowedToEditCommentsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseShortQueryDescription : CxWSBasicRepsonse {
        
        private long queryIdField;
        
        private long cweIdField;
        
        private string queryDescriptionField;
        
        /// <remarks/>
        public long QueryId {
            get {
                return this.queryIdField;
            }
            set {
                this.queryIdField = value;
            }
        }
        
        /// <remarks/>
        public long CweId {
            get {
                return this.cweIdField;
            }
            set {
                this.cweIdField = value;
            }
        }
        
        /// <remarks/>
        public string QueryDescription {
            get {
                return this.queryDescriptionField;
            }
            set {
                this.queryDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsePivotLayouts : CxWSBasicRepsonse {
        
        private CxPivotLayout[] layoutsField;
        
        /// <remarks/>
        public CxPivotLayout[] Layouts {
            get {
                return this.layoutsField;
            }
            set {
                this.layoutsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsePivotTable : CxWSBasicRepsonse {
        
        private CxPivotTable pivotTableField;
        
        /// <remarks/>
        public CxPivotTable PivotTable {
            get {
                return this.pivotTableField;
            }
            set {
                this.pivotTableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseBool : CxWSBasicRepsonse {
        
        private bool resultField;
        
        /// <remarks/>
        public bool result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseAssignUsers : CxWSBasicRepsonse {
        
        private AssignUser[] assignUsersField;
        
        /// <remarks/>
        public AssignUser[] AssignUsers {
            get {
                return this.assignUsersField;
            }
            set {
                this.assignUsersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseUserData : CxWSBasicRepsonse {
        
        private UserData[] userDataListField;
        
        /// <remarks/>
        public UserData[] UserDataList {
            get {
                return this.userDataListField;
            }
            set {
                this.userDataListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseNameList : CxWSBasicRepsonse {
        
        private string[] nameListField;
        
        /// <remarks/>
        public string[] NameList {
            get {
                return this.nameListField;
            }
            set {
                this.nameListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsePredefinedCommands : CxWSBasicRepsonse {
        
        private CxPredefinedCommand[] commandsField;
        
        /// <remarks/>
        public CxPredefinedCommand[] commands {
            get {
                return this.commandsField;
            }
            set {
                this.commandsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseCustomFieldValues : CxWSBasicRepsonse {
        
        private string[] valuesField;
        
        /// <remarks/>
        public string[] Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseCustomFields : CxWSBasicRepsonse {
        
        private CxWSCustomField[] fieldsArrayField;
        
        /// <remarks/>
        public CxWSCustomField[] fieldsArray {
            get {
                return this.fieldsArrayField;
            }
            set {
                this.fieldsArrayField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseResultGraph : CxWSBasicRepsonse {
        
        private CxWSNode[] nodesField;
        
        private CxWSEdge[] edgesField;
        
        private bool partialField;
        
        /// <remarks/>
        public CxWSNode[] Nodes {
            get {
                return this.nodesField;
            }
            set {
                this.nodesField = value;
            }
        }
        
        /// <remarks/>
        public CxWSEdge[] Edges {
            get {
                return this.edgesField;
            }
            set {
                this.edgesField = value;
            }
        }
        
        /// <remarks/>
        public bool Partial {
            get {
                return this.partialField;
            }
            set {
                this.partialField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseResultPaths : CxWSBasicRepsonse {
        
        private CxWSResultPath[] pathsField;
        
        /// <remarks/>
        public CxWSResultPath[] Paths {
            get {
                return this.pathsField;
            }
            set {
                this.pathsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponceFileNames : CxWSBasicRepsonse {
        
        private string[] fileNamesField;
        
        /// <remarks/>
        public string[] fileNames {
            get {
                return this.fileNamesField;
            }
            set {
                this.fileNamesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponceResultPath : CxWSBasicRepsonse {
        
        private CxWSResultPath pathField;
        
        /// <remarks/>
        public CxWSResultPath Path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponceScanResults : CxWSBasicRepsonse {
        
        private CxWSSingleResultData[] resultsField;
        
        /// <remarks/>
        public CxWSSingleResultData[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponceQuerisForScan : CxWSBasicRepsonse {
        
        private CxWSQueryVulnerabilityData[] queriesField;
        
        /// <remarks/>
        public CxWSQueryVulnerabilityData[] Queries {
            get {
                return this.queriesField;
            }
            set {
                this.queriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSQueryVersionDetailsResponse : CxWSBasicRepsonse {
        
        private CxWSQueryVersionDetails queryDetailsField;
        
        /// <remarks/>
        public CxWSQueryVersionDetails QueryDetails {
            get {
                return this.queryDetailsField;
            }
            set {
                this.queryDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseQueriesCategories : CxWSBasicRepsonse {
        
        private CxQueryCategory[] queriesCategoriesField;
        
        /// <remarks/>
        public CxQueryCategory[] QueriesCategories {
            get {
                return this.queriesCategoriesField;
            }
            set {
                this.queriesCategoriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsePresetDetails : CxWSBasicRepsonse {
        
        private CxPresetDetails presetField;
        
        /// <remarks/>
        public CxPresetDetails preset {
            get {
                return this.presetField;
            }
            set {
                this.presetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxQueryCollectionResponse : CxWSBasicRepsonse {
        
        private CxWSQueryGroup[] queryGroupsField;
        
        /// <remarks/>
        public CxWSQueryGroup[] QueryGroups {
            get {
                return this.queryGroupsField;
            }
            set {
                this.queryGroupsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponsePresetList : CxWSBasicRepsonse {
        
        private Preset[] presetListField;
        
        /// <remarks/>
        public Preset[] PresetList {
            get {
                return this.presetListField;
            }
            set {
                this.presetListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseInstallationSettings : CxWSBasicRepsonse {
        
        private InstallationSetting[] installationSettingsListField;
        
        /// <remarks/>
        public InstallationSetting[] InstallationSettingsList {
            get {
                return this.installationSettingsListField;
            }
            set {
                this.installationSettingsListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWsResponseSystemSettings : CxWSBasicRepsonse {
        
        private SystemSettings sysSettingsField;
        
        /// <remarks/>
        public SystemSettings SysSettings {
            get {
                return this.sysSettingsField;
            }
            set {
                this.sysSettingsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSystemLanguages : CxWSBasicRepsonse {
        
        private SystemLanguage[] listField;
        
        /// <remarks/>
        public SystemLanguage[] list {
            get {
                return this.listField;
            }
            set {
                this.listField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseCompaniesLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSPLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerManagersLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWsResponseCompanyProperties))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseUsersLicenseData : CxWSBasicRepsonse {
        
        private int maxReviewersField;
        
        private int currentReviewersField;
        
        private int maxScannersField;
        
        private int currentScannersField;
        
        /// <remarks/>
        public int MaxReviewers {
            get {
                return this.maxReviewersField;
            }
            set {
                this.maxReviewersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentReviewers {
            get {
                return this.currentReviewersField;
            }
            set {
                this.currentReviewersField = value;
            }
        }
        
        /// <remarks/>
        public int MaxScanners {
            get {
                return this.maxScannersField;
            }
            set {
                this.maxScannersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentScanners {
            get {
                return this.currentScannersField;
            }
            set {
                this.currentScannersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseSPLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerManagersLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWsResponseCompanyProperties))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseCompaniesLicenseData : CxWSResponseUsersLicenseData {
        
        private int maxCompanyManagersField;
        
        private int currentCompanyManagersField;
        
        private int maxCompanyManagersWithAuditField;
        
        private int currentCompanyManagersWithAuditField;
        
        private int maxCompaniesField;
        
        private int currentCompaniesField;
        
        /// <remarks/>
        public int MaxCompanyManagers {
            get {
                return this.maxCompanyManagersField;
            }
            set {
                this.maxCompanyManagersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentCompanyManagers {
            get {
                return this.currentCompanyManagersField;
            }
            set {
                this.currentCompanyManagersField = value;
            }
        }
        
        /// <remarks/>
        public int MaxCompanyManagersWithAudit {
            get {
                return this.maxCompanyManagersWithAuditField;
            }
            set {
                this.maxCompanyManagersWithAuditField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentCompanyManagersWithAudit {
            get {
                return this.currentCompanyManagersWithAuditField;
            }
            set {
                this.currentCompanyManagersWithAuditField = value;
            }
        }
        
        /// <remarks/>
        public int MaxCompanies {
            get {
                return this.maxCompaniesField;
            }
            set {
                this.maxCompaniesField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentCompanies {
            get {
                return this.currentCompaniesField;
            }
            set {
                this.currentCompaniesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerManagersLicenseData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseSPLicenseData : CxWSResponseCompaniesLicenseData {
        
        private int maxSPManagersField;
        
        private int currentSPManagersField;
        
        private int currentSPsField;
        
        private int maxSPsField;
        
        /// <remarks/>
        public int MaxSPManagers {
            get {
                return this.maxSPManagersField;
            }
            set {
                this.maxSPManagersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentSPManagers {
            get {
                return this.currentSPManagersField;
            }
            set {
                this.currentSPManagersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentSPs {
            get {
                return this.currentSPsField;
            }
            set {
                this.currentSPsField = value;
            }
        }
        
        /// <remarks/>
        public int MaxSPs {
            get {
                return this.maxSPsField;
            }
            set {
                this.maxSPsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CxWSResponseServerLicenseData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseServerManagersLicenseData : CxWSResponseSPLicenseData {
        
        private int maxServerManagersField;
        
        private int currentServerManagersField;
        
        private int maxServerManagersWithAuditField;
        
        private int currentServerManagersWithAuditField;
        
        /// <remarks/>
        public int MaxServerManagers {
            get {
                return this.maxServerManagersField;
            }
            set {
                this.maxServerManagersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentServerManagers {
            get {
                return this.currentServerManagersField;
            }
            set {
                this.currentServerManagersField = value;
            }
        }
        
        /// <remarks/>
        public int MaxServerManagersWithAudit {
            get {
                return this.maxServerManagersWithAuditField;
            }
            set {
                this.maxServerManagersWithAuditField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentServerManagersWithAudit {
            get {
                return this.currentServerManagersWithAuditField;
            }
            set {
                this.currentServerManagersWithAuditField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseServerLicenseData : CxWSResponseServerManagersLicenseData {
        
        private string expirationDateField;
        
        private string maxConcurrentScansField;
        
        private string maxLOCField;
        
        private string hIDField;
        
        private SupportedLanguage[] supportedLanguagesField;
        
        private int maxUsersField;
        
        private int currentUsersField;
        
        private int maxAuditUsersField;
        
        private int currentAuditUsersField;
        
        private bool isOsaEnabledField;
        
        private string osaExpirationDateField;
        
        private LicenseEdition editionField;
        
        private long projectsAllowedField;
        
        private long currentProjectsCountField;
        
        /// <remarks/>
        public string ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        /// <remarks/>
        public string MaxConcurrentScans {
            get {
                return this.maxConcurrentScansField;
            }
            set {
                this.maxConcurrentScansField = value;
            }
        }
        
        /// <remarks/>
        public string MaxLOC {
            get {
                return this.maxLOCField;
            }
            set {
                this.maxLOCField = value;
            }
        }
        
        /// <remarks/>
        public string HID {
            get {
                return this.hIDField;
            }
            set {
                this.hIDField = value;
            }
        }
        
        /// <remarks/>
        public SupportedLanguage[] SupportedLanguages {
            get {
                return this.supportedLanguagesField;
            }
            set {
                this.supportedLanguagesField = value;
            }
        }
        
        /// <remarks/>
        public int MaxUsers {
            get {
                return this.maxUsersField;
            }
            set {
                this.maxUsersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentUsers {
            get {
                return this.currentUsersField;
            }
            set {
                this.currentUsersField = value;
            }
        }
        
        /// <remarks/>
        public int MaxAuditUsers {
            get {
                return this.maxAuditUsersField;
            }
            set {
                this.maxAuditUsersField = value;
            }
        }
        
        /// <remarks/>
        public int CurrentAuditUsers {
            get {
                return this.currentAuditUsersField;
            }
            set {
                this.currentAuditUsersField = value;
            }
        }
        
        /// <remarks/>
        public bool IsOsaEnabled {
            get {
                return this.isOsaEnabledField;
            }
            set {
                this.isOsaEnabledField = value;
            }
        }
        
        /// <remarks/>
        public string OsaExpirationDate {
            get {
                return this.osaExpirationDateField;
            }
            set {
                this.osaExpirationDateField = value;
            }
        }
        
        /// <remarks/>
        public LicenseEdition Edition {
            get {
                return this.editionField;
            }
            set {
                this.editionField = value;
            }
        }
        
        /// <remarks/>
        public long ProjectsAllowed {
            get {
                return this.projectsAllowedField;
            }
            set {
                this.projectsAllowedField = value;
            }
        }
        
        /// <remarks/>
        public long CurrentProjectsCount {
            get {
                return this.currentProjectsCountField;
            }
            set {
                this.currentProjectsCountField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum LicenseEdition {
        
        /// <remarks/>
        SDLC,
        
        /// <remarks/>
        SecurityGate,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWsResponseCompanyProperties : CxWSResponseCompaniesLicenseData {
        
        private string companyNameField;
        
        private CxPermission permissionField;
        
        /// <remarks/>
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
            }
        }
        
        /// <remarks/>
        public CxPermission permission {
            get {
                return this.permissionField;
            }
            set {
                this.permissionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public partial class CxWSResponseTeamData : CxWSBasicRepsonse {
        
        private TeamData[] teamDataListField;
        
        /// <remarks/>
        public TeamData[] TeamDataList {
            get {
                return this.teamDataListField;
            }
            set {
                this.teamDataListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum ResultLabelTypeEnum {
        
        /// <remarks/>
        IgnorePath,
        
        /// <remarks/>
        Remark,
        
        /// <remarks/>
        Severity,
        
        /// <remarks/>
        State,
        
        /// <remarks/>
        Assign,
        
        /// <remarks/>
        IssueTracking,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSGraphTypeEnum {
        
        /// <remarks/>
        Full,
        
        /// <remarks/>
        KeyPoints,
        
        /// <remarks/>
        Ends,
        
        /// <remarks/>
        none,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxWSSearchPatternOption {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        StartsWith,
        
        /// <remarks/>
        Contains,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://Checkmarx.com")]
    public enum CxUserTypes {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Domain,
        
        /// <remarks/>
        Application,
        
        /// <remarks/>
        OpenID,
        
        /// <remarks/>
        SSO,
        
        /// <remarks/>
        LDAP,
        
        /// <remarks/>
        SAML,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsValidCompanyNameCompletedEventHandler(object sender, IsValidCompanyNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidCompanyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidCompanyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCompanyTeamsCompletedEventHandler(object sender, GetCompanyTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTeamData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTeamData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetServiceProviderTeamsCompletedEventHandler(object sender, GetServiceProviderTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceProviderTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceProviderTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTeamData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTeamData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetServiceProviderCompaniesCompletedEventHandler(object sender, GetServiceProviderCompaniesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceProviderCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceProviderCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTeamData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTeamData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCompanyPropertiesCompletedEventHandler(object sender, GetCompanyPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompanyPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompanyPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWsResponseCompanyProperties Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWsResponseCompanyProperties)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetUserAsCompanyManagerCompletedEventHandler(object sender, SetUserAsCompanyManagerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserAsCompanyManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserAsCompanyManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetUserAsServiceProviderManagerCompletedEventHandler(object sender, SetUserAsServiceProviderManagerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserAsServiceProviderManagerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserAsServiceProviderManagerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsValidServiceProviderNameCompletedEventHandler(object sender, IsValidServiceProviderNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidServiceProviderNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidServiceProviderNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateCompanyPropertiesCompletedEventHandler(object sender, UpdateCompanyPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCompanyPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCompanyPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetSystemSettingsCompletedEventHandler(object sender, SetSystemSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetSystemSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetSystemSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetServerLanguageListCompletedEventHandler(object sender, GetServerLanguageListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerLanguageListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerLanguageListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSystemLanguages Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSystemLanguages)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSystemSettingsCompletedEventHandler(object sender, GetSystemSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWsResponseSystemSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWsResponseSystemSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void VerifySupportedVersionCompletedEventHandler(object sender, VerifySupportedVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifySupportedVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifySupportedVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetInstallationSettingsCompletedEventHandler(object sender, GetInstallationSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstallationSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstallationSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseInstallationSettings Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseInstallationSettings)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetPresetListCompletedEventHandler(object sender, GetPresetListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPresetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPresetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePresetList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePresetList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueryCollectionCompletedEventHandler(object sender, GetQueryCollectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxQueryCollectionResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxQueryCollectionResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueryCollectionWithInactiveCompletedEventHandler(object sender, GetQueryCollectionWithInactiveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryCollectionWithInactiveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryCollectionWithInactiveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxQueryCollectionResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxQueryCollectionResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetPresetDetailsCompletedEventHandler(object sender, GetPresetDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPresetDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPresetDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePresetDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePresetDetails)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateNewPresetCompletedEventHandler(object sender, CreateNewPresetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewPresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewPresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePresetDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePresetDetails)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdatePresetCompletedEventHandler(object sender, UpdatePresetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePresetDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePresetDetails)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeletePresetCompletedEventHandler(object sender, DeletePresetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsValidPresetNameCompletedEventHandler(object sender, IsValidPresetNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidPresetNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidPresetNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueriesCategoriesCompletedEventHandler(object sender, GetQueriesCategoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueriesCategoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueriesCategoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseQueriesCategories Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseQueriesCategories)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetDetailsForQueryVersionCodeCompletedEventHandler(object sender, GetDetailsForQueryVersionCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDetailsForQueryVersionCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDetailsForQueryVersionCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSQueryVersionDetailsResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSQueryVersionDetailsResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueriesForScanCompletedEventHandler(object sender, GetQueriesForScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueriesForScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueriesForScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceQuerisForScan Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceQuerisForScan)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultsForQueryCompletedEventHandler(object sender, GetResultsForQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsForQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsForQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceScanResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceScanResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultsForQueryQroupCompletedEventHandler(object sender, GetResultsForQueryQroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsForQueryQroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsForQueryQroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceScanResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceScanResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultsForScanByLanguageCompletedEventHandler(object sender, GetResultsForScanByLanguageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsForScanByLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsForScanByLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceScanResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceScanResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultsForScanCompletedEventHandler(object sender, GetResultsForScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsForScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsForScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceScanResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceScanResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultPathCompletedEventHandler(object sender, GetResultPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceResultPath Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceResultPath)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetPathCommentsHistoryCompletedEventHandler(object sender, GetPathCommentsHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPathCommentsHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPathCommentsHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceResultPath Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceResultPath)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetFileNamesForPathCompletedEventHandler(object sender, GetFileNamesForPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileNamesForPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileNamesForPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceFileNames Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceFileNames)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultPathsForQueryCompletedEventHandler(object sender, GetResultPathsForQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultPathsForQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultPathsForQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseResultPaths Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseResultPaths)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultGraphForQueryCompletedEventHandler(object sender, GetResultGraphForQueryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultGraphForQueryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultGraphForQueryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseResultGraph Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseResultGraph)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultsBySeverityCompletedEventHandler(object sender, GetResultsBySeverityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsBySeverityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsBySeverityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceScanResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceScanResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCustomFieldsCompletedEventHandler(object sender, GetCustomFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseCustomFields Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseCustomFields)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SaveCustomFieldsCompletedEventHandler(object sender, SaveCustomFieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveCustomFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveCustomFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteCustomFieldCompletedEventHandler(object sender, DeleteCustomFieldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCustomFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCustomFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCustomFieldValuesCompletedEventHandler(object sender, GetCustomFieldValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomFieldValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomFieldValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseCustomFieldValues Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseCustomFieldValues)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SavePredefinedCommandsCompletedEventHandler(object sender, SavePredefinedCommandsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SavePredefinedCommandsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SavePredefinedCommandsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetPredefinedCommandsCompletedEventHandler(object sender, GetPredefinedCommandsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPredefinedCommandsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPredefinedCommandsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePredefinedCommands Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePredefinedCommands)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetExecutableListCompletedEventHandler(object sender, GetExecutableListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExecutableListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExecutableListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseNameList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseNameList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdatePermissionCompletedEventHandler(object sender, UpdatePermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectAssignUsersCompletedEventHandler(object sender, GetProjectAssignUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectAssignUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectAssignUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseUserData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseUserData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectAssignUsersListCompletedEventHandler(object sender, GetProjectAssignUsersListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectAssignUsersListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectAssignUsersListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseAssignUsers Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseAssignUsers)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsAllowAutoSignInCompletedEventHandler(object sender, IsAllowAutoSignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAllowAutoSignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAllowAutoSignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseBool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseBool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SaveSubsetResultsCompletedEventHandler(object sender, SaveSubsetResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveSubsetResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveSubsetResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetPivotDataCompletedEventHandler(object sender, GetPivotDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPivotDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPivotDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePivotTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePivotTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetPivotLayoutsCompletedEventHandler(object sender, GetPivotLayoutsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPivotLayoutsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPivotLayoutsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePivotLayouts Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePivotLayouts)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SavePivotLayoutCompletedEventHandler(object sender, SavePivotLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SavePivotLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SavePivotLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeletePivotLayoutCompletedEventHandler(object sender, DeletePivotLayoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePivotLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePivotLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueryShortDescriptionCompletedEventHandler(object sender, GetQueryShortDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryShortDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryShortDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseShortQueryDescription Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseShortQueryDescription)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RegisterSaasPendingUserCompletedEventHandler(object sender, RegisterSaasPendingUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterSaasPendingUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterSaasPendingUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ActivateSaasUserCompletedEventHandler(object sender, ActivateSaasUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateSaasUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateSaasUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSaasLoginData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSaasLoginData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSaasPackagesCompletedEventHandler(object sender, GetSaasPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSaasPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSaasPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSaasPackage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSaasPackage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetTeamSaaSPackageCompletedEventHandler(object sender, GetTeamSaaSPackageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamSaaSPackageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamSaaSPackageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSaasPackage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSaasPackage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SaasLoginCompletedEventHandler(object sender, SaasLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaasLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaasLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSaasLoginData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSaasLoginData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SendEmailForSalesCompletedEventHandler(object sender, SendEmailForSalesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailForSalesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailForSalesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetEngineServersCompletedEventHandler(object sender, GetEngineServersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEngineServersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEngineServersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseEngineServers Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseEngineServers)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateEngineServerCompletedEventHandler(object sender, UpdateEngineServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEngineServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEngineServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseEngineServerId Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseEngineServerId)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateEngineServerCompletedEventHandler(object sender, CreateEngineServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateEngineServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateEngineServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseEngineServerId Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseEngineServerId)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteEngineServerCompletedEventHandler(object sender, DeleteEngineServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteEngineServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteEngineServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseEngineServerId Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseEngineServerId)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ScanCompletedEventHandler(object sender, ScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseRunID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseRunID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ExportQueriesCompletedEventHandler(object sender, ExportQueriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseQueries Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseQueries)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ExportPresetCompletedEventHandler(object sender, ExportPresetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportPresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportPresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePreset Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePreset)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ImportQueriesCompletedEventHandler(object sender, ImportQueriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSImportQueriesRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSImportQueriesRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetImportQueriesStatusCompletedEventHandler(object sender, GetImportQueriesStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetImportQueriesStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetImportQueriesStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSImportQueriesRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSImportQueriesRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetExistingQueriesCompletedEventHandler(object sender, GetExistingQueriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExistingQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExistingQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTransportedQueries Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTransportedQueries)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetExistingPresetQueriesCompletedEventHandler(object sender, GetExistingPresetQueriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExistingPresetQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExistingPresetQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseExistsingTransportedPresetQueries Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseExistsingTransportedPresetQueries)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ImportPresetCompletedEventHandler(object sender, ImportPresetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportPresetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportPresetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSImportQueriesRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSImportQueriesRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateScanReportCompletedEventHandler(object sender, CreateScanReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateScanReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateScanReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSCreateReportResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSCreateReportResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScanReportStatusCompletedEventHandler(object sender, GetScanReportStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScanReportStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScanReportStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSReportStatusResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSReportStatusResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScanReportCompletedEventHandler(object sender, GetScanReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScanReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScanReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseScanResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseScanResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CancelScanReportCompletedEventHandler(object sender, CancelScanReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelScanReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelScanReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SaveUserPreferencesCompletedEventHandler(object sender, SaveUserPreferencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveUserPreferencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveUserPreferencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserPreferencesCompletedEventHandler(object sender, GetUserPreferencesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPreferencesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPreferencesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSUserPreferencesResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSUserPreferencesResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IssueTrackingSystemsAPICompletedEventHandler(object sender, IssueTrackingSystemsAPICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IssueTrackingSystemsAPICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IssueTrackingSystemsAPICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSIssueTrackingSystemResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSIssueTrackingSystemResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetVersionNumberCompletedEventHandler(object sender, GetVersionNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVersionNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVersionNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSCxVersionResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSCxVersionResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void MoveTeamCompletedEventHandler(object sender, MoveTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSCxMoveTeamResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSCxMoveTeamResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetTeamFullPathsCompletedEventHandler(object sender, GetTeamFullPathsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamFullPathsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamFullPathsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxTeamPathsResponseResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxTeamPathsResponseResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectScannedDisplayDataCompletedEventHandler(object sender, GetProjectScannedDisplayDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectScannedDisplayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectScannedDisplayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseProjectScannedDisplayData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseProjectScannedDisplayData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetFailedScansDisplayDataCompletedEventHandler(object sender, GetFailedScansDisplayDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFailedScansDisplayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFailedScansDisplayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseFailedScansDisplayData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseFailedScansDisplayData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetTabWidgetsCompletedEventHandler(object sender, GetTabWidgetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTabWidgetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTabWidgetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseJSONData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseJSONData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetWidgetFiltersCompletedEventHandler(object sender, GetWidgetFiltersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWidgetFiltersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWidgetFiltersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseJSONData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseJSONData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetWidgetDataCompletedEventHandler(object sender, GetWidgetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWidgetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWidgetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseJSONData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseJSONData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetLdapServersConfigurationsCompletedEventHandler(object sender, GetLdapServersConfigurationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLdapServersConfigurationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLdapServersConfigurationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLDAPServersConfiguration Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLDAPServersConfiguration)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetLdapServersConfigurationsCompletedEventHandler(object sender, SetLdapServersConfigurationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetLdapServersConfigurationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetLdapServersConfigurationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLDAPServersConfiguration Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLDAPServersConfiguration)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void TestLdapServerConnectionCompletedEventHandler(object sender, TestLdapServerConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestLdapServerConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestLdapServerConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetConfiguredLdapServerNamesCompletedEventHandler(object sender, GetConfiguredLdapServerNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfiguredLdapServerNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfiguredLdapServerNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseIdNamePairList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseIdNamePairList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetLdapServerGroupsCompletedEventHandler(object sender, GetLdapServerGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLdapServerGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLdapServerGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLDAPServerGroups Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLDAPServerGroups)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetTeamLdapGroupsMappingCompletedEventHandler(object sender, GetTeamLdapGroupsMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTeamLdapGroupsMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTeamLdapGroupsMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTeamLdapGroupMappingData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTeamLdapGroupMappingData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetTeamLdapGroupsMappingCompletedEventHandler(object sender, SetTeamLdapGroupsMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTeamLdapGroupsMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTeamLdapGroupsMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ExecuteDataRetentionCompletedEventHandler(object sender, ExecuteDataRetentionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteDataRetentionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteDataRetentionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetDataRetentionStatusCompletedEventHandler(object sender, GetDataRetentionStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataRetentionStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataRetentionStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSDataRetentionStatusResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSDataRetentionStatusResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetLatestFinishedDataRetentionRequestCompletedEventHandler(object sender, GetLatestFinishedDataRetentionRequestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestFinishedDataRetentionRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestFinishedDataRetentionRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSDataRetentionRequestResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSDataRetentionRequestResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void StopDataRetentionCompletedEventHandler(object sender, StopDataRetentionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopDataRetentionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopDataRetentionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetLicenseExpirationDateForAdminCompletedEventHandler(object sender, GetLicenseExpirationDateForAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLicenseExpirationDateForAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLicenseExpirationDateForAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLicenseExpirationDateDetails Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLicenseExpirationDateDetails)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void AddLicenseExpirationNotificationCompletedEventHandler(object sender, AddLicenseExpirationNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLicenseExpirationNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLicenseExpirationNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CancelLicenseExpirationNotificationCompletedEventHandler(object sender, CancelLicenseExpirationNotificationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelLicenseExpirationNotificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelLicenseExpirationNotificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void WarmupCompletedEventHandler(object sender, WarmupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WarmupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WarmupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectsWithScansCompletedEventHandler(object sender, GetProjectsWithScansCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectsWithScansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectsWithScansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseProjectsScansList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseProjectsScansList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UploadProjectWithDefaultSettingsCompletedEventHandler(object sender, UploadProjectWithDefaultSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadProjectWithDefaultSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadProjectWithDefaultSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSourceID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSourceID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSourceCodeForScanCompletedEventHandler(object sender, GetSourceCodeForScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceCodeForScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceCodeForScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSourceContainer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSourceContainer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueryCollectionForLanguageCompletedEventHandler(object sender, GetQueryCollectionForLanguageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryCollectionForLanguageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryCollectionForLanguageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxQueryCollectionResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxQueryCollectionResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueryCollectionForLanguageByTeamIdCompletedEventHandler(object sender, GetQueryCollectionForLanguageByTeamIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryCollectionForLanguageByTeamIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryCollectionForLanguageByTeamIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxQueryCollectionResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxQueryCollectionResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UploadQueriesCompletedEventHandler(object sender, UploadQueriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadQueriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadQueriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void AddScanResultsToProjectCompletedEventHandler(object sender, AddScanResultsToProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddScanResultsToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddScanResultsToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseBasicScanData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseBasicScanData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultsCompletedEventHandler(object sender, GetResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseResultCollection Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseResultCollection)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultSummaryCompletedEventHandler(object sender, GetResultSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CXWSResponseResultSummary Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CXWSResponseResultSummary)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCacheCompletedEventHandler(object sender, GetCacheCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCacheCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCacheCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseCache Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseCache)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLoginData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLoginData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SamlLoginCompletedEventHandler(object sender, SamlLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SamlLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SamlLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLoginData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLoginData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void LoginV2CompletedEventHandler(object sender, LoginV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLoginData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLoginData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SsoLoginCompletedEventHandler(object sender, SsoLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SsoLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SsoLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLoginData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLoginData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SsoLoginV2CompletedEventHandler(object sender, SsoLoginV2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SsoLoginV2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SsoLoginV2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLoginData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLoginData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void LogoutCompletedEventHandler(object sender, LogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void LoginBySIDCompletedEventHandler(object sender, LoginBySIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginBySIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginBySIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseLoginData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseLoginData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsFirstLoginCompletedEventHandler(object sender, IsFirstLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsFirstLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsFirstLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseBool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseBool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void FirstLoginCompletedEventHandler(object sender, FirstLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FirstLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FirstLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAssociatedGroupsListCompletedEventHandler(object sender, GetAssociatedGroupsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssociatedGroupsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssociatedGroupsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseGroupList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseGroupList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetConfigurationSetListCompletedEventHandler(object sender, GetConfigurationSetListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationSetListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationSetListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseConfigSetList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseConfigSetList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsValidProjectNameCompletedEventHandler(object sender, IsValidProjectNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidProjectNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidProjectNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSharedFileSystemLayerCompletedEventHandler(object sender, GetSharedFileSystemLayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedFileSystemLayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSharedFileSystemLayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseFileSystemLayer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseFileSystemLayer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetRepositoryFileSystemLayerCompletedEventHandler(object sender, GetRepositoryFileSystemLayerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRepositoryFileSystemLayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRepositoryFileSystemLayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseFileSystemLayer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseFileSystemLayer)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSourceControlActionListCompletedEventHandler(object sender, GetSourceControlActionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceControlActionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceControlActionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSourceActionList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSourceActionList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetPostScanActionListCompletedEventHandler(object sender, GetPostScanActionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPostScanActionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPostScanActionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSourceActionList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSourceActionList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateNewProjectCompletedEventHandler(object sender, CreateNewProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseRunID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseRunID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateAndRunProjectCompletedEventHandler(object sender, CreateAndRunProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAndRunProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateAndRunProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseRunID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseRunID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RunScanAndAddToProjectCompletedEventHandler(object sender, RunScanAndAddToProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunScanAndAddToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunScanAndAddToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseRunID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseRunID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CountLinesCompletedEventHandler(object sender, CountLinesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CountLinesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CountLinesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseCountLines Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseCountLines)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScansStatusesCompletedEventHandler(object sender, GetScansStatusesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScansStatusesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScansStatusesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseExtendedScanStatusArray Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseExtendedScanStatusArray)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetStatusOfSingleScanCompletedEventHandler(object sender, GetStatusOfSingleScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStatusOfSingleScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStatusOfSingleScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseExtendedScanStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseExtendedScanStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void PostponeScanCompletedEventHandler(object sender, PostponeScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostponeScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostponeScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseQueueRunID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseQueueRunID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CancelScanCompletedEventHandler(object sender, CancelScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateProjectUserCredentialsCompletedEventHandler(object sender, UpdateProjectUserCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateProjectUserCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateProjectUserCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectsWithUserCredentialsCompletedEventHandler(object sender, GetProjectsWithUserCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectsWithUserCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectsWithUserCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseProjectsData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseProjectsData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectsCredentialUsersCompletedEventHandler(object sender, GetProjectsCredentialUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectsCredentialUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectsCredentialUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseNameList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseNameList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectsDisplayDataCompletedEventHandler(object sender, GetProjectsDisplayDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectsDisplayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectsDisplayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseProjectsDisplayData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseProjectsDisplayData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RunProjectImmediatelyCompletedEventHandler(object sender, RunProjectImmediatelyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunProjectImmediatelyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunProjectImmediatelyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RunProjectIncrementallyCompletedEventHandler(object sender, RunProjectIncrementallyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunProjectIncrementallyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunProjectIncrementallyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteProjectCompletedEventHandler(object sender, DeleteProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectConfigurationCompletedEventHandler(object sender, GetProjectConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseProjectConfig Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseProjectConfig)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectPropertiesCompletedEventHandler(object sender, GetProjectPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsProjectProperties Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsProjectProperties)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateProjectConfigurationCompletedEventHandler(object sender, UpdateProjectConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateProjectConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateProjectConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateProjectIncrementalConfigurationCompletedEventHandler(object sender, UpdateProjectIncrementalConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateProjectIncrementalConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateProjectIncrementalConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectChartsCompletedEventHandler(object sender, GetProjectChartsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectChartsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectChartsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsProjectChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsProjectChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetFalsePositiveFlagCompletedEventHandler(object sender, SetFalsePositiveFlagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetFalsePositiveFlagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetFalsePositiveFlagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateResultCommentCompletedEventHandler(object sender, UpdateResultCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateResultCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateResultCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateResultStateCompletedEventHandler(object sender, UpdateResultStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateResultStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateResultStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateSetOfResultStateCompletedEventHandler(object sender, UpdateSetOfResultStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSetOfResultStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSetOfResultStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateSetOfResultStateInfluenceCheckCompletedEventHandler(object sender, UpdateSetOfResultStateInfluenceCheckCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSetOfResultStateInfluenceCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSetOfResultStateInfluenceCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseResultStateUpdate Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseResultStateUpdate)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void BranchProjectCompletedEventHandler(object sender, BranchProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BranchProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BranchProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseRunID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseRunID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetProjectBranchingStatusCompletedEventHandler(object sender, GetProjectBranchingStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetProjectBranchingStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetProjectBranchingStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSProjectBranchingStatusResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSProjectBranchingStatusResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteProjectsCompletedEventHandler(object sender, DeleteProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseDeleteProjects Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseDeleteProjects)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RunScanWithExistingProjectCompletedEventHandler(object sender, RunScanWithExistingProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RunScanWithExistingProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RunScanWithExistingProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseRunID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseRunID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScansDisplayDataCompletedEventHandler(object sender, GetScansDisplayDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScansDisplayDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScansDisplayDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseScansDisplayData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseScansDisplayData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteScanCompletedEventHandler(object sender, DeleteScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScanPropertiesCompletedEventHandler(object sender, GetScanPropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScanPropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScanPropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseScanProperties Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseScanProperties)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateScanCommentCompletedEventHandler(object sender, UpdateScanCommentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateScanCommentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateScanCommentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScansDisplayDataForAllProjectsCompletedEventHandler(object sender, GetScansDisplayDataForAllProjectsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScansDisplayDataForAllProjectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScansDisplayDataForAllProjectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseScansDisplayExtendedData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseScansDisplayExtendedData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScanSummaryCompletedEventHandler(object sender, GetScanSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScanSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScanSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseScanSummaryExtended Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseScanSummaryExtended)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScanCompareSummaryCompletedEventHandler(object sender, GetScanCompareSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScanCompareSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScanCompareSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseScanCompareSummary Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseScanCompareSummary)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCompareScanResultsCompletedEventHandler(object sender, GetCompareScanResultsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompareScanResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompareScanResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponceScanCompareResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponceScanCompareResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetScanLogsCompletedEventHandler(object sender, GetScanLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetScanLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetScanLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseScanLog Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseScanLog)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteScansCompletedEventHandler(object sender, DeleteScansCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteScansCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteScansCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseDeleteScans Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseDeleteScans)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void LockScanCompletedEventHandler(object sender, LockScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LockScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LockScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UnlockScanCompletedEventHandler(object sender, UnlockScanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnlockScanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnlockScanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueryDescriptionByQueryIdCompletedEventHandler(object sender, GetQueryDescriptionByQueryIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryDescriptionByQueryIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryDescriptionByQueryIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseQueryDescription Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseQueryDescription)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetQueryDescriptionCompletedEventHandler(object sender, GetQueryDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetQueryDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetQueryDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseQueryDescription Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseQueryDescription)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultDescriptionCompletedEventHandler(object sender, GetResultDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseResultDescription Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseResultDescription)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCWEDescriptionCompletedEventHandler(object sender, GetCWEDescriptionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCWEDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCWEDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseQueryDescription Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseQueryDescription)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSourceByScanIDCompletedEventHandler(object sender, GetSourceByScanIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourceByScanIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourceByScanIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSourceContent Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSourceContent)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSourcesByScanIDCompletedEventHandler(object sender, GetSourcesByScanIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSourcesByScanIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSourcesByScanIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSourcesContent Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSourcesContent)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetResultStateListCompletedEventHandler(object sender, GetResultStateListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetResultStateListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetResultStateListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseResultStateList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseResultStateList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsSMTPHostConfiguredCompletedEventHandler(object sender, IsSMTPHostConfiguredCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsSMTPHostConfiguredCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsSMTPHostConfiguredCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseBool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseBool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsPasswordComplexityEnabledCompletedEventHandler(object sender, IsPasswordComplexityEnabledCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPasswordComplexityEnabledCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPasswordComplexityEnabledCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseBool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseBool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsPrivateCloudCompletedEventHandler(object sender, IsPrivateCloudCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsPrivateCloudCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsPrivateCloudCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseBool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseBool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsAdminAllowedToChangeUserPasswordCompletedEventHandler(object sender, IsAdminAllowedToChangeUserPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAdminAllowedToChangeUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAdminAllowedToChangeUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ForgotPasswordCompletedEventHandler(object sender, ForgotPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForgotPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForgotPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ResetPasswordCompletedEventHandler(object sender, ResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CheckChangePasswordTokenCompletedEventHandler(object sender, CheckChangePasswordTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckChangePasswordTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckChangePasswordTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ChangePasswordWithTokenCompletedEventHandler(object sender, ChangePasswordWithTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordWithTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordWithTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ChangePasswordAdminToUserCompletedEventHandler(object sender, ChangePasswordAdminToUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordAdminToUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordAdminToUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCompaniesCompletedEventHandler(object sender, GetCompaniesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseGroupList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseGroupList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RegisterPendingUserCompletedEventHandler(object sender, RegisterPendingUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterPendingUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterPendingUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetPendingUsersListCompletedEventHandler(object sender, GetPendingUsersListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingUsersListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPendingUsersListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponsePendingUsersList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponsePendingUsersList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeletePendingUsersCompletedEventHandler(object sender, DeletePendingUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePendingUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePendingUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void ApprovePendingUsersCompletedEventHandler(object sender, ApprovePendingUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApprovePendingUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApprovePendingUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserProfileDataCompletedEventHandler(object sender, GetUserProfileDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserProfileDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserProfileDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseProfileData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseProfileData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateUserProfileDataCompletedEventHandler(object sender, UpdateUserProfileDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserProfileDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserProfileDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUserByIdCompletedEventHandler(object sender, GetUserByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSingleUserData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSingleUserData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAllUsersCompletedEventHandler(object sender, GetAllUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseUserData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseUserData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAllUsersInGroupCompletedEventHandler(object sender, GetAllUsersInGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUsersInGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUsersInGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseUserData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseUserData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteUserCompletedEventHandler(object sender, DeleteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetHierarchyGroupTreeCompletedEventHandler(object sender, GetHierarchyGroupTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHierarchyGroupTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHierarchyGroupTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseHierarchyGroupNodes Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseHierarchyGroupNodes)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetChildNodesCompletedEventHandler(object sender, GetChildNodesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildNodesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChildNodesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseHierarchyGroupNodes Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseHierarchyGroupNodes)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAncestryGroupTreeCompletedEventHandler(object sender, GetAncestryGroupTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAncestryGroupTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAncestryGroupTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseHierarchyGroupNodes Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseHierarchyGroupNodes)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void SetUserActivationStateCompletedEventHandler(object sender, SetUserActivationStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUserActivationStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUserActivationStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void AddNewUserCompletedEventHandler(object sender, AddNewUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNewUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateUserDataCompletedEventHandler(object sender, UpdateUserDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetServerLicenseDataCompletedEventHandler(object sender, GetServerLicenseDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseServerLicenseData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseServerLicenseData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetUsersLicenseDataCompletedEventHandler(object sender, GetUsersLicenseDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseUsersLicenseData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseUsersLicenseData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCompaniesLicenseDataCompletedEventHandler(object sender, GetCompaniesLicenseDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompaniesLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompaniesLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseCompaniesLicenseData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseCompaniesLicenseData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetSPLicenseDataCompletedEventHandler(object sender, GetSPLicenseDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSPLicenseDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSPLicenseDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseSPLicenseData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseSPLicenseData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateUserGroupsCompletedEventHandler(object sender, UpdateUserGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetCompaniesListCompletedEventHandler(object sender, GetCompaniesListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCompaniesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCompaniesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseGroupList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseGroupList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsValidUserNameCompletedEventHandler(object sender, IsValidUserNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void IsValidEmailCompletedEventHandler(object sender, IsValidEmailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAvailbleDomainNamesCompletedEventHandler(object sender, GetAvailbleDomainNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailbleDomainNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailbleDomainNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseNameList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseNameList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAvailbleUserDirectoriesNamesCompletedEventHandler(object sender, GetAvailbleUserDirectoriesNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailbleUserDirectoriesNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailbleUserDirectoriesNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseNameList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseNameList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAvailbleUserDirectoriesCompletedEventHandler(object sender, GetAvailbleUserDirectoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailbleUserDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailbleUserDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseUserDirectories Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseUserDirectories)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAllUsersFromDomainCompletedEventHandler(object sender, GetAllUsersFromDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUsersFromDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUsersFromDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseDomainUserList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseDomainUserList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAllUsersFromUserDirectoryCompletedEventHandler(object sender, GetAllUsersFromUserDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUsersFromUserDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUsersFromUserDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseDomainUserList Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseDomainUserList)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateNewTeamCompletedEventHandler(object sender, CreateNewTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RenameTeamCompletedEventHandler(object sender, RenameTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void UpdateTeamCompletedEventHandler(object sender, UpdateTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAllTeamsCompletedEventHandler(object sender, GetAllTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTeamData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTeamData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAllUserDirecTeamsCompletedEventHandler(object sender, GetAllUserDirecTeamsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUserDirecTeamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUserDirecTeamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTeamData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTeamData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteTeamCompletedEventHandler(object sender, DeleteTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateNewCompanyCompletedEventHandler(object sender, CreateNewCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void CreateNewServiceProviderCompletedEventHandler(object sender, CreateNewServiceProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateNewServiceProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateNewServiceProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void RenameCompanyCompletedEventHandler(object sender, RenameCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAllCompaniesCompletedEventHandler(object sender, GetAllCompaniesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllCompaniesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllCompaniesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTeamData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTeamData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void GetAllSPsCompletedEventHandler(object sender, GetAllSPsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSPsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSPsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSResponseTeamData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSResponseTeamData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteCompanyCompletedEventHandler(object sender, DeleteCompanyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCompanyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCompanyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    public delegate void DeleteSPCompletedEventHandler(object sender, DeleteSPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2053.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CxWSBasicRepsonse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CxWSBasicRepsonse)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591